# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
module Dashboard
  # InternalController
  class InternalController < BaseController
    def initialize(config, http_call_back: nil)
      super(config, http_call_back: http_call_back)
    end

    # This API call retrieves information about the account indicated by the
    # Account ID.
    # @param [Integer] account_id Required parameter: Example:
    # @return [PomAccountResponse] response from the API call
    def get_pom_account(account_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'PomAccountResponse',
                                   PomAccountResponse)
      )
    end

    # Updates Account. <br>Note that the body is similar in structure to POST
    # for /accounts. <br>Accounts with Customer Segment set to Enterprise
    # Telephony are not allowed to have SPID or Alternative SPID configured.
    # <br>There are some specific values for &lt;AssociatedCatapultAccount&gt;
    # covered in folow table:    <table style="text-align: left; width: 80%;"
    # border="1" cellpadding="2" cellspacing="2">       <tbody>          <tr>   
    #          <th>Existing value</th>             <th>New value</th>           
    #  <th>Action description</th>          </tr>          <tr>            
    # <td>empty</td>             <td>empty</td>             <td>Association for
    # Account is not provided</td>          </tr>          <tr>            
    # <td>empty</td>             <td>string 'NEW' (case sensitive)</td>         
    #    <td>Update Iris Account and set Associated Identifier equal to Iris
    # Account ID. New Assiciated Account with this ID is created on the external
    # service</td>          </tr>          <tr>            
    # <td>u-id(anyone)</td>             <td>string 'NEW' (case sensitive)</td>  
    #           <td>Association and Account update can't be performed. There is
    # no way to change Association Identifier directly without removing a
    # previous association</td>          </tr>          <tr>            
    # <td>empty</td>             <td>Nonexistent u-id</td>            
    # <td>Association and Account update can't be performed. There is no way to
    # use Association Identifier that doesn't exist</td>          </tr>         
    # <tr>             <td>empty</td>             <td>u-id value that is already
    # associated with other Iris Account</td>             <td>Association and
    # Account update can't be performed. There is no way to use Associated
    # Identifier that is associated with other Iris Account</td>          </tr> 
    #         <tr>             <td>empty</td>             <td>Existing u-id
    # value</td>             <td>Update Iris Account with association to new
    # u-id</td>          </tr>          <tr>             <td>existing u-id</td> 
    #            <td>Nonexistent u-id value</td>             <td>Association and
    # Account update can't be performed. There is no way to use Association
    # Identifier that doesn't exist</td>          </tr>          <tr>           
    #  <td>existing u-id</td>             <td>u-id value that is already
    # associated with other Iris Account</td>             <td>Association and
    # Account update can't be performed. There is no way to use Associated
    # Identifier that is associated with other Iris Account</td>          </tr> 
    #         <tr>             <td>existing u-id with assigned Applications on
    # Account</td>             <td>new existing u-id</td>            
    # <td>Association and Account update can't be performed. There is no way to
    # reassign u-id with already assigned Applications on Iris Account</td>     
    #     </tr>          <tr>             <td>existing u-id with assigned
    # Applications on Account's Locations</td>             <td>new existing
    # u-id</td>             <td>Association and Account update can't be
    # performed. There is no way to reassign u-id with already assigned
    # Applications on Iris Account's Locations</td>          </tr>          <tr>
    #             <td>existing u-id</td>             <td>new existing u-id</td> 
    #            <td>Update Iris Account with association to new u-id</td>      
    #    </tr>          <tr>             <td>existing u-id</td>            
    # <td>same existing u-id</td>             <td>Update Iris Account without
    # following association. Association already exists</td>          </tr>     
    #     <tr>             <td>value in Iris Account ID format</td>            
    # <td>same value in format of Iris Account ID</td>             <td>Update
    # Iris Account without following association. Association already
    # exists</td>          </tr>          <tr>             <td>existing
    # u-id</td>             <td>value in Iris Account ID format</td>            
    # <td>Association and Account update can't be performed. There is no way to
    # change Association Identifier directly without removing a previous
    # association</td>          </tr>          <tr>             <td>empty</td>  
    #           <td>value in Iris Account ID format</td>            
    # <td>Association and Account update can't be performed. There is no way
    # explicitly to set Association Identifier in Iris Account ID format</td>   
    #       </tr>          <tr>             <td>value in Iris Account ID
    # format</td>             <td>other value in Iris Account ID format</td>    
    #         <td>Association and Account update can't be performed. There is no
    # way to set differ Association Identifier in Iris Account ID format</td>   
    #       </tr>          <tr>             <td>value in Iris Account ID format
    # or u-id with assigned Applications on Account or Locations</td>           
    #  <td>empty</td>             <td>Association and Account update can't be
    # performed. There is no way to remove association with existing
    # Applications on Account or Locations</td>          </tr>          <tr>    
    #         <td>value in Iris Account ID format or u-id</td>            
    # <td>empty</td>             <td>Update Iris Account. Association is
    # removed</td>          </tr>       </tbody>    </table>    <br>  Field
    # &lt;CustomerSegment&gt; is optional and can have following values:  <table
    # style="text-align: left; width: 80%;" border="1" cellpadding="2"
    # cellspacing="2">     <tbody>        <tr>           <th>Value</th>         
    #  <th>Description</th>        </tr>        <tr>          
    # <td>EnterpriseTelephony</td>           <td>Allows Origination and
    # Termination products to be assigned to account, not allows UC
    # trunking</td>        </tr>        <tr>           <td>UC</td>          
    # <td>Allows UC trunking product and blocks Origination and Termination
    # products</td>        </tr>        <tr>           <td>Wholesale</td>       
    #    <td>Allows Origination and Termination products to be assigned to
    # account, not allows UC trunking</td>        </tr>        <tr>          
    # <td>Trial</td>           <td>Does not limit products assignement. Allows
    # to switch to EnterpriseTelephony, UC or Wholesale customer segment, but
    # reverse transition to Trial from any other explicit segment is
    # forbidden.</td>        </tr>        <tr>          
    # <td>Wholesale-implied</td>           <td>Is returned if account has
    # Origination or Termination product and no explicit customer segment set.
    # On update this option is ignored</td>        </tr>        <tr>          
    # <td>UC-implied</td>           <td>Is returned if account has UC product
    # and no explicit customer segment set. On update this option is
    # ignored</td>        </tr>     </tbody>  </table>  <br>  <ul>      <li>If
    # the Customer Segment has never been explicitly set, or has been explicitly
    # set to Trial, then you may set the Customer Segment to Wholesale, UC, or
    # Enterprise Telephony, depending on the products assigned to the
    # account.</li>      <li>If the Customer Segment shows up as
    # Wholesale-implied, or UC-implied (in the GET response), it means the
    # Customer Segment has never been explicitly set for the account.</li>     
    # <li>If an account has the UcTrunking product, the Customer Segment can
    # only be set to UC or Trial.</li>      <li>If an account has the
    # Origination and/or Termination products, the Customer Segment cannot be
    # set to UC.</li>      <li>If the account has never had a TN assigned, the
    # Customer Segment may be changed according to the rules above. Otherwise
    # (if the account has had a TN assigned), if the Customer Segment has been
    # explicitly set to Wholesale, Enterprise Telephony, or UC, it cannot be
    # changed.</li>  </ul>
    # @param [Integer] account_id Required parameter: Example:
    # @param [PomAccount] body Optional parameter: Example:
    # @return [PomAccountResponse] response from the API call
    def update_pom_account(account_id,
                           body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('PomAccount', body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 409
        raise APIException.new(
          'Conflict',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'PomAccountResponse',
                                   PomAccountResponse)
      )
    end

    # TODO
    # @param [Integer] account_id Required parameter: Example:
    # @param [PomAccount] body Optional parameter: Example:
    # @return [PomAccountResponse] response from the API call
    def create_save_pom_account(account_id,
                                body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('PomAccount', body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'PomAccountResponse',
                                   PomAccountResponse)
      )
    end

    # TODO
    # @param [Integer] account_id Required parameter: Example:
    # @return [PomAccountResponse] response from the API call
    def delete_pom_account(account_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.delete(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'PomAccountResponse',
                                   PomAccountResponse)
      )
    end

    # TODO
    # @return [RegionsResponse] response from the API call
    def get_all_regions
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'RegionsResponse',
                                   RegionsResponse)
      )
    end

    # TODO
    # @param [TelephoneNumbers] body Optional parameter: Example:
    # @return [TnsReprovisioningResponse] response from the API call
    def create_reprovision_tns(body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('ReprovisionTns', body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'ReprovisionTnsResponse',
                                   TnsReprovisioningResponse)
      )
    end

    # TODO
    # @param [String] tn Optional parameter: Example:
    # @param [String] host Optional parameter: Example:
    # @return [AccountSearchResponse] response from the API call
    def get_accounts_seacrch(tn: nil,
                             host: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/search'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'TN' => tn,
        'host' => host
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'AccountSearchResponse',
                                   AccountSearchResponse)
      )
    end

    # Add a new product to the account, features can be added together with
    # product
    # @param [Integer] account_id Required parameter: Example:
    # @param [AccountProduct] body Optional parameter: Example:
    # @return [AccountProductResponse] response from the API call
    def create_account_product(account_id,
                               body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/products'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('Product', body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'AccountProductResponse',
                                   AccountProductResponse)
      )
    end

    # TODO
    # @param [Integer] account_id Required parameter: Example:
    # @param [String] product_name Required parameter: Example:
    # @param [AccountProduct] body Optional parameter: Example:
    # @return [AccountProductResponse] response from the API call
    def update_account_product(account_id,
                               product_name,
                               body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/products/{productName}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false },
        'productName' => { 'value' => product_name, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('Product', body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'AccountProductResponse',
                                   AccountProductResponse)
      )
    end

    # Retrieve messaging analytics, where the Message Detail Record (MDRs) are
    # chosen based on the search parameters provided in the API Call.
    # @param [Integer] account_id Required parameter: Example:
    # @param [String] message_id Optional parameter: Example:
    # @param [String] source_tn Optional parameter: Example:
    # @param [String] destination_tn Optional parameter: Example:
    # @param [String] from_date_time Optional parameter: Example:
    # @param [String] to_date_time Optional parameter: Example:
    # @param [String] message_status Optional parameter: Example:
    # @param [Integer] error_code Optional parameter: Example:
    # @param [String] page_token Optional parameter: Example:
    # @return [Object] response from the API call
    def get_account_analytics_messaging_mdrs(account_id,
                                             message_id: nil,
                                             source_tn: nil,
                                             destination_tn: nil,
                                             from_date_time: nil,
                                             to_date_time: nil,
                                             message_status: nil,
                                             error_code: nil,
                                             page_token: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/products/analytics/messaging/mdrs'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false }
      )
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'messageId' => message_id,
        'sourceTn' => source_tn,
        'destinationTn' => destination_tn,
        'fromDateTime' => from_date_time,
        'toDateTime' => to_date_time,
        'messageStatus' => message_status,
        'errorCode' => error_code,
        'pageToken' => page_token
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 400
        raise APIException.new(
          'Bad Request - Account has no messaging analytics feature assigned',
          _response
        )
      elsif _response.status_code == 403
        raise APIException.new(
          'Forbidden - Loged in user has no requested account assigned',
          _response
        )
      elsif _response.status_code == 503
        raise APIException.new(
          'Service Temporarily Unavailable - Message search api temporary' \
          ' unavailable',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'response', String)
      )
    end

    # Create a Campaign ID or update its description. Campaign ID and
    # Description are required. Account ID must be empty or an existing Account
    # ID. <br>The Campaign ID should be:<ul>    <li>equal to an {id} parameter
    # in URL</li>    <li>globally unique</li>    <li>a non-empty string no
    # longer than 64 characters long</li>    <li>only alphanumeric values,
    # dashes, underscores, singular whitespaces and dots are allowed</li>   
    # <li>whitespaces are only allowed inside the string, and they should not be
    # consecutive</li></ul>
    # @param [String] id Required parameter: Example:
    # @param [A2pCampaignId] body Optional parameter: Example:
    # @return [Object] response from the API call
    def update_admin_data(id,
                          body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/admin/data/a2pcampaignids/{id}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'id' => { 'value' => id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 400
        raise APIException.new(
          'Validation error. Possible reasons:<ul>    <li>Code 12820:' \
          ' Campaign ID in the link and in the body is not the' \
          ' same.</li>    <li>Code 12822: A2P Campaign ID' \
          ' \'Campaign/1\' is not valid. Needs to be between 1 and' \
          ' 64 characters.    Only alphanumeric values, dashes,' \
          ' underscores, singular whitespaces and dots are' \
          ' allowed.    Whitespaces at the beginning or at the end' \
          ' of string are not allowed.</li>    <li>Code 12836:The' \
          ' provided Account Id \'**\' is not a valid Account' \
          ' Id.</ul>',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'response', String)
      )
    end

    # Delete Campaign ID.
    # @param [String] id Required parameter: Example:
    # @return [Object] response from the API call
    def delete_admin_data(id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/admin/data/a2pcampaignids/{id}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'id' => { 'value' => id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.delete(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 404
        raise APIException.new(
          'Campaign ID not found',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'response', String)
      )
    end

    # Create or update A2P Class.
    # @param [String] id Required parameter: Example:
    # @param [A2pClass] body Optional parameter: Example:
    # @return [Object] response from the API call
    def update_admin_data_1(id,
                            body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/admin/data/a2pclasses/{id}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'id' => { 'value' => id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 400
        raise APIException.new(
          'Validation error',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'response', String)
      )
    end

    # Delete A2P Class.
    # @param [String] id Required parameter: Example:
    # @return [Object] response from the API call
    def delete_admin_data_1(id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/admin/data/a2pclasses/{id}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'id' => { 'value' => id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.delete(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 404
        raise APIException.new(
          'A2P Class not found',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'response', String)
      )
    end

    # Get Break Out Country.
    # @param [String] break_out_country Required parameter: Example:
    # @return [AdminDataResponse] response from the API call
    def get_admin_data_2(break_out_country)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/admin/data/breakoutcountries/{breakOutCountry}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'breakOutCountry' => { 'value' => break_out_country, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 404
        raise APIException.new(
          'Break Out Country does not exist',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'AdminDataResponse',
                                   AdminDataResponse)
      )
    end

    # Create or update Break Out Country settings. The "Name" field is optional
    # and will not be retained. Validations:<br> - The 3 letter country code
    # should belong to an existing country - The Break Out Country in the URL
    # should match the 3 letter country code in the payload - "CountryCode"
    # field should consist of 1-3 digits - Each "Digits" field should consist of
    # 1-4 digits
    # @param [String] break_out_country Required parameter: Example:
    # @param [BreakOutCountry] body Optional parameter: Example:
    # @return [Object] response from the API call
    def update_admin_data_2(break_out_country,
                            body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/admin/data/breakoutcountries/{breakOutCountry}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'breakOutCountry' => { 'value' => break_out_country, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 400
        raise APIException.new(
          'Validation error',
          _response
        )
      elsif _response.status_code == 404
        raise APIException.new(
          'Break Out Country does not exist',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'response', String)
      )
    end

    # Delete Break Out Country.
    # @param [String] break_out_country Required parameter: Example:
    # @return [Object] response from the API call
    def delete_admin_data_2(break_out_country)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/admin/data/breakoutcountries/{breakOutCountry}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'breakOutCountry' => { 'value' => break_out_country, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.delete(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 404
        raise APIException.new(
          'Break Out Country does not exist',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'response', String)
      )
    end

    # Get all existing Break Out Countries.
    # @return [Object] response from the API call
    def get_all_admin_data_2
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/admin/data/breakoutcountries'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'response', String)
      )
    end

    # TODO
    # @param [String] id Required parameter: Example:
    # @param [SbcNodeGroup] body Optional parameter: Example:
    # @return [Object] response from the API call
    def update_admin_data_10(id,
                             body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/{id}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'id' => { 'value' => id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'response', String)
      )
    end

    # TODO
    # @param [String] id Required parameter: Example:
    # @return [Object] response from the API call
    def delete_admin_data_9(id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/{id}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'id' => { 'value' => id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.delete(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'response', String)
      )
    end

    # Update settings for a country.&lt;Country&gt; can have the following
    # values:    <table style="text-align: left; width: 80%;" border="1"
    # cellpadding="2" cellspacing="2">    <tbody>        <tr>           
    # <th>Value></th>            <th>Description</th>        </tr>        <tr>  
    #          <td>CountryName</td>            <td>Name of the country. This
    # field is required and is not updatable via this API.</td>        </tr>    
    #    <tr>            <td>ThreeLetterCode</td>            <td>Three letter
    # code of the country. This field is required and is not updatable via this
    # API.</td>        </tr>        <tr>            <td>TwoLetterCode</td>      
    #      <td>Two letter code of the country. This field is required and is not
    # updatable via this API.</td>        </tr>        <tr>           
    # <td>Supported</td>            <td>Determines whether or not Bandwidth
    # supports numbers from this country. This field is required.</td>       
    # </tr>    </tbody>    </table>
    # @param [String] country_id Required parameter: Example:
    # @param [Country] body Optional parameter: Example:
    # @return [Object] response from the API call
    def update_admin_data_4(country_id,
                            body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/admin/data/countries/{countryId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'countryId' => { 'value' => country_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 400
        raise APIException.new(
          'Validation error',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'response', String)
      )
    end

    # Get details on all countries in the system
    # @return [Object] response from the API call
    def get_all_admin_data_4
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/admin/data/countries'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'response', String)
      )
    end

    # Get current settings for an international vendor.
    # @param [String] vendor_id Required parameter: Example:
    # @return [Object] response from the API call
    def get_admin_data_4(vendor_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/admin/data/internationalvendorsettings/{vendorId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'vendorId' => { 'value' => vendor_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 404
        raise APIException.new(
          'International settings not found',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'response', String)
      )
    end

    # Update settings for an international vendor.&lt;InternationalVendor&gt;
    # can have the following values:    <table style="text-align: left; width:
    # 80%;" border="1" cellpadding="2" cellspacing="2">    <tbody>        <tr>  
    #          <th>Value</th>            <th>Description</th>        </tr>      
    #  <tr>            <td>VendorId</td>            <td>Id of the vendor that
    # these international settings apply to. This field is required.</td>       
    # </tr>        <tr>            <td>Supported</td>            <td>Specifies
    # whether the vendor is currently a supported international vendor.</td>    
    #    </tr>    </tbody>    </table>
    # @param [String] vendor_id Required parameter: Example:
    # @param [InternationalVendor] body Optional parameter: Example:
    # @return [Object] response from the API call
    def update_admin_data_5(vendor_id,
                            body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/admin/data/internationalvendorsettings/{vendorId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'vendorId' => { 'value' => vendor_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 400
        raise APIException.new(
          'Validation error',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'response', String)
      )
    end

    # Delete international vendor settings.
    # @param [String] vendor_id Required parameter: Example:
    # @return [Object] response from the API call
    def delete_admin_data_4(vendor_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/admin/data/internationalvendorsettings/{vendorId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'vendorId' => { 'value' => vendor_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.delete(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'response', String)
      )
    end

    # Get international-specific settings for international vendors
    # @return [Object] response from the API call
    def get_all_admin_data_5
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/admin/data/internationalvendorsettings'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'response', String)
      )
    end

    # Create settings for an international
    # vendor.<br/>&lt;InternationalVendor&gt; can have the following values:   
    # <table style="text-align: left; width: 80%;" border="1" cellpadding="2"
    # cellspacing="2">    <tbody>        <tr>            <th>Value</th>         
    #   <th>Desription</th>        </tr>        <tr>           
    # <td>VendorId</td>            <td>Id of the vendor that these international
    # settings apply to. This field is required.</td>        </tr>        <tr>  
    #          <td>Supported</td>            <td>Specifies whether the vendor is
    # currently a supported international vendor.</td>        </tr>    </tbody> 
    #   </table>
    # @param [InternationalVendor] body Optional parameter: Example:
    # @return [Object] response from the API call
    def create_admin_data(body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/admin/data/internationalvendorsettings'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 400
        raise APIException.new(
          'Validation error',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'response', String)
      )
    end

    # TODO
    # @param [String] l3_error_code Required parameter: Example:
    # @return [Object] response from the API call
    def get_admin_data_5(l3_error_code)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/{l3ErrorCode}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'l3ErrorCode' => { 'value' => l3_error_code, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'response', String)
      )
    end

    # TODO
    # @param [String] l3_error_code Required parameter: Example:
    # @param [Level3PortingErrorSettingPayload] body Optional parameter:
    # Example:
    # @return [Object] response from the API call
    def update_admin_data_6(l3_error_code,
                            body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/{l3ErrorCode}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'l3ErrorCode' => { 'value' => l3_error_code, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'response', String)
      )
    end

    # TODO
    # @param [String] l3_error_code Required parameter: Example:
    # @return [Object] response from the API call
    def delete_admin_data_5(l3_error_code)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/{l3ErrorCode}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'l3ErrorCode' => { 'value' => l3_error_code, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.delete(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'response', String)
      )
    end

    # Allows the user update the account pom configuration.
    # @param [Integer] account_id Required parameter: Example:
    # @param [MessagingBlockedAccountId] body Optional parameter: Example:
    # @return [Object] response from the API call
    def update_admin_data_3(account_id,
                            body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/admin/data/blockedaccount/{accountId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 400
        raise APIException.new(
          'Some information is not correct.',
          _response
        )
      elsif _response.status_code == 404
        raise APIException.new(
          'Pom account configuration not found',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'response', String)
      )
    end

    # Removing pom account configuration.
    # @param [Integer] account_id Required parameter: Example:
    # @return [Object] response from the API call
    def delete_admin_data_3(account_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/admin/data/blockedaccount/{accountId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.delete(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 404
        raise APIException.new(
          'User was not found.',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'response', String)
      )
    end

    # Get NNRoute.
    # @param [String] id Required parameter: Example:
    # @return [Object] response from the API call
    def get_admin_data_8(id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/admin/data/nnroutes/{id}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'id' => { 'value' => id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 404
        raise APIException.new(
          'NNRoute not found',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'response', String)
      )
    end

    # Allows to create or update NNRoute.
    # @param [String] id Required parameter: Example:
    # @param [NnRoute] body Optional parameter: Example:
    # @return [Object] response from the API call
    def update_admin_data_8(id,
                            body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/admin/data/nnroutes/{id}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'id' => { 'value' => id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 400
        raise APIException.new(
          'Validation error',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'response', String)
      )
    end

    # Delete NNRoute.
    # @param [String] id Required parameter: Example:
    # @return [Object] response from the API call
    def delete_admin_data_7(id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/admin/data/nnroutes/{id}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'id' => { 'value' => id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.delete(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 404
        raise APIException.new(
          'NNRoute not found',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'response', String)
      )
    end

    # Get all NNRoutes
    # @param [String] name_fragment Optional parameter: Example:
    # @return [Object] response from the API call
    def get_all_admin_data_7(name_fragment: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/admin/data/nnroutes'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'nameFragment' => name_fragment
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'response', String)
      )
    end

    # Create a proxy sippeer or update its service type. All fields in the
    # payload are required <br>The proxy peer name should be:<ul>    <li>equal
    # to an {name} parameter in URL</li>    <li>globally unique</li>    <li>a
    # non-empty string no longer than 64 characters long</li></ul>
    # @param [String] id Required parameter: Example:
    # @param [ProxyPeerValue] body Optional parameter: Example:
    # @return [Object] response from the API call
    def update_admin_data_9(id,
                            body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/admin/data/proxypeers/{id}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'id' => { 'value' => id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 400
        raise APIException.new(
          'Validation error.',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'response', String)
      )
    end

    # Delete proxy sipppeer
    # @param [String] id Required parameter: Example:
    # @return [Object] response from the API call
    def delete_admin_data_8(id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/admin/data/proxypeers/{id}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'id' => { 'value' => id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.delete(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 404
        raise APIException.new(
          'Proxy sipppeer not found',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'response', String)
      )
    end

    # TODO
    # @param [SbcNodeGroup] body Optional parameter: Example:
    # @return [Object] response from the API call
    def create_admin_data_2(body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/admin/data/sbcnodegroups'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 400
        raise APIException.new(
          'invalid sbc node parameters, duplicate node names or empty node' \
          ' names aren\'t accepted',
          _response
        )
      elsif _response.status_code == 409
        raise APIException.new(
          'this sbc group name already exists in IRIS',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'response', String)
      )
    end

    # Allows replacement of a specified System Event Subscription. See endpoint
    # /admin/data/systemEventSubscriptions for details about the elements.
    # @param [String] id Required parameter: Example:
    # @param [SystemEventSubscription] body Optional parameter: Example:
    # @return [Object] response from the API call
    def update_admin_data_7(id,
                            body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/admin/data/systemeventsubscriptions/{id}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'id' => { 'value' => id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 400
        raise APIException.new(
          'Validation error',
          _response
        )
      elsif _response.status_code == 404
        raise APIException.new(
          'SystemEventSubscription not found',
          _response
        )
      elsif _response.status_code == 409
        raise APIException.new(
          'Update to current SystemEventSubscription violates uniqueness' \
          ' constraint',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'response', String)
      )
    end

    # Allows removal of a specified System Event Subscription. Once the
    # subscription is removed, the notifications will no longer be sent.
    # @param [String] id Required parameter: Example:
    # @return [Object] response from the API call
    def delete_admin_data_6(id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/admin/data/systemeventsubscriptions/{id}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'id' => { 'value' => id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.delete(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'response', String)
      )
    end

    # Allows creation of a single System Event Subscription. The payload
    # elements are as follows:<br/><table>       <tr><th> Element </th><th>
    # Required </th><th> Usage </th></tr>       <tr><td>    SubscriptionId
    # </td><td> No </td><td> This element should generally be omitted for new
    # entries. It simply provides a unique identifier for the subscription.
    # </td></tr>       <tr><td>    SystemEvent </td><td> Yes </td><td> Specifies
    # the event to which you are subscribing. Must be one of the values listed
    # above. </td></tr>       <tr><td>    Email </td><td> No* </td><td> For
    # notification via email, specifies the email address to which the
    # notification information is sent. </td></tr>       <tr><td>   
    # ZendeskGroupId </td><td> No* </td><td> For notification via Zendesk
    # ticket, specifies the Zendesk queue number to which the notification
    # information is sent. </td></tr>       <tr><td>    CallbackOrderType
    # </td><td> No* </td><td> For notification via API callback, specifies the
    # predefined order type for which notification information will be sent via
    # the predefined callback URL. </td></tr>       <tr><td>    DigestType
    # </td><td> No </td><td> Values: daily, none. Specifies whether you wish to
    # receive a daily digest of event instances instead of a notification for
    # each event instance. Value daily is not supported for all events.
    # </td></tr></table>* Exactly one of Email, ZendeskGroupId, or
    # CallbackOrderType must be specified. Most events support only one type of
    # notification.
    # @param [SystemEventSubscription] body Optional parameter: Example:
    # @return [Object] response from the API call
    def create_admin_data_3(body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/admin/data/systemeventsubscriptions'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 400
        raise APIException.new(
          'Validation error',
          _response
        )
      elsif _response.status_code == 409
        raise APIException.new(
          'Such SystemEventSubscription already exists',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'response', String)
      )
    end

    # Get TnType
    # @param [String] tn_type_id Required parameter: Example:
    # @return [Object] response from the API call
    def get_admin_data_13(tn_type_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/admin/data/tntypes/{tnTypeId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'tnTypeId' => { 'value' => tn_type_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'response', String)
      )
    end

    # Update TnType
    # @param [String] tn_type_id Required parameter: Example:
    # @param [TnTypePayload] body Optional parameter: Example:
    # @return [Object] response from the API call
    def update_admin_data_11(tn_type_id,
                             body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/admin/data/tntypes/{tnTypeId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'tnTypeId' => { 'value' => tn_type_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 400
        raise APIException.new(
          'Validation failed',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'response', String)
      )
    end

    # Get TnType
    # @return [Object] response from the API call
    def get_all_admin_data_11
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/admin/data/tntypes'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'response', String)
      )
    end

    # Create a new TnType
    # @param [TnTypePayload] body Optional parameter: Example:
    # @return [Object] response from the API call
    def create_get_admin_data_12(body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/admin/data/tntypes'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 400
        raise APIException.new(
          'Validation error',
          _response
        )
      elsif _response.status_code == 409
        raise APIException.new(
          'Source/Type combination is already present. Use PUT under /{id}' \
          ' to enable/disable the TnType',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'response', String)
      )
    end

    # Allows to create or update Vendor.
    # @param [String] id Required parameter: Example:
    # @param [Vendor] body Optional parameter: Example:
    # @return [Object] response from the API call
    def update_admin_data_12(id,
                             body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/admin/data/vendors/{id}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'id' => { 'value' => id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 400
        raise APIException.new(
          'Validation error',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'response', String)
      )
    end

    # Delete Vendor.
    # @param [String] id Required parameter: Example:
    # @return [Object] response from the API call
    def delete_admin_data_10(id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/admin/data/vendors/{id}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'id' => { 'value' => id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.delete(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'response', String)
      )
    end

    # TODO
    # @param [Integer] account_id Required parameter: Example:
    # @return [Object] response from the API call
    def delete_admin_data_11(account_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/{accountId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.delete(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'response', String)
      )
    end

    # TODO
    # @param [String] sippeer_id Required parameter: Example:
    # @param [SlingshotEnv] body Optional parameter: Example:
    # @return [Object] response from the API call
    def update_admin_data_13(sippeer_id,
                             body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/{sippeerId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'sippeerId' => { 'value' => sippeer_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'response', String)
      )
    end

    # TODO
    # @param [String] sippeer_id Required parameter: Example:
    # @return [Object] response from the API call
    def delete_admin_data_12(sippeer_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/{sippeerId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'sippeerId' => { 'value' => sippeer_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.delete(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'response', String)
      )
    end

    # This resource can be PUT or POSTed to in order to establish the
    # appropriate settings.Some of the important values that are established as
    # part of this termination
    # are...<table><tr><th>parameter</th><th>description</th></tr><tr><td>DashUs
    # erId</td><td>[Alphanumeric with symbols] the User ID to be used to access
    # Dash for this Bandwidth Dashboard API
    # account</td></tr><tr><td>DashPassword</td><td>[Alphanumeric with symbols]
    # the Password to be used to access Dash for this Bandwidth Dashboard API
    # account</td></tr><tr><td>Hosts</td><td>List of IP ranges to be used only
    # for e911 traffic</td></tr></table>
    # @param [Integer] account_id Required parameter: Example:
    # @param [E911Settings] body Optional parameter: Example:
    # @return [E911SettingsResponse] response from the API call
    def update_e911_configuration(account_id,
                                  body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/products/e911/settings'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('E911Settings', body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 400
        raise APIException.new(
          'a 400 BAD REQUEST will be returned with a descriptive payload if' \
          ' the XML describing the E911 settings resource is' \
          ' incorrect or other factors prevent execution of the' \
          ' POST  The error contains an error code and description.',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'E911SettingsResponse',
                                   E911SettingsResponse)
      )
    end

    # This resource can be PUT or POSTed to in order to establish the
    # appropriate settings.Some of the important values that are established as
    # part of this termination
    # are...<table><tr><th>parameter</th><th>description</th></tr><tr><td>DashUs
    # erId</td><td>[Alphanumeric with symbols] the User ID to be used to access
    # Dash for this Bandwidth Dashboard API account. 50 characters, ascii,
    # without % symbol or
    # whitespace.</td></tr><tr><td>DashPassword</td><td>[Alphanumeric] the
    # Password to be used to access Dash for this Bandwidth Dashboard API
    # account - 50 characters</td></tr><tr><td>Hosts</td><td>List of IP ranges
    # to be used only for e911 traffic</td></tr></table>
    # @param [Integer] account_id Required parameter: Example:
    # @param [E911Settings] body Optional parameter: Example:
    # @return [E911SettingsResponse] response from the API call
    def create_e911_configuration(account_id,
                                  body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/products/e911/settings'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('E911Settings', body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 400
        raise APIException.new(
          'a 400 BAD REQUEST will be returned with a descriptive payload if' \
          ' the XML describing the E911 settings resource is' \
          ' incorrect or other factors prevent execution of the' \
          ' POST  The error contains an error code and description.',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'E911SettingsResponse',
                                   E911SettingsResponse)
      )
    end

    # This Edge Management settings resource can be PUT or POSTed to in order to
    # establish the appropriate settings.
    # @param [Integer] account_id Required parameter: Example:
    # @param [EdgeManagementConfigurationPayload] body Optional parameter:
    # Example:
    # @return [EdgeManagementConfigurationResponse] response from the API call
    def update_edge_management_configuration(account_id,
                                             body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/products/edgemanagement/settings'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('EdgeManagementSettings',
                                                  body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 400
        raise APIException.new(
          'a 400 BAD REQUEST will be returned with a descriptive payload if' \
          ' the XML describing the edge Management settings' \
          ' resource is incorrect or the account is not configured' \
          ' for Edge Management.  The error contains an error code' \
          ' and description.',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'EdgeManagementSettingsResponse',
                                   EdgeManagementConfigurationResponse)
      )
    end

    # This Edge Management settings resource can be PUT or POSTed to in order to
    # establish the appropriate settings.
    # @param [Integer] account_id Required parameter: Example:
    # @param [EdgeManagementConfigurationPayload] body Optional parameter:
    # Example:
    # @return [EdgeManagementConfigurationResponse] response from the API call
    def create_edge_management_configuration(account_id,
                                             body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/products/edgemanagement/settings'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('EdgeManagementSettings',
                                                  body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 400
        raise APIException.new(
          'a 400 BAD REQUEST will be returned with a descriptive payload if' \
          ' the XML describing the edge Management settings' \
          ' resource is incorrect or the account is not configured' \
          ' for Edge Management.  The error contains an error code' \
          ' and description.',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'EdgeManagementSettingsResponse',
                                   EdgeManagementConfigurationResponse)
      )
    end

    # TODO
    # @param [String] holiday_date Required parameter: Example:
    # @param [HolidayPayload] body Optional parameter: Example:
    # @return [HolidayResponse] response from the API call
    def update_holiday(holiday_date,
                       body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/{holidayDate}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'holidayDate' => { 'value' => holiday_date, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('Holiday', body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'HolidayResponse',
                                   HolidayResponse)
      )
    end

    # TODO
    # @param [String] holiday_date Required parameter: Example:
    # @return [HolidayResponse] response from the API call
    def delete_holiday(holiday_date)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/{holidayDate}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'holidayDate' => { 'value' => holiday_date, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.delete(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'HolidayResponse',
                                   HolidayResponse)
      )
    end

    # This resource can be used for PUT to establish the appropriate settings.
    # Messaging settings cannot be changed if previous settings are not applied
    # yet.Some of the important values that are established as part of this
    # termination are...<table>   
    # <tr><th>parameter</th><th>description</th></tr>   
    # <tr><td>Enabled</td><td>[Boolean] flag to enable/disable Messaging product
    # on the account. Value is required.</td></tr>   
    # <tr><td>EnabledOnNewTN</td><td>[Boolean] flag to enable/disable Messaging
    # feature on each new telephone number. Value is required if Enabled = true
    # </td></tr>    <tr><td>ExistingTNAction</td><td>[Enum] action will be
    # performed to all existing telephone numbers on the account. Valid values:
    # enable, disable, nochange.</td></tr>   
    # <tr><td>SupportedOnImportedTns</td><td>[Boolean] Whether the account can
    # assign non-Bandwidth TNs for Messaging. The default is false.</td><tr>   
    # <tr><td>PreventUpdatingNetNumber</td><td>[Boolean] flag to block NetNumber
    # updates on all of the TNs on the account. The default is false.</td></tr> 
    #   <tr><td>EnableOnNetMessageRoutes</td><td>[Boolean] flag to
    # enable/disable message routing on the Bandwidth messaging network. The
    # default is true.</td></tr>   
    # <tr><td>EnableOffNetMessageRoutes</td><td>[Boolean] flag to enable/disable
    # message routing around the Bandwidth messaging network. The default is
    # false.</td></tr>    <tr><td>ProxyPeersOwner</td><td>[Boolean] flag to
    # enable/disable the ability of having sipPeers that could be used as proxy
    # peers for http messaging. </td><tr>   
    # <tr><td>BreakOutCountries</td><td>[List] Holds list of breakout countries.
    # </td><tr></table>
    # @param [Integer] account_id Required parameter: Example:
    # @param [MessagingSettings] body Optional parameter: Example:
    # @return [MessagingSettingsResponse] response from the API call
    def update_messaging_settings(account_id,
                                  body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/products/messaging/settings'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('MessagingSettings', body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 400
        raise APIException.new(
          'a 400 BAD REQUEST will be returned with a descriptive payload if' \
          ' the XML describing the SMS settings resource is' \
          ' incorrect or other factors prevent execution of the' \
          ' POST. The error contains an error code and description.',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'MessagingSettingsResponse',
                                   MessagingSettingsResponse)
      )
    end

    # This resource can be used for POST to establish the appropriate
    # settings.Some of the important values that are established as part of this
    # termination are...<table>   
    # <tr><th>parameter</th><th>description</th></tr>   
    # <tr><td>Enabled</td><td>[Boolean] flag to enable/disable Messaging product
    # on the account. Value is required.</td></tr>   
    # <tr><td>EnabledOnNewTN</td><td>[Boolean] flag to enable/disable Messaging
    # feature on each new telephone number. Value is required if Enabled = true
    # </td></tr>    <tr><td>ExistingTNAction</td><td>[Enum] action will be
    # performed to all existing telephone numbers on the account. Valid values:
    # enable, disable, nochange.</td></tr>   
    # <tr><td>SupportedOnImportedTns</td><td>[Boolean] Whether the account can
    # assign non-Bandwidth TNs for Messaging. The default is false.</td><tr>   
    # <tr><td>PreventUpdatingNetNumber</td><td>[Boolean] flag to block NetNumber
    # updates on all of the TNs on the account. The default is false.</td></tr> 
    #   <tr><td>EnableOnNetMessageRoutes</td><td>[Boolean] flag to
    # enable/disable message routing on the Bandwidth messaging network. The
    # default is true.</td></tr>   
    # <tr><td>EnableOffNetMessageRoutes</td><td>[Boolean] flag to enable/disable
    # message routing around the Bandwidth messaging network. The default is
    # false.</td></tr>    <tr><td>ProxyPeersOwner</td><td>[Boolean] flag to
    # enable/disable the ability of having sipPeers that could be used as proxy
    # peers for http messaging. </td><tr>   
    # <tr><td>BreakOutCountries</td><td>[List] Holds list of breakout countries,
    # if empty, current countries will be removed. </td><tr></table>
    # @param [Integer] account_id Required parameter: Example:
    # @param [MessagingSettings] body Optional parameter: Example:
    # @return [MessagingSettingsResponse] response from the API call
    def create_messaging_settings(account_id,
                                  body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/products/messaging/settings'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('MessagingSettings', body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 400
        raise APIException.new(
          'a 400 BAD REQUEST will be returned with a descriptive payload if' \
          ' the XML describing the Messaging settings resource is' \
          ' incorrect or other factors prevent execution of the' \
          ' POST. The error contains an error code and description.',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'MessagingSettingsResponse',
                                   MessagingSettingsResponse)
      )
    end

    # This resource can be used to establish the appropriate messaging routes
    # for various types of TNs described in the GET above.It is assumed that the
    # MessagingRoutes resource exists if the messaging product has been
    # configured.<br>The description of the payload values is provided in the
    # description of the GET above, as has the implications of 0,1 or many
    # routes associated withany specific type of TN.<br>PUT of an empty list
    # will remove all of the routes associated with the account.
    # @param [Integer] account_id Required parameter: Example:
    # @param [MessagingRoutes] body Optional parameter: Example:
    # @return [AccountMessagingRoutesResponse] response from the API call
    def update_set_account_routes(account_id,
                                  body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/products/messaging/routes'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('MessagingRoutes', body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 400
        raise APIException.new(
          'a 400 BAD REQUEST will be returned if user tries to create/update' \
          ' routs with incorrrect TnType, sets the indentical' \
          ' routes or provide not only one default route per' \
          ' TnType. E.g. in case with more then one defaul NNID' \
          ' per Tn Type',
          _response
        )
      elsif _response.status_code == 409
        raise APIException.new(
          'a 409 CONFLICT will be returned if user tries to create/update' \
          ' routs with NNID which doesn\'t present in the system.',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'AccountMessagingRoutesResponse',
                                   AccountMessagingRoutesResponse)
      )
    end

    # update sms feature settings
    # @param [Integer] account_id Required parameter: Example:
    # @param [AccountSmsFeature] body Optional parameter: Example:
    # @return [AccountSmsFeatureResponse] response from the API call
    def update_sms_feature(account_id,
                           body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/products/messaging/features/sms'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('AccountSmsFeature', body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 400
        raise APIException.new(
          'Bad Request. Possible errors in response:<ul>   <li>Trying to' \
          ' change \'%s\' feature settings but that feature is not' \
          ' enabled for account %d.</li></ul>',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'AccountSmsFeatureResponse',
                                   AccountSmsFeatureResponse)
      )
    end

    # add sms feature settings
    # @param [Integer] account_id Required parameter: Example:
    # @param [AccountSmsFeature] body Optional parameter: Example:
    # @return [AccountSmsFeatureResponse] response from the API call
    def create_sms_feature(account_id,
                           body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/products/messaging/features/sms'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('AccountSmsFeature', body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 400
        raise APIException.new(
          'Bad Request. Possible errors in response:<ul>   <li>Trying to' \
          ' change \'%s\' feature settings but that feature is not' \
          ' enabled for account %d.</li>   <li>%s is' \
          ' required</li></ul>',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'AccountSmsFeatureResponse',
                                   AccountSmsFeatureResponse)
      )
    end

    # update http feature settings
    # @param [Integer] account_id Required parameter: Example:
    # @param [AccountHttpFeature] body Optional parameter: Example:
    # @return [AccountHttpFeatureResponse] response from the API call
    def update_http_feature(account_id,
                            body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/products/messaging/features/http'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('AccountHttpFeature', body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 400
        raise APIException.new(
          'Specified sippeer id does not exist <br>',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'AccountHttpFeatureResponse',
                                   AccountHttpFeatureResponse)
      )
    end

    # add http feature settings
    # @param [Integer] account_id Required parameter: Example:
    # @param [AccountHttpFeature] body Optional parameter: Example:
    # @return [AccountHttpFeatureResponse] response from the API call
    def create_http_feature(account_id,
                            body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/products/messaging/features/http'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('AccountHttpFeature', body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 400
        raise APIException.new(
          'Specified sippeer id does not exist <br>',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'AccountHttpFeatureResponse',
                                   AccountHttpFeatureResponse)
      )
    end

    # delete http settings
    # @param [Integer] account_id Required parameter: Example:
    # @return [AccountHttpFeatureResponse] response from the API call
    def delete_http_feature(account_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/products/messaging/features/http'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.delete(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 404
        raise APIException.new(
          'http settings were not found',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'AccountHttpFeatureResponse',
                                   AccountHttpFeatureResponse)
      )
    end

    # update mms feature settings
    # @param [Integer] account_id Required parameter: Example:
    # @param [Mm4Settings] body Optional parameter: Example:
    # @return [MmsFeatureMm4SettingsResponse] response from the API call
    def update_mms_feature_mm4_settings(account_id,
                                        body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/products/messaging/features/mms/mm4settings'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('MM4Settings', body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 400
        raise APIException.new(
          'mm4 settings are not allowed if mm4 is disabled <br>',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'MmsFeatureMm4AdminSettingsResponse',
                                   MmsFeatureMm4SettingsResponse)
      )
    end

    # update mms feature settings
    # @param [Integer] account_id Required parameter: Example:
    # @param [AccountMmsFeature] body Optional parameter: Example:
    # @return [AccountMmsFeatureResponse] response from the API call
    def update_mms_feature(account_id,
                           body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/products/messaging/features/mms'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('AccountMmsFeature', body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 400
        raise APIException.new(
          'Bad Request. Possible errors in response:<ul>   <li>Trying to' \
          ' change \'%s\' feature settings but that feature is not' \
          ' enabled for account %d.</li>   <li>mm4Settings is not' \
          ' allowed/li></ul>',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'AccountMmsFeatureResponse',
                                   AccountMmsFeatureResponse)
      )
    end

    # set mms feature settings
    # @param [Integer] account_id Required parameter: Example:
    # @param [AccountMmsFeature] body Optional parameter: Example:
    # @return [AccountMmsFeatureResponse] response from the API call
    def create_mms_feature(account_id,
                           body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/products/messaging/features/mms'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('AccountMmsFeature', body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 400
        raise APIException.new(
          'Bad Request. Possible errors in response:<ul>   <li>Trying to' \
          ' change \'%s\' feature settings but that feature is not' \
          ' enabled for account %d.</li>   <li>Specified sippeer' \
          ' id does not exist</li>   <li>mm4AdminSettings is' \
          ' required</li></ul>',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'AccountMmsFeatureResponse',
                                   AccountMmsFeatureResponse)
      )
    end

    # delete mms settings
    # @param [Integer] account_id Required parameter: Example:
    # @return [AccountMmsFeatureResponse] response from the API call
    def delete_mms_feature(account_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/products/messaging/features/mms'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.delete(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 404
        raise APIException.new(
          'mms settings were not found',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'AccountMmsFeatureResponse',
                                   AccountMmsFeatureResponse)
      )
    end

    # TODO
    # @param [BocAccountList] body Optional parameter: Example:
    # @return [Object] response from the API call
    def update_migration(body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/bocAcctList'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('BocAcctList', body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'response', String)
      )
    end

    # TODO
    # @param [BocAccountList] body Optional parameter: Example:
    # @return [Object] response from the API call
    def create_migration(body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/bocAcctList'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('BocAcctList', body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'response', String)
      )
    end

    # TODO
    # @param [String] country_code Required parameter: Example:
    # @return [Object] response from the API call
    def get_migration(country_code)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/bocAcctList/{countryCode}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'countryCode' => { 'value' => country_code, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'response', String)
      )
    end

    # TODO
    # @param [Integer] rollback_account_id Optional parameter: Example:
    # @return [Object] response from the API call
    def get_migrations(rollback_account_id: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/ganProfileAttribute'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'rollbackAccountId' => rollback_account_id
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'response', String)
      )
    end

    # TODO
    # @param [Integer] account_id Required parameter: Example:
    # @param [GanProfileAttributeMigration] body Required parameter: Example:
    # @return [Object] response from the API call
    def update_migrate_account(account_id,
                               body)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/ganProfileAttribute/{accountId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml(
          'GanProfileAttributeMigration', body
        )
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'response', String)
      )
    end

    # TODO
    # @param [NnidAccountSync] body Optional parameter: Example:
    # @return [Object] response from the API call
    def post(body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/nnidAccountSync'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('NnidAccountSync', body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'response', String)
      )
    end

    # TODO
    # @param [String] tn_history Required parameter: Example:
    # @param [String] tag Optional parameter: Example:
    # @param [Integer] account_id Optional parameter: Example:
    # @return [Object] response from the API call
    def get(tn_history,
            tag: nil,
            account_id: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/{tnHistory}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'tnHistory' => { 'value' => tn_history, 'encode' => false }
      )
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'tag' => tag,
        'accountId' => account_id
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'response', String)
      )
    end

    # TODO
    # @param [String] tn_history Required parameter: Example:
    # @param [TnHistoryRecast] body Optional parameter: Example:
    # @return [Object] response from the API call
    def post_1(tn_history,
               body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/{tnHistory}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'tnHistory' => { 'value' => tn_history, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('TnHistoryRecast', body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'response', String)
      )
    end

    # TODO
    # @param [String] tn_history Required parameter: Example:
    # @param [TnHistoryCleanup] body Optional parameter: Example:
    # @return [Object] response from the API call
    def delete_cleanup_old_histories(tn_history,
                                     body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/{tnHistory}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'tnHistory' => { 'value' => tn_history, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.delete(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('TnHistoryCleanup', body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'response', String)
      )
    end

    # Examine the Numbermanagement settings of the account.
    # @param [Integer] account_id Required parameter: Example:
    # @return [NumberManagementSettings] response from the API call
    def get_number_management_settings(account_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/products/numbermanagement/settings'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 400
        raise APIException.new(
          'Numbermanagement product is not enabled on account',
          _response
        )
      elsif _response.status_code == 404
        raise APIException.new(
          'There are no Numbermanagement settings for account',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'NumberManagementSettings',
                                   NumberManagementSettings)
      )
    end

    # Update Numbermanagement product settings on the account.Acceptable values
    # for the FalloutManagementGrade are 1, 2, and 3.To delete cnamdip settings
    # no CnamDip element should be sent.To set default value of
    # FalloutManagementGrade no LNP element should be sent.
    # @param [Integer] account_id Required parameter: Example:
    # @param [NumberManagementSettings] body Optional parameter: Example:
    # @return [NumberManagementSettings] response from the API call
    def update_number_management_settings(account_id,
                                          body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/products/numbermanagement/settings'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('NumberManagementSettings',
                                                  body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 400
        raise APIException.new(
          'LnpFalloutManagement feature is not set on the account, or' \
          ' validation issue with given TnType/Vendor/Country',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'NumberManagementSettings',
                                   NumberManagementSettings)
      )
    end

    # The GET returns the current settings, describing the inbound and
    # bidirectional traffic levels that will be permitted.  See the
    # @param [Integer] account_id Required parameter: Example:
    # @return [OriginationConfigurationResponse] response from the API call
    def get_origination_configuration(account_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/products/origination/settings'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 400
        raise APIException.new(
          'BAD REQUESTIf the settings are not present for the Origination' \
          ' product a 404 NOT FOUND is returned with an' \
          ' explanatory payload.',
          _response
        )
      elsif _response.status_code == 404
        raise APIException.new(
          'NOT FOUNDIf the product exists on the account, but settings are' \
          ' missing, then the not found response is used.',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'OriginationSettingResponse',
                                   OriginationConfigurationResponse)
      )
    end

    # This resource can be PUT or POSTed to in order to establish the
    # appropriate settings.Some of the important values that are established as
    # part of this termination
    # are...<table><tr><th>parameter</th><th>description</th></tr><tr><td>Concur
    # rentInboundCalls</td><td>integer</td></tr><tr><td>ConcurrentBidirectionalC
    # alls</td><td>integer</td></tr><tr><td>RedirectEnabled</td><td>true | false
    # - enables 3xx redirection routing for account</td></tr></table>
    # @param [Integer] account_id Required parameter: Example:
    # @param [OriginationConfigurationPayload] body Optional parameter:
    # Example:
    # @return [OriginationConfigurationResponse] response from the API call
    def update_origination_configuration(account_id,
                                         body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/products/origination/settings'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('OriginationSettings', body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 400
        raise APIException.new(
          'a 400 BAD REQUEST will be returned with a descriptive payload if' \
          ' the XML describing the termination settings resource' \
          ' is incorrect or other factors prevent execution of the' \
          ' POST  The error contains an error code and description.',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'OriginationSettingResponse',
                                   OriginationConfigurationResponse)
      )
    end

    # This resource can be PUT or POSTed to in order to establish the
    # appropriate settings.Some of the important values that are established as
    # part of this termination
    # are...<table><tr><th>parameter</th><th>description</th></tr><tr><td>Concur
    # rentInboundCalls</td><td>integer</td></tr><tr><td>ConcurrentBidirectionalC
    # alls</td><td>integer</td></tr><tr><td>RedirectEnabled</td><td>true | false
    # - enables 3xx redirection routing for account</td></tr></table>
    # @param [Integer] account_id Required parameter: Example:
    # @param [OriginationConfigurationPayload] body Optional parameter:
    # Example:
    # @return [OriginationConfigurationResponse] response from the API call
    def create_origination_configuration(account_id,
                                         body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/products/origination/settings'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('OriginationSettings', body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 400
        raise APIException.new(
          'a 400 BAD REQUEST will be returned with a descriptive payload if' \
          ' the XML describing the termination settings resource' \
          ' is incorrect or other factors prevent execution of the' \
          ' POST  The error contains an error code and description.',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'OriginationSettingResponse',
                                   OriginationConfigurationResponse)
      )
    end

    # TODO
    # @param [String] productname Required parameter: Example:
    # @return [ProductResponse] response from the API call
    def get_product(productname)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/{productname}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'productname' => { 'value' => productname, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'ProductResponse',
                                   ProductResponse)
      )
    end

    # TODO
    # @param [String] property_name Required parameter: Example:
    # @param [SettingPayload] body Optional parameter: Example:
    # @return [ProductsResponse] response from the API call
    def update_flip_property(property_name,
                             body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/{propertyName}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'propertyName' => { 'value' => property_name, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('Setting', body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'ProductsResponse',
                                   ProductsResponse)
      )
    end

    # TODO
    # @param [String] page Optional parameter: Example:
    # @param [Integer] size Optional parameter: Example:
    # @param [Integer] account_id Optional parameter: Example:
    # @param [String] usernamefragment Optional parameter: Example:
    # @param [String] domainfragment Optional parameter: Example:
    # @return [SipCredentials] response from the API call
    def get_sip_credentials_1(page: nil,
                              size: nil,
                              account_id: nil,
                              usernamefragment: nil,
                              domainfragment: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/sipCredentials'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'page' => page,
        'size' => size,
        'accountId' => account_id,
        'usernamefragment' => usernamefragment,
        'domainfragment' => domainfragment
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'SipCredentials',
                                   SipCredentials)
      )
    end

    # TODO
    # @param [String] aggregatedusername Required parameter: Example:
    # @return [SipCredentials] response from the API call
    def get_sip_credential_1(aggregatedusername)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/sipCredentials/{aggregatedusername}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'aggregatedusername' => { 'value' => aggregatedusername, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'SipCredentials',
                                   SipCredentials)
      )
    end

    # Retrieves the current lock state of a site.
    # @param [Integer] account_id Required parameter: Example:
    # @param [Integer] site_id Required parameter: Example:
    # @return [SiteLockResponse] response from the API call
    def get_site_lock(account_id,
                      site_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/sites/{siteId}/lock'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false },
        'siteId' => { 'value' => site_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'SiteLockResponse',
                                   SiteLockResponse)
      )
    end

    # Modifies the lock state of a site.
    # @param [Integer] account_id Required parameter: Example:
    # @param [Integer] site_id Required parameter: Example:
    # @param [SiteLock] body Optional parameter: Example:
    # @return [SiteLockResponse] response from the API call
    def update_site_lock(account_id,
                         site_id,
                         body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/sites/{siteId}/lock'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false },
        'siteId' => { 'value' => site_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('Lock', body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 400
        raise APIException.new(
          'The request to modify the site\'s locked state was invalid.',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'SiteLockResponse',
                                   SiteLockResponse)
      )
    end

    # TODO
    # @param [Integer] account_id Required parameter: Example:
    # @param [Integer] site_id Required parameter: Example:
    # @param [SiteLock] body Optional parameter: Example:
    # @return [SiteLockResponse] response from the API call
    def create_site_lock(account_id,
                         site_id,
                         body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/sites/{siteId}/lock'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false },
        'siteId' => { 'value' => site_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('Lock', body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'SiteLockResponse',
                                   SiteLockResponse)
      )
    end

    # Retrieves the current billing ID of a site.
    # @param [Integer] account_id Required parameter: Example:
    # @param [Integer] site_id Required parameter: Example:
    # @return [SiteBillingIdResponse] response from the API call
    def get_site_billing_id(account_id,
                            site_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/sites/{siteId}/billingId'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false },
        'siteId' => { 'value' => site_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'SiteBillingIdResponse',
                                   SiteBillingIdResponse)
      )
    end

    # Modifies the billing ID of a site.
    # @param [Integer] account_id Required parameter: Example:
    # @param [Integer] site_id Required parameter: Example:
    # @param [SiteBillingId] body Optional parameter: Example:
    # @return [SiteBillingIdResponse] response from the API call
    def update_site_billing_id(account_id,
                               site_id,
                               body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/sites/{siteId}/billingId'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false },
        'siteId' => { 'value' => site_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('BillingId', body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 400
        raise APIException.new(
          'The request to modify the site\'s billing ID was invalid.',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'SiteBillingIdResponse',
                                   SiteBillingIdResponse)
      )
    end

    # TODO
    # @param [Integer] account_id Required parameter: Example:
    # @param [Integer] site_id Required parameter: Example:
    # @param [SiteBillingId] body Optional parameter: Example:
    # @return [SiteBillingIdResponse] response from the API call
    def create_site_billing_id(account_id,
                               site_id,
                               body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/sites/{siteId}/billingId'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false },
        'siteId' => { 'value' => site_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('BillingId', body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'SiteBillingIdResponse',
                                   SiteBillingIdResponse)
      )
    end

    # TODO
    # @param [Integer] account_id Required parameter: Example:
    # @param [Integer] site_id Required parameter: Example:
    # @return [SiteBillingIdResponse] response from the API call
    def delete_site_billing_id(account_id,
                               site_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/sites/{siteId}/billingId'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false },
        'siteId' => { 'value' => site_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.delete(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'SiteBillingIdResponse',
                                   SiteBillingIdResponse)
      )
    end

    # Retrieves the current billing ID of a site.
    # @param [Integer] account_id Required parameter: Example:
    # @param [Integer] site_id Required parameter: Example:
    # @return [SiteContractResponse] response from the API call
    def get_site_contract(account_id,
                          site_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/sites/{siteId}/contract'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false },
        'siteId' => { 'value' => site_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 404
        raise APIException.new(
          'the billing ID does not exist',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'SiteContractResponse',
                                   SiteContractResponse)
      )
    end

    # Updates the contract of a site.
    # @param [Integer] account_id Required parameter: Example:
    # @param [Integer] site_id Required parameter: Example:
    # @param [SiteContract] body Optional parameter: Example:
    # @return [SiteContractResponse] response from the API call
    def update_site_contract(account_id,
                             site_id,
                             body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/sites/{siteId}/contract'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false },
        'siteId' => { 'value' => site_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('Contract', body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 400
        raise APIException.new(
          'An HTTP 400 (BAD REQUEST) is returned if the request to modify' \
          ' the site\'s contract was invalid, e.g. the Contact' \
          ' Person is omitted.',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'SiteContractResponse',
                                   SiteContractResponse)
      )
    end

    # TODO
    # @param [Integer] account_id Required parameter: Example:
    # @param [Integer] site_id Required parameter: Example:
    # @param [SiteContract] body Optional parameter: Example:
    # @return [SiteContractResponse] response from the API call
    def create_site_contract(account_id,
                             site_id,
                             body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/sites/{siteId}/contract'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false },
        'siteId' => { 'value' => site_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('Contract', body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'SiteContractResponse',
                                   SiteContractResponse)
      )
    end

    # Deletes the contract from a locked site.
    # @param [Integer] account_id Required parameter: Example:
    # @param [Integer] site_id Required parameter: Example:
    # @return [SiteContractResponse] response from the API call
    def delete_site_contract(account_id,
                             site_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/sites/{siteId}/contract'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false },
        'siteId' => { 'value' => site_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.delete(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 404
        raise APIException.new(
          'An HTTP 404 (NOT FOUND) is returned if the site\'s contract does' \
          ' not exist',
          _response
        )
      elsif _response.status_code == 408
        raise APIException.new(
          'An HTTP 408 (CONFLICT) is returned if the request to modify the' \
          ' site\'s contract can not be completed in the site\'s' \
          ' current state. The site must be unlocked to perform' \
          ' this operation.',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'SiteContractResponse',
                                   SiteContractResponse)
      )
    end

    # This resource can be PUT or POSTed to in order to establish the
    # appropriate settings.Some of the important values that are established as
    # part of this termination are described in the section on POST.
    # @param [Integer] account_id Required parameter: Example:
    # @param [AccountTerminationConfigurationPayload] body Optional parameter:
    # Example:
    # @return [AccountTerminationConfigurationResponse] response from the API call
    def update_termination_configuration(account_id,
                                         body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/products/termination/settings'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('TerminationSettings', body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 400
        raise APIException.new(
          'a 400 BAD REQUEST will be returned with a descriptive payload if' \
          ' the XML describing the termination settings resource' \
          ' is incorrect.  The error contains an error code and' \
          ' description.',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationSettingResponse',
                                   AccountTerminationConfigurationResponse)
      )
    end

    # This resource can be PUT or POSTed to in order to establish the
    # appropriate settings.Some of the important values that are established as
    # part of this termination
    # are...<table><tr><th>parameter</th><th>description</th></tr><tr><td>RogerU
    # sedForTerminationSettings</td><td>Boolean - a flag to indicate whether
    # termination services are controlled by Roger or
    # not</td></tr><tr><td>LegacyTerminationSettings</td><td>a group
    # encapsulating legacy termination
    # settings</td></tr><tr><td>ConcurrentOutboundCalls</td><td>integer</td></tr
    # ><tr><td>ConcurrentBidirectionalCalls</td><td>integer</td></tr><tr><td>Cps
    # Queue</td><td>an integer value - typically
    # 300</td></tr><tr><td>CustomerTrafficAllowed</td><td>ALL, LITE, NONE and
    # DOMESTIC</td></tr><tr><td>RateType</td><td>npanxx, flat, fullcr or
    # billnumlcr</td></tr><tr><td>DiscountPercentage</td><td>an integer between
    # 0 and 100</td></tr><tr><td>GuaranteedTermination</td><td>true or
    # false</td></tr><tr><td>RogerTerminationSettings</td><td>a group
    # encapsulating the new (undeveloped) ROGER termination
    # settings</td></tr><tr><td>SubnetAddressingAllowed</td><td>true or
    # false</td></tr></table>
    # @param [Integer] account_id Required parameter: Example:
    # @param [AccountTerminationConfigurationPayload] body Optional parameter:
    # Example:
    # @return [AccountTerminationConfigurationResponse] response from the API call
    def create_termination_configuration(account_id,
                                         body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/products/termination/settings'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('TerminationSettings', body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 400
        raise APIException.new(
          'a 400 BAD REQUEST will be returned with a descriptive payload if' \
          ' the XML describing the termination settings resource' \
          ' is incorrect.  The error contains an error code and' \
          ' description.',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationSettingResponse',
                                   AccountTerminationConfigurationResponse)
      )
    end

    # get product and assignment mask for this product
    # @param [Integer] account_id Required parameter: Example:
    # @param [Long] product_id Required parameter: Example:
    # @return [TerminationProductResponse] response from the API call
    def get_product_to_assign(account_id,
                              product_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/products/termination/product/{productId}/toassign'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false },
        'productId' => { 'value' => product_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 404
        raise APIException.new(
          'assignment was not found',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationProductResponse',
                                   TerminationProductResponse)
      )
    end

    # get assignment by product id
    # @param [Integer] account_id Required parameter: Example:
    # @param [Long] product_id Required parameter: Example:
    # @return [TerminationCustomerProductAssignmentResponse] response from the API call
    def get_assigned_product(account_id,
                             product_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/products/termination/product/{productId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false },
        'productId' => { 'value' => product_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 404
        raise APIException.new(
          'product assignment was not found',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(
        _response.raw_body,
        'TerminationCustomerProductAssignmentResponse',
        TerminationCustomerProductAssignmentResponse
      )
      )
    end

    # delete product assignment
    # @param [Integer] account_id Required parameter: Example:
    # @param [Long] product_id Required parameter: Example:
    # @return [TerminationCustomerProductAssignmentResponse] response from the API call
    def delete_assigned_product(account_id,
                                product_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/products/termination/product/{productId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false },
        'productId' => { 'value' => product_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.delete(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 400
        raise APIException.new(
          'some required value was not found',
          _response
        )
      elsif _response.status_code == 404
        raise APIException.new(
          'account or attribute was not found',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(
        _response.raw_body,
        'TerminationCustomerProductAssignmentResponse',
        TerminationCustomerProductAssignmentResponse
      )
      )
    end

    # TODO
    # @param [Integer] account_id Required parameter: Example:
    # @return [TerminationCustomerProductAssignmentsResponse] response from the API call
    def get_all_assigned_products(account_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/products/termination/product'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(
        _response.raw_body,
        'TerminationCustomerProductAssignmentsResponse',
        TerminationCustomerProductAssignmentsResponse
      )
      )
    end

    # TODO
    # @param [Integer] account_id Required parameter: Example:
    # @param [TerminationProductAssignment] body Optional parameter: Example:
    # @return [TerminationCustomerProductAssignmentResponse] response from the API call
    def update_product(account_id,
                       body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/products/termination/product'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml(
          'TerminationProductAssignment', body
        )
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(
        _response.raw_body,
        'TerminationCustomerProductAssignmentResponse',
        TerminationCustomerProductAssignmentResponse
      )
      )
    end

    # assign product to customer
    # @param [Integer] account_id Required parameter: Example:
    # @param [TerminationProductAssignment] body Optional parameter: Example:
    # @return [TerminationCustomerProductAssignmentResponse] response from the API call
    def create_assign_product(account_id,
                              body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/products/termination/product'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml(
          'TerminationProductAssignment', body
        )
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 404
        raise APIException.new(
          'specified in request account was not found',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(
        _response.raw_body,
        'TerminationCustomerProductAssignmentResponse',
        TerminationCustomerProductAssignmentResponse
      )
      )
    end

    # TODO
    # @param [Integer] account_id Required parameter: Example:
    # @return [TerminationRateDeckAssignmentsResponse] response from the API call
    def get_assigned_rate_decks(account_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/products/termination/ratedeck'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationRateDeckAssignmentsResponse',
                                   TerminationRateDeckAssignmentsResponse)
      )
    end

    # assign rate deck to customer
    # @param [Integer] account_id Required parameter: Example:
    # @param [TerminationRateDeckAssignment] body Optional parameter: Example:
    # @return [TerminationRateDeckAssignmentResponse] response from the API call
    def create_assign_rate_deck(account_id,
                                body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/products/termination/ratedeck'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml(
          'TerminationRateDeckAssignment', body
        )
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 404
        raise APIException.new(
          'account or ratedeck was not found',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationRateDeckAssignmentResponse',
                                   TerminationRateDeckAssignmentResponse)
      )
    end

    # get assignment by id
    # @param [Integer] account_id Required parameter: Example:
    # @param [Long] assignment_id Required parameter: Example:
    # @return [TerminationRateDeckAssignmentResponse] response from the API call
    def get_assigned_rate_deck(account_id,
                               assignment_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/products/termination/ratedeck/{assignmentId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false },
        'assignmentId' => { 'value' => assignment_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 404
        raise APIException.new(
          'account or rate deck assignment was not found',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationRateDeckAssignmentResponse',
                                   TerminationRateDeckAssignmentResponse)
      )
    end

    # delete rate deck assignment
    # @param [Integer] account_id Required parameter: Example:
    # @param [Long] assignment_id Required parameter: Example:
    # @return [TerminationRateDeckAssignmentResponse] response from the API call
    def delete_assigned_rate_deck(account_id,
                                  assignment_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/products/termination/ratedeck/{assignmentId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false },
        'assignmentId' => { 'value' => assignment_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.delete(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 404
        raise APIException.new(
          'account or rate deck assignment was not found',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationRateDeckAssignmentResponse',
                                   TerminationRateDeckAssignmentResponse)
      )
    end

    # get all attributes for account
    # @param [Integer] account_id Required parameter: Example:
    # @return [TerminationAttributesResponse] response from the API call
    def get_customer_attributes(account_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/products/termination/attribute'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationAttributesResponse',
                                   TerminationAttributesResponse)
      )
    end

    # add to customer attribute
    # @param [Integer] account_id Required parameter: Example:
    # @param [TerminationAttribute] body Optional parameter: Example:
    # @return [TerminationAttributeResponse] response from the API call
    def post_customer_attribute(account_id,
                                body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/products/termination/attribute'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('TerminationAttribute', body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 404
        raise APIException.new(
          'specified in request account was not found',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationAttributeResponse',
                                   TerminationAttributeResponse)
      )
    end

    # get account attribute by id
    # @param [Integer] account_id Required parameter: Example:
    # @param [Long] attribute_id Required parameter: Example:
    # @return [TerminationAttributeResponse] response from the API call
    def get_customer_attribute(account_id,
                               attribute_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/products/termination/attribute/{attributeId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false },
        'attributeId' => { 'value' => attribute_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 404
        raise APIException.new(
          'account or attribute was not found',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationAttributeResponse',
                                   TerminationAttributeResponse)
      )
    end

    # update account attribute (attribute value)
    # @param [Integer] account_id Required parameter: Example:
    # @param [Long] attribute_id Required parameter: Example:
    # @param [TerminationAttribute] body Optional parameter: Example:
    # @return [TerminationAttributeResponse] response from the API call
    def put_customer_attribute(account_id,
                               attribute_id,
                               body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/products/termination/attribute/{attributeId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false },
        'attributeId' => { 'value' => attribute_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('TerminationAttribute', body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 400
        raise APIException.new(
          'update validation failed, eg changed forbidden fields (like' \
          ' metadata name)',
          _response
        )
      elsif _response.status_code == 404
        raise APIException.new(
          'account or attribute was not found',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationAttributeResponse',
                                   TerminationAttributeResponse)
      )
    end

    # delete account attribute
    # @param [Integer] account_id Required parameter: Example:
    # @param [Long] attribute_id Required parameter: Example:
    # @return [TerminationAttributeResponse] response from the API call
    def delete_customer_attribute(account_id,
                                  attribute_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/products/termination/attribute/{attributeId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false },
        'attributeId' => { 'value' => attribute_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.delete(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 400
        raise APIException.new(
          'some required value was not found',
          _response
        )
      elsif _response.status_code == 404
        raise APIException.new(
          'account or attribute was not found',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationAttributeResponse',
                                   TerminationAttributeResponse)
      )
    end

    # TODO
    # @param [Integer] account_id Required parameter: Example:
    # @return [TerminationMigrationResponse] response from the API call
    def post_termination_migrate(account_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/products/termination/migrate'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationMigrationResponse',
                                   TerminationMigrationResponse)
      )
    end

    # Update Toll Free Settings for this account
    # @param [Integer] account_id Required parameter: Example:
    # @param [TollFreeSettings] body Optional parameter: Example:
    # @return [TollFreeSettingsResponse] response from the API call
    def update_toll_free_configuration(account_id,
                                       body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/products/tollfree/settings'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('TollFreeSettings', body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 400
        raise APIException.new(
          'Failure to parse the request, or inconsistent provisioned data,' \
          ' such as no related product associated with the account.',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TollFreeSettingsResponse',
                                   TollFreeSettingsResponse)
      )
    end

    # Retrieves an account's trunk groups.
    # @param [Integer] account_id Required parameter: Example:
    # @param [String] status Optional parameter: Example:
    # @return [TrunkGroupsResponse] response from the API call
    def get_trunk_groups(account_id,
                         status: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/trunkgroups'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false }
      )
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'status' => status
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'TrunkGroupsResponse',
                                   TrunkGroupsResponse)
      )
    end

    # This resource can be PUT or POSTed to in order to establish the
    # appropriate settings.Some of the important values that are established as
    # part of this UC Trunking are described in the section on POST.
    # @param [Integer] account_id Required parameter: Example:
    # @param [UcTrunkingConfigurationPayload] body Optional parameter:
    # Example:
    # @return [UcTrunkingConfigurationResponse] response from the API call
    def update_uc_trunking_configuration(account_id,
                                         body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/products/uctrunking/settings'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('UcTrunkingSettings', body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 400
        raise APIException.new(
          'a 400 BAD REQUEST will be returned with a descriptive payload if' \
          ' the XML describing the UC Trunking settings resource' \
          ' is incorrect.  The error contains an error code and' \
          ' description.',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'UcTrunkingSettingsResponse',
                                   UcTrunkingConfigurationResponse)
      )
    end

    # This resource can be PUT or POSTed to in order to establish the
    # appropriate settings.
    # @param [Integer] account_id Required parameter: Example:
    # @param [UcTrunkingConfigurationPayload] body Optional parameter:
    # Example:
    # @return [UcTrunkingConfigurationResponse] response from the API call
    def create_uc_trunking_configuration(account_id,
                                         body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/products/uctrunking/settings'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('UcTrunkingSettings', body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 400
        raise APIException.new(
          'a 400 BAD REQUEST will be returned with a descriptive payload if' \
          ' the XML describing the UC Trunking settings resource' \
          ' is incorrect.  The error contains an error code and' \
          ' description.',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'UcTrunkingSettingsResponse',
                                   UcTrunkingConfigurationResponse)
      )
    end

    # Updates the information for permission by unique permission name or
    # creates permission, if it doesn't exist.
    # @param [String] permission_id Required parameter: Example:
    # @param [String] domain_name Required parameter: Example:
    # @param [String] permissions Required parameter: Example:
    # @param [LdapPermission] body Optional parameter: Example:
    # @return [LdapPermissionResponse] response from the API call
    def update_ldap_permission(permission_id,
                               domain_name,
                               permissions,
                               body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/{domainName}/{permissions}/{permissionId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'permissionId' => { 'value' => permission_id, 'encode' => false },
        'domainName' => { 'value' => domain_name, 'encode' => false },
        'permissions' => { 'value' => permissions, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('Permission', body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'LdapPermissionResponse',
                                   LdapPermissionResponse)
      )
    end

    # Removes specified permission.
    # @param [String] permission_id Required parameter: Example:
    # @param [String] domain_name Required parameter: Example:
    # @param [String] permissions Required parameter: Example:
    # @return [LdapPermissionResponse] response from the API call
    def delete_ldap_permission(permission_id,
                               domain_name,
                               permissions)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/{domainName}/{permissions}/{permissionId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'permissionId' => { 'value' => permission_id, 'encode' => false },
        'domainName' => { 'value' => domain_name, 'encode' => false },
        'permissions' => { 'value' => permissions, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.delete(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 404
        raise APIException.new(
          'The permission does not exist.',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'LdapPermissionResponse',
                                   LdapPermissionResponse)
      )
    end

    # TODO
    # @param [String] domain_name Required parameter: Example:
    # @param [String] user_preferences Required parameter: Example:
    # @return [LdapUserPreferencesResponse] response from the API call
    def get_ldap_user_preferences(domain_name,
                                  user_preferences)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/{domainName}/{userPreferences}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'domainName' => { 'value' => domain_name, 'encode' => false },
        'userPreferences' => { 'value' => user_preferences, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'UserPreferencesResponse',
                                   LdapUserPreferencesResponse)
      )
    end

    # Removing migrated user and all related information from LDAP.
    # @param [String] user_id Required parameter: Example:
    # @param [String] domain_name Required parameter: Example:
    # @return [LdapUserResponse] response from the API call
    def delete_user(user_id,
                    domain_name)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/{domainName}/users/{userId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'userId' => { 'value' => user_id, 'encode' => false },
        'domainName' => { 'value' => domain_name, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.delete(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 404
        raise APIException.new(
          'User was not found.',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'LdapUserResponse',
                                   LdapUserResponse)
      )
    end

    # GET is used to retrieve all possible billing settings on account along
    # with active ones.
    # @param [Integer] account_id Required parameter: Example:
    # @return [Object] response from the API call
    def get_settings(account_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/billingsettings'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'response', String)
      )
    end

    # PUT is used to update all billing settings on account. Ones which were
    # previously stored but not included in current payload will be removed.
    # After PUT complete system will automatically send backoffice API
    # notification about billing settings change on account billing scope and
    # all subsequent scopes (sites, sippeers). Payload should follow the rules
    # below. <table> <tr> <th>Parameter</th> <th>Description</th> </tr> <tr>
    # <td>BillingSettings</td> <td>Contains a list of zero or more
    # BillingSetting nodes</td> </tr> <tr> <td>BillingSetting</td> <td>Has one
    # Key node and one Values node</td> </tr> <tr> <td>Key</td> <td>Has one Id
    # node and optional field Display</td> </tr> <tr> <td>Values</td> <td>Has at
    # least one Value node. List must contain one active Value (Active node
    # containing "True")</td> </tr> <tr> <td>Value</td> <td>Has one Id node and
    # optional field Display</td> </tr> <tr> <td>Display</td> <td>Optional
    # field. Max length is 64 characters</td> </tr> <tr> <td>Id</td>
    # <td>Mandatory field. Max length is 64 characters</td> </tr> <tr>
    # <td>Active</td> <td>Optional field (see Values description though).
    # Acceptable values True or False</td> </tr> </table>
    # @param [Integer] account_id Required parameter: Example:
    # @param [BillingSettings] body Optional parameter: Example:
    # @return [BillingSettingsResponse] response from the API call
    def update_settings(account_id,
                        body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/billingsettings'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('BillingSettings', body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 400
        raise APIException.new(
          'Bad request - in case of violation payload rules',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'BillingSettingsResponse',
                                   BillingSettingsResponse)
      )
    end

    # Retrieves the csr orders for the given account ID.<br>
    # @param [Integer] account_id Required parameter: Example:
    # @param [String] modified_date_from Optional parameter: Example:
    # @param [String] modified_date_to Optional parameter: Example:
    # @param [String] page Optional parameter: Example:
    # @param [Integer] size Optional parameter: Example:
    # @param [String] status Optional parameter: Example:
    # @return [Object] response from the API call
    def get_account_csr_orders(account_id,
                               modified_date_from: nil,
                               modified_date_to: nil,
                               page: nil,
                               size: nil,
                               status: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/csrs'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false }
      )
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'modifiedDateFrom' => modified_date_from,
        'modifiedDateTo' => modified_date_to,
        'page' => page,
        'size' => size,
        'status' => status
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'response', String)
      )
    end

    # Retrieve a list of the E911 orders that are associated with the account.
    # <p>A maximum of 1,000 orders can be retrieved per request. If no date
    # range or specific query parameter (marked by <b class="required">*</b>
    # below) is provided, the order results will be limited to the last two
    # years.</p>
    # @param [Integer] account_id Required parameter: Example:
    # @param [List of String] status Optional parameter: Example:
    # @param [String] modified_date_from Optional parameter: Example:
    # @param [String] modified_date_to Optional parameter: Example:
    # @param [String] tn Optional parameter: Example:
    # @param [String] customer_order_id Optional parameter: Example:
    # @param [String] last_modified_by Optional parameter: Example:
    # @param [List of String] activity_state Optional parameter: Example:
    # @param [List of String] bandwidth_prime Optional parameter: Example:
    # @param [String] last_modified_after Optional parameter: Example:
    # @param [String] created_date_from Optional parameter: Example:
    # @param [String] created_date_to Optional parameter: Example:
    # @param [Boolean] order_details Optional parameter: Example:false
    # @param [String] order_id_fragment Optional parameter: Example:
    # @param [List of String] include_in_response Optional parameter: Example:
    # @param [String] call_back Optional parameter: Example:
    # @param [String] aeui Optional parameter: Example:
    # @param [String] calling_endpoint Optional parameter: Example:
    # @return [Object] response from the API call
    def get_e911_order_2(account_id,
                         status: nil,
                         modified_date_from: nil,
                         modified_date_to: nil,
                         tn: nil,
                         customer_order_id: nil,
                         last_modified_by: nil,
                         activity_state: nil,
                         bandwidth_prime: nil,
                         last_modified_after: nil,
                         created_date_from: nil,
                         created_date_to: nil,
                         order_details: false,
                         order_id_fragment: nil,
                         include_in_response: nil,
                         call_back: nil,
                         aeui: nil,
                         calling_endpoint: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/e911s'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false }
      )
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'status' => status,
        'modifiedDateFrom' => modified_date_from,
        'modifiedDateTo' => modified_date_to,
        'tn' => tn,
        'customerOrderId' => customer_order_id,
        'lastModifiedBy' => last_modified_by,
        'activityState' => activity_state,
        'bandwidthPrime' => bandwidth_prime,
        'lastModifiedAfter' => last_modified_after,
        'createdDateFrom' => created_date_from,
        'createdDateTo' => created_date_to,
        'orderDetails' => order_details,
        'orderIdFragment' => order_id_fragment,
        'includeInResponse' => include_in_response,
        'callBack' => call_back,
        'aeui' => aeui,
        'callingEndpoint' => calling_endpoint
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 404
        raise APIException.new(
          'Not Found. If any errors are found in the processing of the query' \
          ' string a 404 will be returned.  Note that parameters' \
          ' that are not recognized are not considered errors, and' \
          ' are just ignored.',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'E911OrderReportResponse', String)
      )
    end

    # Retrieve information about a specific assignedTns order identified as the
    # resource.
    # @param [String] order_id Required parameter: Example:
    # @return [Object] response from the API call
    def get_order_1(order_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/numbersAssignment/{orderId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'orderId' => { 'value' => order_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 404
        raise APIException.new(
          'NOT FOUND - the identified TelephoneNumbersAssignment order id' \
          ' does not exist in the system',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(
        _response.raw_body,
        'TelephoneNumbersAssignmentOrderReportResponse', String
      )
      )
    end

    # Retrieve information about one or more TelephoneNumbersAssignment orders,
    # where the orders are chosen based on the search parameters provided in the
    # API Call.
    # @param [List of Integer] account_id Optional parameter: Example:
    # @param [List of String] status Optional parameter: Example:
    # @param [String] tn Optional parameter: Example:
    # @param [String] customer_order_id Optional parameter: Example:
    # @param [List of String] activity_state Optional parameter: Example:
    # @param [String] created_date_from Optional parameter: Example:
    # @param [String] created_date_to Optional parameter: Example:
    # @param [String] modified_date_from Optional parameter: Example:
    # @param [String] modified_date_to Optional parameter: Example:
    # @param [String] order_id_fragment Optional parameter: Example:
    # @param [String] action Optional parameter: Example:
    # @return [Object] response from the API call
    def get_orders_1(account_id: nil,
                     status: nil,
                     tn: nil,
                     customer_order_id: nil,
                     activity_state: nil,
                     created_date_from: nil,
                     created_date_to: nil,
                     modified_date_from: nil,
                     modified_date_to: nil,
                     order_id_fragment: nil,
                     action: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/numbersAssignment'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'accountId' => account_id,
        'status' => status,
        'tn' => tn,
        'customerOrderId' => customer_order_id,
        'activityState' => activity_state,
        'createdDateFrom' => created_date_from,
        'createdDateTo' => created_date_to,
        'modifiedDateFrom' => modified_date_from,
        'modifiedDateTo' => modified_date_to,
        'orderIdFragment' => order_id_fragment,
        'action' => action
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 400
        raise APIException.new(
          'Bad Request.  If any errors are found in the processing of the' \
          ' query string a 400 will be returned.  Note that' \
          ' parameters that are not recognized are not considered' \
          ' errors, and are just ignored.',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(
        _response.raw_body,
        'TelephoneNumbersAssignmentOrderReportResponse', String
      )
      )
    end

    # TODO
    # @return [Object] response from the API call
    def delete_clean_up_bdr_archives
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/bdrs/cleanup'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.delete(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'BdrArchiveCleanUpResponse', String)
      )
    end

    # Retrieve information about the hosts of account, as guided by optional
    # search parameters.
    # @param [Integer] account_id Required parameter: Example:
    # @param [String] type Optional parameter: Example:
    # @param [String] host Optional parameter: Example:
    # @return [AccountSitesHostsResponse] response from the API call
    def get_hosts(account_id,
                  type: nil,
                  host: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/hosts'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false }
      )
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'type' => type,
        'host' => host
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'SiteHostsResponse',
                                   AccountSitesHostsResponse)
      )
    end

    # TODO
    # @param [Integer] account_id Required parameter: Example:
    # @param [String] order_id Required parameter: Example:
    # @return [Object] response from the API call
    def get_csr_order_history(account_id,
                              order_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/csrs/{orderId}/history'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false },
        'orderId' => { 'value' => order_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'CsrOrderHistoryResponse', String)
      )
    end

    # TODO
    # @param [String] order_id Required parameter: Example:
    # @return [Object] response from the API call
    def get_line_option_order_history_1(order_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/{orderId}/history'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'orderId' => { 'value' => order_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TnOptionOrderReportResponse', String)
      )
    end

    # TODO
    # @param [String] order_id Required parameter: Example:
    # @return [Object] response from the API call
    def get_port_in_order_error_history(order_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/{orderId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'orderId' => { 'value' => order_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'PortInOrderReportResponse', String)
      )
    end

    # Retrieve information about a specific DLDA Order identified as the
    # resource.
    # @param [String] order_id Required parameter: Example:
    # @return [Object] response from the API call
    def get_dlda_order(order_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/dldas/{orderId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'orderId' => { 'value' => order_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 404
        raise APIException.new(
          'NOT FOUND - the order id does not exist in the system',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'DldaOrderReportResponse', String)
      )
    end

    # Retrieve information about one or more DLDA Orders (dldas), where the
    # orders are chosen based on the search parameters provided in the API Call.
    # Not all search parameters are compatible with all other search parameters,
    # due to the complexity of searching for historical records using highly
    # parametrized or complex searches.  As a result:<ul>    <li>all query
    # parameters are compatible with the exception of...</li>    <li>if
    # modifiedFromDate or modifiedToDate are specified, then the only other
    # valid search parameters is accountId</li></ul>
    # @param [List of Integer] account_id Optional parameter: Example:
    # @param [List of String] status Optional parameter: Example:
    # @param [String] order_id_fragment Optional parameter: Example:
    # @param [String] modified_date_from Optional parameter: Example:
    # @param [String] modified_date_to Optional parameter: Example:
    # @param [String] tn Optional parameter: Example:
    # @param [String] customer_order_id Optional parameter: Example:
    # @param [String] last_modified_by Optional parameter: Example:
    # @param [String] last_modified_after Optional parameter: Example:
    # @param [String] created_date_from Optional parameter: Example:
    # @param [String] created_date_to Optional parameter: Example:
    # @return [Object] response from the API call
    def get_dlda_orders(account_id: nil,
                        status: nil,
                        order_id_fragment: nil,
                        modified_date_from: nil,
                        modified_date_to: nil,
                        tn: nil,
                        customer_order_id: nil,
                        last_modified_by: nil,
                        last_modified_after: nil,
                        created_date_from: nil,
                        created_date_to: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/dldas'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'accountId' => account_id,
        'status' => status,
        'orderIdFragment' => order_id_fragment,
        'modifiedDateFrom' => modified_date_from,
        'modifiedDateTo' => modified_date_to,
        'tn' => tn,
        'customerOrderId' => customer_order_id,
        'lastModifiedBy' => last_modified_by,
        'lastModifiedAfter' => last_modified_after,
        'createdDateFrom' => created_date_from,
        'createdDateTo' => created_date_to
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 404
        raise APIException.new(
          'Not Found.  If any errors are found in the processing of the' \
          ' query string a 404 will be returned.  Note that' \
          ' parameters that are not recognized are not considered' \
          ' errors, and are just ignored.',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'DldaOrderReportResponse', String)
      )
    end

    # Retrieve the history information associated with an order
    # @param [String] order_id Required parameter: Example:
    # @return [Object] response from the API call
    def get_dlda_order_history_1(order_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/dldas/{orderId}/history'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'orderId' => { 'value' => order_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 404
        raise APIException.new(
          'NOT FOUND - the order id does not exist in the system',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'DldaOrderReportResponse', String)
      )
    end

    # Retrieve information about a E911 Order with specified ID.
    # @param [Integer] account_id Required parameter: Example:
    # @param [String] order_id Required parameter: Example:
    # @return [Object] response from the API call
    def get_e911_order(account_id,
                       order_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/e911s/{orderId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false },
        'orderId' => { 'value' => order_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 404
        raise APIException.new(
          'NOT FOUND - the order id does not exist in the system',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'E911OrderReportResponse', String)
      )
    end

    # Retrieve information about a specific E911 Order identified as the
    # resource.
    # @param [String] order_id Required parameter: Example:
    # @return [Object] response from the API call
    def get_e911_order_1(order_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/e911s/{orderId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'orderId' => { 'value' => order_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 404
        raise APIException.new(
          'NOT FOUND - the order id does not exist in the system',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'E911OrderReportResponse', String)
      )
    end

    # Retrieve the history information associated with an order
    # @param [Integer] account_id Required parameter: Example:
    # @param [String] order_id Required parameter: Example:
    # @return [Object] response from the API call
    def get_e911_order_history(account_id,
                               order_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/e911s/{orderId}/history'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false },
        'orderId' => { 'value' => order_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 404
        raise APIException.new(
          'NOT FOUND - the order id does not exist in the system',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'E911OrderReportResponse', String)
      )
    end

    # Retrieve the history information associated with an order
    # @param [String] order_id Required parameter: Example:
    # @return [Object] response from the API call
    def get_e911_order_history_1(order_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/e911s/{orderId}/history'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'orderId' => { 'value' => order_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 404
        raise APIException.new(
          'NOT FOUND - the order id does not exist in the system',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'E911OrderReportResponse', String)
      )
    end

    # Retrieve information about one or more E911 Orders (e911s), where the
    # orders are chosen based on the search parameters provided in the API
    # Call.Not all search parameters are compatible with all other search
    # parameters, due to the complexity of searching for historical records
    # using highly parameterized or complex searches.  As a result:<ul>         
    #   <li>all query parameters are compatible with the exception of...</li>   
    #         <li>if modifiedFromDate or modifiedToDate are specified, then the
    # only other valid search parameters are accountId, sippeerId or
    # siteId</li></ul>
    # @param [List of Integer] account_id Optional parameter: Example:
    # @param [Boolean] invert_account_id_search Optional parameter: Example:
    # @param [List of String] status Optional parameter: Example:
    # @param [String] modified_date_from Optional parameter: Example:
    # @param [String] modified_date_to Optional parameter: Example:
    # @param [String] tn Optional parameter: Example:
    # @param [String] customer_order_id Optional parameter: Example:
    # @param [String] last_modified_by Optional parameter: Example:
    # @param [List of String] activity_state Optional parameter: Example:
    # @param [List of String] bandwidth_prime Optional parameter: Example:
    # @param [String] last_modified_after Optional parameter: Example:
    # @param [String] created_date_from Optional parameter: Example:
    # @param [String] created_date_to Optional parameter: Example:
    # @param [Boolean] order_details Optional parameter: Example:false
    # @param [String] order_id_fragment Optional parameter: Example:
    # @param [List of String] include_in_response Optional parameter: Example:
    # @param [String] call_back Optional parameter: Example:
    # @param [String] aeui Optional parameter: Example:
    # @param [String] calling_endpoint Optional parameter: Example:
    # @return [Object] response from the API call
    def get_e911_orders(account_id: nil,
                        invert_account_id_search: nil,
                        status: nil,
                        modified_date_from: nil,
                        modified_date_to: nil,
                        tn: nil,
                        customer_order_id: nil,
                        last_modified_by: nil,
                        activity_state: nil,
                        bandwidth_prime: nil,
                        last_modified_after: nil,
                        created_date_from: nil,
                        created_date_to: nil,
                        order_details: false,
                        order_id_fragment: nil,
                        include_in_response: nil,
                        call_back: nil,
                        aeui: nil,
                        calling_endpoint: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/e911s'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'accountId' => account_id,
        'invertAccountIdSearch' => invert_account_id_search,
        'status' => status,
        'modifiedDateFrom' => modified_date_from,
        'modifiedDateTo' => modified_date_to,
        'tn' => tn,
        'customerOrderId' => customer_order_id,
        'lastModifiedBy' => last_modified_by,
        'activityState' => activity_state,
        'bandwidthPrime' => bandwidth_prime,
        'lastModifiedAfter' => last_modified_after,
        'createdDateFrom' => created_date_from,
        'createdDateTo' => created_date_to,
        'orderDetails' => order_details,
        'orderIdFragment' => order_id_fragment,
        'includeInResponse' => include_in_response,
        'callBack' => call_back,
        'aeui' => aeui,
        'callingEndpoint' => calling_endpoint
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 404
        raise APIException.new(
          'Not Found.  If any errors are found in the processing of the' \
          ' query string a 404 will be returned.  Note that' \
          ' parameters that are not recognized are not considered' \
          ' errors, and are just ignored.',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'E911OrderReportResponse', String)
      )
    end

    # Retrieve information about a specific externalTns order identified as the
    # resource.
    # @param [String] order_id Required parameter: Example:
    # @return [Object] response from the API call
    def get_order_3(order_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/externalTns/{orderId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'orderId' => { 'value' => order_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 404
        raise APIException.new(
          'NOT FOUND - the identified externalTns order id does not exist in' \
          ' the system',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'ExternalTnsOrderReportResponse', String)
      )
    end

    # Retrieve information about one or more externalTns orders, where the
    # orders are chosen based on the search parameters provided in the API Call.
    # @param [List of Integer] account_id Optional parameter: Example:
    # @param [Boolean] invert_account_id_search Optional parameter: Example:
    # @param [List of String] status Optional parameter: Example:
    # @param [String] modified_date_from Optional parameter: Example:
    # @param [String] modified_date_to Optional parameter: Example:
    # @param [String] tn Optional parameter: Example:
    # @param [String] customer_order_id Optional parameter: Example:
    # @param [String] last_modified_by Optional parameter: Example:
    # @param [List of String] activity_state Optional parameter: Example:
    # @param [List of String] bandwidth_prime Optional parameter: Example:
    # @param [String] last_modified_after Optional parameter: Example:
    # @param [String] created_date_from Optional parameter: Example:
    # @param [String] created_date_to Optional parameter: Example:
    # @param [Boolean] order_details Optional parameter: Example:false
    # @param [String] order_id_fragment Optional parameter: Example:
    # @param [String] action Optional parameter: Example:
    # @param [String] type Optional parameter: Example:
    # @return [Object] response from the API call
    def get_orders_3(account_id: nil,
                     invert_account_id_search: nil,
                     status: nil,
                     modified_date_from: nil,
                     modified_date_to: nil,
                     tn: nil,
                     customer_order_id: nil,
                     last_modified_by: nil,
                     activity_state: nil,
                     bandwidth_prime: nil,
                     last_modified_after: nil,
                     created_date_from: nil,
                     created_date_to: nil,
                     order_details: false,
                     order_id_fragment: nil,
                     action: nil,
                     type: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/externalTns'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'accountId' => account_id,
        'invertAccountIdSearch' => invert_account_id_search,
        'status' => status,
        'modifiedDateFrom' => modified_date_from,
        'modifiedDateTo' => modified_date_to,
        'tn' => tn,
        'customerOrderId' => customer_order_id,
        'lastModifiedBy' => last_modified_by,
        'activityState' => activity_state,
        'bandwidthPrime' => bandwidth_prime,
        'lastModifiedAfter' => last_modified_after,
        'createdDateFrom' => created_date_from,
        'createdDateTo' => created_date_to,
        'orderDetails' => order_details,
        'orderIdFragment' => order_id_fragment,
        'action' => action,
        'type' => type
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 404
        raise APIException.new(
          'Not Found.  If any errors are found in the processing of the' \
          ' query string a 404 will be returned.  Note that' \
          ' parameters that are not recognized are not considered' \
          ' errors, and are just ignored.',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'ExternalTnsOrderReportResponse', String)
      )
    end

    # Retrieve the history information associated with an order
    # @param [String] order_id Required parameter: Example:
    # @return [Object] response from the API call
    def get_order_history(order_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/externalTns/{orderId}/history'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'orderId' => { 'value' => order_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 404
        raise APIException.new(
          'NOT FOUND - the order id does not exist in the system',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'ExternalTnsOrderReportResponse', String)
      )
    end

    # Retrieve information about a importTnOrder with specified ID.
    # @param [String] order_id Required parameter: Example:
    # @return [Object] response from the API call
    def get_order_5(order_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/importtnorders/{orderId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'orderId' => { 'value' => order_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'ImportTnOrdersReportResponse', String)
      )
    end

    # Retrieves the importtnorders requests for the given account ID.
    # @param [List of Integer] account_id Optional parameter: Example:
    # @param [Boolean] invert_account_id_search Optional parameter: Example:
    # @param [Integer] site_id Optional parameter: Example:
    # @param [Integer] sippeer_id Optional parameter: Example:
    # @param [String] page Optional parameter: Example:
    # @param [Integer] size Optional parameter: Example:
    # @param [String] tn Optional parameter: Example:
    # @param [String] customer_order_id Optional parameter: Example:
    # @param [String] last_modified_by Optional parameter: Example:
    # @param [String] order_id_fragment Optional parameter: Example:
    # @param [List of String] activity_state Optional parameter: Example:
    # @param [List of String] bandwidth_prime Optional parameter: Example:
    # @param [String] modified_date_from Optional parameter: Example:
    # @param [String] modified_date_to Optional parameter: Example:
    # @param [String] last_modified_after Optional parameter: Example:
    # @param [String] created_date_from Optional parameter: Example:
    # @param [String] created_date_to Optional parameter: Example:
    # @param [List of String] include_in_response Optional parameter: Example:
    # @param [Boolean] order_details Optional parameter: Example:false
    # @param [String] status Optional parameter: Example:
    # @return [Object] response from the API call
    def get_orders_5(account_id: nil,
                     invert_account_id_search: nil,
                     site_id: nil,
                     sippeer_id: nil,
                     page: nil,
                     size: nil,
                     tn: nil,
                     customer_order_id: nil,
                     last_modified_by: nil,
                     order_id_fragment: nil,
                     activity_state: nil,
                     bandwidth_prime: nil,
                     modified_date_from: nil,
                     modified_date_to: nil,
                     last_modified_after: nil,
                     created_date_from: nil,
                     created_date_to: nil,
                     include_in_response: nil,
                     order_details: false,
                     status: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/importtnorders'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'accountId' => account_id,
        'invertAccountIdSearch' => invert_account_id_search,
        'siteId' => site_id,
        'sippeerId' => sippeer_id,
        'page' => page,
        'size' => size,
        'tn' => tn,
        'customerOrderId' => customer_order_id,
        'lastModifiedBy' => last_modified_by,
        'orderIdFragment' => order_id_fragment,
        'activityState' => activity_state,
        'bandwidthPrime' => bandwidth_prime,
        'modifiedDateFrom' => modified_date_from,
        'modifiedDateTo' => modified_date_to,
        'lastModifiedAfter' => last_modified_after,
        'createdDateFrom' => created_date_from,
        'createdDateTo' => created_date_to,
        'includeInResponse' => include_in_response,
        'orderDetails' => order_details,
        'status' => status
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'ImportTnOrdersReportResponse', String)
      )
    end

    # Retrieves the history of the specified importTnOrder.
    # @param [String] order_id Required parameter: Example:
    # @return [Object] response from the API call
    def get_order_history_2(order_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/importtnorders/{orderId}/history'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'orderId' => { 'value' => order_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'ImportTnOrdersReportResponse', String)
      )
    end

    # Retrieve the history information associated with an order
    # @param [String] order_id Required parameter: Example:
    # @return [Object] response from the API call
    def get_lidb_order_history(order_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/lidbs/{orderId}/history'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'orderId' => { 'value' => order_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 404
        raise APIException.new(
          'NOT FOUND - the order id does not exist in the system',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'LidbOrderReportResponse', String)
      )
    end

    # Retrieve information about one or more Lidb Orders (lidbs), where the
    # orders are chosen based on the search parameters provided in the API Call.
    # Not all search parameters are compatible with all other search parameters,
    # due to the complexity of searching for historical records using highly
    # parameterize or complex searches.  As a result:<ul>     <li>all query
    # parameters are compatible with the exception of...</li>     <li>if
    # modifiedFromDate or modifiedToDate are specified, then the only other
    # valid search parameters are accountId, sippeerId or siteId</li>    
    # <li>sippeerId and siteId are only compatible with searches that have a
    # date range parameter.</li></ul>
    # @param [List of Integer] account_id Optional parameter: Example:
    # @param [Integer] site_id Optional parameter: Example:
    # @param [Integer] sippeer_id Optional parameter: Example:
    # @param [List of String] status Optional parameter: Example:
    # @param [String] order_id_fragment Optional parameter: Example:
    # @param [String] modified_date_from Optional parameter: Example:
    # @param [String] modified_date_to Optional parameter: Example:
    # @param [String] tn Optional parameter: Example:
    # @param [String] customer_order_id Optional parameter: Example:
    # @param [String] last_modified_by Optional parameter: Example:
    # @param [String] last_modified_after Optional parameter: Example:
    # @param [String] created_date_from Optional parameter: Example:
    # @param [String] created_date_to Optional parameter: Example:
    # @return [Object] response from the API call
    def get_lidb_orders(account_id: nil,
                        site_id: nil,
                        sippeer_id: nil,
                        status: nil,
                        order_id_fragment: nil,
                        modified_date_from: nil,
                        modified_date_to: nil,
                        tn: nil,
                        customer_order_id: nil,
                        last_modified_by: nil,
                        last_modified_after: nil,
                        created_date_from: nil,
                        created_date_to: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/lidbs'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'accountId' => account_id,
        'siteId' => site_id,
        'sippeerId' => sippeer_id,
        'status' => status,
        'orderIdFragment' => order_id_fragment,
        'modifiedDateFrom' => modified_date_from,
        'modifiedDateTo' => modified_date_to,
        'tn' => tn,
        'customerOrderId' => customer_order_id,
        'lastModifiedBy' => last_modified_by,
        'lastModifiedAfter' => last_modified_after,
        'createdDateFrom' => created_date_from,
        'createdDateTo' => created_date_to
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 404
        raise APIException.new(
          'Not Found.  If any errors are found in the processing of the' \
          ' query string a 404 will be returned.  Note that' \
          ' parameters that are not recognized are not considered' \
          ' errors, and are just ignored.',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'LidbOrderReportResponse', String)
      )
    end

    # Retrieve information about a specific Lidb Order identified as the
    # resource.
    # @param [String] order_id Required parameter: Example:
    # @return [Object] response from the API call
    def get_lidb_order_1(order_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/lidbs/{orderId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'orderId' => { 'value' => order_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 404
        raise APIException.new(
          'NOT FOUND - the order id does not exist in the system',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'LidbOrderReportResponse', String)
      )
    end

    # Create a LIDB order to associate Calling Name Information with a TN or
    # list of CountOfTNsThe key data elements in the submission are -    <table
    # style="text-align: left; width: 80%;"     border="1" cellpadding="2"
    # cellspacing="2">      <tbody>        <tr>         
    # <td>TelephoneNumbers</td>          <td>A list of telephone numbers that
    # will all assume the SubscriberInformation that is listed in the payload.
    # In an enterprise context it is not uncommon for all of the served
    # telephone numbers to use the same string for the Subscriber
    # Information.</td>        </tr>        <tr>         
    # <td>SubscriberInformation</td>          <td>This is the field that is
    # displayed to the user receiving the phone call from the Telephone numbers
    # in the TelephoneNumberList</td>        </tr>        <tr>         
    # <td>UseType</td>          <td>Can be RESIDENTIAL or BUSINESS. The element
    # is required.</td>        </tr>        <tr>          <td>Visibility</td>   
    #       <td>Can be PRIVATE or PUBLIC. If it is tagged as PRIVATE then the
    # data will be provided, but the display will not be provided on a standard
    # phone call.  The element is required</td>        </tr>        <tr>        
    #  <td>CustomerOrderId</td>          <td>The Customer Order ID is an ID
    # assigned by the account owner to provide a reference number for the Order.
    # The element is optional. Only alphanumeric values, dashes and spaces are
    # allowed. Max length is 40 characters.</td>        </tr>      </tbody>   
    # </table>
    # @param [Integer] account_id Required parameter: Example:
    # @param [LidbOrderPayload] body Optional parameter: Example:
    # @return [LidbOrderResponse] response from the API call
    def create_lidb_order(account_id,
                          body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/lidbs'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('LidbOrder', body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 400
        raise APIException.new(
          'Bad RequestA 400 Bad Request indicates that the processing of the' \
          ' request payload has detected a syntactic error that' \
          ' prevents further processing.  No order is created' \
          ' under these conditions, and the request must be' \
          ' corrected and re-submitted before an order can be' \
          ' created.Error text and an error code will be provided' \
          ' in the ErrorList element.',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'LidbOrderResponse',
                                   LidbOrderResponse)
      )
    end

    # Retrieve information about a TN Option Order with specified ID.
    # @param [Integer] account_id Required parameter: Example:
    # @param [String] order_id Required parameter: Example:
    # @return [Object] response from the API call
    def get_line_option_order(account_id,
                              order_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/tnoptions/{orderId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false },
        'orderId' => { 'value' => order_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 404
        raise APIException.new(
          'NOT FOUND - the order id does not exist in the system',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TnOptionOrderReportResponse', String)
      )
    end

    # Retrieve a list of the TN Option orders that are associated with the
    # account. <p>A maximum of 1,000 orders can be retrieved per request. If no
    # date range or specific query parameter (marked by <b
    # class="required">*</b> below) is provided, the order results will be
    # limited to the last two years.</p>
    # @param [Integer] account_id Required parameter: Example:
    # @param [List of String] status Optional parameter: Example:
    # @param [String] modified_date_from Optional parameter: Example:
    # @param [String] modified_date_to Optional parameter: Example:
    # @param [String] tn Optional parameter: Example:
    # @param [String] customer_order_id Optional parameter: Example:
    # @param [String] last_modified_by Optional parameter: Example:
    # @param [List of String] activity_state Optional parameter: Example:
    # @param [List of String] bandwidth_prime Optional parameter: Example:
    # @param [String] last_modified_after Optional parameter: Example:
    # @param [String] created_date_from Optional parameter: Example:
    # @param [String] created_date_to Optional parameter: Example:
    # @param [Boolean] order_details Optional parameter: Example:false
    # @param [String] order_id_fragment Optional parameter: Example:
    # @param [List of String] include_in_response Optional parameter: Example:
    # @return [Object] response from the API call
    def get_line_option_order_2(account_id,
                                status: nil,
                                modified_date_from: nil,
                                modified_date_to: nil,
                                tn: nil,
                                customer_order_id: nil,
                                last_modified_by: nil,
                                activity_state: nil,
                                bandwidth_prime: nil,
                                last_modified_after: nil,
                                created_date_from: nil,
                                created_date_to: nil,
                                order_details: false,
                                order_id_fragment: nil,
                                include_in_response: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/tnoptions'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false }
      )
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'status' => status,
        'modifiedDateFrom' => modified_date_from,
        'modifiedDateTo' => modified_date_to,
        'tn' => tn,
        'customerOrderId' => customer_order_id,
        'lastModifiedBy' => last_modified_by,
        'activityState' => activity_state,
        'bandwidthPrime' => bandwidth_prime,
        'lastModifiedAfter' => last_modified_after,
        'createdDateFrom' => created_date_from,
        'createdDateTo' => created_date_to,
        'orderDetails' => order_details,
        'orderIdFragment' => order_id_fragment,
        'includeInResponse' => include_in_response
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 404
        raise APIException.new(
          'Not Found.  If any errors are found in the processing of the' \
          ' query string a 404 will be returned.  Note that' \
          ' parameters that are not recognized are not considered' \
          ' errors, and are just ignored.',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TnOptionOrderReportResponse', String)
      )
    end

    # Retrieve the history information associated with an order
    # @param [Integer] account_id Required parameter: Example:
    # @param [String] order_id Required parameter: Example:
    # @return [Object] response from the API call
    def get_line_option_order_history(account_id,
                                      order_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/tnoptions/{orderId}/history'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false },
        'orderId' => { 'value' => order_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 404
        raise APIException.new(
          'NOT FOUND - the order id does not exist in the system',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TnOptionOrderReportResponse', String)
      )
    end

    # Retrieves the information associated with the specified lsr ID number.
    # @param [String] order_id Required parameter: Example:
    # @return [Object] response from the API call
    def get_order_6(order_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/lsrorders/{orderId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'orderId' => { 'value' => order_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'LsrOrderReportResponse',
                                   String)
      )
    end

    # Retrieve information about one or more Lsr orders, where the orders are
    # chosen based on the search parameters provided in the API Call.
    # @param [List of Integer] account_id Optional parameter: Example:
    # @param [List of String] activity_state Optional parameter: Example:
    # @param [List of String] bandwidth_prime Optional parameter: Example:
    # @param [String] created_date_from Optional parameter: Example:
    # @param [String] created_date_to Optional parameter: Example:
    # @param [String] customer_order_id Optional parameter: Example:
    # @param [List of String] include_in_response Optional parameter: Example:
    # @param [Boolean] invert_account_id_search Optional parameter: Example:
    # @param [String] last_modified_after Optional parameter: Example:
    # @param [String] modified_date_from Optional parameter: Example:
    # @param [String] modified_date_to Optional parameter: Example:
    # @param [String] order_id_fragment Optional parameter: Example:
    # @param [List of String] status Optional parameter: Example:
    # @param [String] tn Optional parameter: Example:
    # @param [String] pon Optional parameter: Example:
    # @param [String] btn Optional parameter: Example:
    # @param [String] requested_foc_date Optional parameter: Example:
    # @param [String] actual_foc_date Optional parameter: Example:
    # @param [String] last_modified_by Optional parameter: Example:
    # @return [Object] response from the API call
    def get_orders_6(account_id: nil,
                     activity_state: nil,
                     bandwidth_prime: nil,
                     created_date_from: nil,
                     created_date_to: nil,
                     customer_order_id: nil,
                     include_in_response: nil,
                     invert_account_id_search: nil,
                     last_modified_after: nil,
                     modified_date_from: nil,
                     modified_date_to: nil,
                     order_id_fragment: nil,
                     status: nil,
                     tn: nil,
                     pon: nil,
                     btn: nil,
                     requested_foc_date: nil,
                     actual_foc_date: nil,
                     last_modified_by: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/lsrorders'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'accountId' => account_id,
        'activityState' => activity_state,
        'bandwidthPrime' => bandwidth_prime,
        'createdDateFrom' => created_date_from,
        'createdDateTo' => created_date_to,
        'customerOrderId' => customer_order_id,
        'includeInResponse' => include_in_response,
        'invertAccountIdSearch' => invert_account_id_search,
        'lastModifiedAfter' => last_modified_after,
        'modifiedDateFrom' => modified_date_from,
        'modifiedDateTo' => modified_date_to,
        'orderIdFragment' => order_id_fragment,
        'status' => status,
        'tn' => tn,
        'pon' => pon,
        'btn' => btn,
        'requestedFocDate' => requested_foc_date,
        'actualFocDate' => actual_foc_date,
        'lastModifiedBy' => last_modified_by
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 404
        raise APIException.new(
          'Not Found.  If any errors are found in the processing of the' \
          ' query string a 404 will be returned.  Note that' \
          ' parameters that are not recognized are not considered' \
          ' errors, and are just ignored.',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'LsrOrderReportResponse',
                                   String)
      )
    end

    # Retrieves the history of the specified lsr order.
    # @param [String] order_id Required parameter: Example:
    # @return [Object] response from the API call
    def get_order_history_4(order_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/lsrorders/{orderId}/history'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'orderId' => { 'value' => order_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 404
        raise APIException.new(
          'NOT FOUND - the order id does not exist in the system',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'LsrOrderReportResponse',
                                   String)
      )
    end

    # Retrieve information about one or more Port-in Orders (portins), where the
    # orders are chosen based on the search parameters provided in the API Call.
    # @param [List of Integer] account_id Optional parameter: Example:
    # @param [Boolean] invert_account_id_search Optional parameter: Example:
    # @param [Integer] site_id Optional parameter: Example:
    # @param [Integer] sippeer_id Optional parameter: Example:
    # @param [List of String] status Optional parameter: Example:
    # @param [String] order_id_fragment Optional parameter: Example:
    # @param [String] modified_date_from Optional parameter: Example:
    # @param [String] modified_date_to Optional parameter: Example:
    # @param [String] tn Optional parameter: Example:
    # @param [String] pon Optional parameter: Example:
    # @param [String] btn Optional parameter: Example:
    # @param [String] requested_foc_date Optional parameter: Example:
    # @param [String] actual_foc_date Optional parameter: Example:
    # @param [String] customer_order_id Optional parameter: Example:
    # @param [String] last_modified_by Optional parameter: Example:
    # @param [List of String] activity_state Optional parameter: Example:
    # @param [List of String] bandwidth_prime Optional parameter: Example:
    # @param [String] last_modified_after Optional parameter: Example:
    # @param [String] created_date_from Optional parameter: Example:
    # @param [String] created_date_to Optional parameter: Example:
    # @param [List of String] include_in_response Optional parameter: Example:
    # @param [String] bulkportinorderid Optional parameter: Example:
    # @return [Object] response from the API call
    def get_port_in_orders(account_id: nil,
                           invert_account_id_search: nil,
                           site_id: nil,
                           sippeer_id: nil,
                           status: nil,
                           order_id_fragment: nil,
                           modified_date_from: nil,
                           modified_date_to: nil,
                           tn: nil,
                           pon: nil,
                           btn: nil,
                           requested_foc_date: nil,
                           actual_foc_date: nil,
                           customer_order_id: nil,
                           last_modified_by: nil,
                           activity_state: nil,
                           bandwidth_prime: nil,
                           last_modified_after: nil,
                           created_date_from: nil,
                           created_date_to: nil,
                           include_in_response: nil,
                           bulkportinorderid: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/portins'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'accountId' => account_id,
        'invertAccountIdSearch' => invert_account_id_search,
        'siteId' => site_id,
        'sippeerId' => sippeer_id,
        'status' => status,
        'orderIdFragment' => order_id_fragment,
        'modifiedDateFrom' => modified_date_from,
        'modifiedDateTo' => modified_date_to,
        'tn' => tn,
        'pon' => pon,
        'btn' => btn,
        'requestedFocDate' => requested_foc_date,
        'actualFocDate' => actual_foc_date,
        'customerOrderId' => customer_order_id,
        'lastModifiedBy' => last_modified_by,
        'activityState' => activity_state,
        'bandwidthPrime' => bandwidth_prime,
        'lastModifiedAfter' => last_modified_after,
        'createdDateFrom' => created_date_from,
        'createdDateTo' => created_date_to,
        'includeInResponse' => include_in_response,
        'bulkportinorderid' => bulkportinorderid
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 404
        raise APIException.new(
          'Not Found.  If any errors are found in the processing of the' \
          ' query string a 404 will be returned.  Note that' \
          ' parameters that are not recognized are not considered' \
          ' errors, and are just ignored.',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'PortInOrderReportResponse', String)
      )
    end

    # Retrieves the information associated with the specified port-in ID number.
    # @param [String] order_id Required parameter: Example:
    # @return [Object] response from the API call
    def get_port_in_order(order_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/portins/{orderId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'orderId' => { 'value' => order_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'PortInOrderReportResponse', String)
      )
    end

    # Retrieves the history of the specified port-in order.
    # @param [String] order_id Required parameter: Example:
    # @return [Object] response from the API call
    def get_port_in_order_history(order_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/portins/{orderId}/history'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'orderId' => { 'value' => order_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 404
        raise APIException.new(
          'NOT FOUND - the order id does not exist in the system',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'PortInOrderReportResponse', String)
      )
    end

    # Retrieve information about one or more Port-Out Orders (portins), where
    # the orders are chosen based on the search parameters provided in the API
    # Call. Not all search parameters are compatible with all other search
    # parameters, due to the complexity of searching for historical records
    # using highly parameterized or complex searches.  As a result:* all query
    # parameters are compatible with the exception of...** if modifiedFromDate
    # or modifiedToDate are specified, then the only other valid search
    # parameters are accountId, sippeerId or siteId** sippeerId and siteId are
    # only compatible with searches that have a date range parameter.
    # @param [List of Integer] account_id Optional parameter: Example:
    # @param [Boolean] invert_account_id_search Optional parameter: Example:
    # @param [String] order_id_fragment Optional parameter: Example:
    # @param [List of String] status Optional parameter: Example:
    # @param [String] modified_date_from Optional parameter: Example:
    # @param [String] modified_date_to Optional parameter: Example:
    # @param [String] tn Optional parameter: Example:
    # @param [String] requested_foc_date Optional parameter: Example:
    # @param [String] actual_foc_date Optional parameter: Example:
    # @param [String] last_modified_by Optional parameter: Example:
    # @param [List of String] activity_state Optional parameter: Example:
    # @param [List of String] bandwidth_prime Optional parameter: Example:
    # @param [String] last_modified_after Optional parameter: Example:
    # @param [String] created_date_from Optional parameter: Example:
    # @param [String] created_date_to Optional parameter: Example:
    # @param [List of String] include_in_response Optional parameter: Example:
    # @return [Object] response from the API call
    def get_port_out_orders(account_id: nil,
                            invert_account_id_search: nil,
                            order_id_fragment: nil,
                            status: nil,
                            modified_date_from: nil,
                            modified_date_to: nil,
                            tn: nil,
                            requested_foc_date: nil,
                            actual_foc_date: nil,
                            last_modified_by: nil,
                            activity_state: nil,
                            bandwidth_prime: nil,
                            last_modified_after: nil,
                            created_date_from: nil,
                            created_date_to: nil,
                            include_in_response: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/portouts'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'accountId' => account_id,
        'invertAccountIdSearch' => invert_account_id_search,
        'orderIdFragment' => order_id_fragment,
        'status' => status,
        'modifiedDateFrom' => modified_date_from,
        'modifiedDateTo' => modified_date_to,
        'tn' => tn,
        'requestedFocDate' => requested_foc_date,
        'actualFocDate' => actual_foc_date,
        'lastModifiedBy' => last_modified_by,
        'activityState' => activity_state,
        'bandwidthPrime' => bandwidth_prime,
        'lastModifiedAfter' => last_modified_after,
        'createdDateFrom' => created_date_from,
        'createdDateTo' => created_date_to,
        'includeInResponse' => include_in_response
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 404
        raise APIException.new(
          'Not Found.  If any errors are found in the processing of the' \
          ' query string a 404 will be returned.  Note that' \
          ' parameters that are not recognized are not considered' \
          ' errors, and are just ignored.',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'PortOutOrderReportResponse', String)
      )
    end

    # Retrieves the information associated with the specified port-out ID
    # number.
    # @param [String] order_id Required parameter: Example:
    # @return [Object] response from the API call
    def get_port_out_order(order_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/portouts/{orderId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'orderId' => { 'value' => order_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'PortOutOrderReportResponse', String)
      )
    end

    # Retrieve information about a removeImportedTnOrder with specified ID.
    # @param [String] order_id Required parameter: Example:
    # @return [Object] response from the API call
    def get_order_10(order_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/removeImportedTnOrders/{orderId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'orderId' => { 'value' => order_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'RemoveImportedTnOrdersReportResponse',
                                   String)
      )
    end

    # Retrieves the removeImportedTnOrders requests for the given account ID.
    # @param [List of Integer] account_id Optional parameter: Example:
    # @param [Boolean] invert_account_id_search Optional parameter: Example:
    # @param [Integer] site_id Optional parameter: Example:
    # @param [Integer] sippeer_id Optional parameter: Example:
    # @param [String] page Optional parameter: Example:
    # @param [Integer] size Optional parameter: Example:
    # @param [String] tn Optional parameter: Example:
    # @param [String] customer_order_id Optional parameter: Example:
    # @param [String] last_modified_by Optional parameter: Example:
    # @param [String] order_id_fragment Optional parameter: Example:
    # @param [List of String] activity_state Optional parameter: Example:
    # @param [List of String] bandwidth_prime Optional parameter: Example:
    # @param [String] modified_date_from Optional parameter: Example:
    # @param [String] modified_date_to Optional parameter: Example:
    # @param [String] last_modified_after Optional parameter: Example:
    # @param [String] created_date_from Optional parameter: Example:
    # @param [String] created_date_to Optional parameter: Example:
    # @param [List of String] include_in_response Optional parameter: Example:
    # @param [Boolean] order_details Optional parameter: Example:false
    # @param [String] status Optional parameter: Example:
    # @return [Object] response from the API call
    def get_orders_8(account_id: nil,
                     invert_account_id_search: nil,
                     site_id: nil,
                     sippeer_id: nil,
                     page: nil,
                     size: nil,
                     tn: nil,
                     customer_order_id: nil,
                     last_modified_by: nil,
                     order_id_fragment: nil,
                     activity_state: nil,
                     bandwidth_prime: nil,
                     modified_date_from: nil,
                     modified_date_to: nil,
                     last_modified_after: nil,
                     created_date_from: nil,
                     created_date_to: nil,
                     include_in_response: nil,
                     order_details: false,
                     status: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/removeImportedTnOrders'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'accountId' => account_id,
        'invertAccountIdSearch' => invert_account_id_search,
        'siteId' => site_id,
        'sippeerId' => sippeer_id,
        'page' => page,
        'size' => size,
        'tn' => tn,
        'customerOrderId' => customer_order_id,
        'lastModifiedBy' => last_modified_by,
        'orderIdFragment' => order_id_fragment,
        'activityState' => activity_state,
        'bandwidthPrime' => bandwidth_prime,
        'modifiedDateFrom' => modified_date_from,
        'modifiedDateTo' => modified_date_to,
        'lastModifiedAfter' => last_modified_after,
        'createdDateFrom' => created_date_from,
        'createdDateTo' => created_date_to,
        'includeInResponse' => include_in_response,
        'orderDetails' => order_details,
        'status' => status
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'RemoveImportedTnOrdersReportResponse',
                                   String)
      )
    end

    # Retrieves the history of the specified removeImportedTnOrder.
    # @param [String] order_id Required parameter: Example:
    # @return [Object] response from the API call
    def get_order_history_6(order_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/removeImportedTnOrders/{orderId}/history'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'orderId' => { 'value' => order_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'RemoveImportedTnOrdersReportResponse',
                                   String)
      )
    end

    # Retrieve the history information associated with an order
    # @param [String] order_id Required parameter: Example:
    # @return [Object] response from the API call
    def get_tn_order_history(order_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/orders/{orderId}/history'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'orderId' => { 'value' => order_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 404
        raise APIException.new(
          'NOT FOUND - the order id does not exist in the system',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'TnOrderReportResponse',
                                   String)
      )
    end

    # Retrieve information about one or more New Number Orders (orders), where
    # the orders are chosen based on the search parameters provided in the API
    # Call. Not all search parameters are compatible with all other search
    # parameters, due to the complexity of searching for historical records
    # using highly parameterized or complex searches.  As a result:* all query
    # parameters are compatible with the exception of...** if modifiedFromDate
    # or modifiedToDate are specified, then the only other valid search
    # parameters are accountId, sippeerId or siteId** sippeerId and siteId are
    # only compatible with searches that have a date range parameter.
    # @param [List of Integer] account_id Optional parameter: Example:
    # @param [Boolean] invert_account_id_search Optional parameter: Example:
    # @param [Integer] site_id Optional parameter: Example:
    # @param [Integer] sippeer_id Optional parameter: Example:
    # @param [List of String] status Optional parameter: Example:
    # @param [String] order_id_fragment Optional parameter: Example:
    # @param [String] modified_date_from Optional parameter: Example:
    # @param [String] modified_date_to Optional parameter: Example:
    # @param [String] tn Optional parameter: Example:
    # @param [String] customer_order_id Optional parameter: Example:
    # @param [String] last_modified_by Optional parameter: Example:
    # @param [List of String] activity_state Optional parameter: Example:
    # @param [List of String] bandwidth_prime Optional parameter: Example:
    # @param [String] last_modified_after Optional parameter: Example:
    # @param [String] created_date_from Optional parameter: Example:
    # @param [String] created_date_to Optional parameter: Example:
    # @param [List of String] include_in_response Optional parameter: Example:
    # @return [Object] response from the API call
    def get_tn_orders(account_id: nil,
                      invert_account_id_search: nil,
                      site_id: nil,
                      sippeer_id: nil,
                      status: nil,
                      order_id_fragment: nil,
                      modified_date_from: nil,
                      modified_date_to: nil,
                      tn: nil,
                      customer_order_id: nil,
                      last_modified_by: nil,
                      activity_state: nil,
                      bandwidth_prime: nil,
                      last_modified_after: nil,
                      created_date_from: nil,
                      created_date_to: nil,
                      include_in_response: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/orders'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'accountId' => account_id,
        'invertAccountIdSearch' => invert_account_id_search,
        'siteId' => site_id,
        'sippeerId' => sippeer_id,
        'status' => status,
        'orderIdFragment' => order_id_fragment,
        'modifiedDateFrom' => modified_date_from,
        'modifiedDateTo' => modified_date_to,
        'tn' => tn,
        'customerOrderId' => customer_order_id,
        'lastModifiedBy' => last_modified_by,
        'activityState' => activity_state,
        'bandwidthPrime' => bandwidth_prime,
        'lastModifiedAfter' => last_modified_after,
        'createdDateFrom' => created_date_from,
        'createdDateTo' => created_date_to,
        'includeInResponse' => include_in_response
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 404
        raise APIException.new(
          'Not Found.  If any errors are found in the processing of the' \
          ' query string a 404 will be returned.  Note that' \
          ' parameters that are not recognized are not considered' \
          ' errors, and are just ignored.',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'TnOrderReportResponse',
                                   String)
      )
    end

    # Retrieve information about a specific New Number Order identified as the
    # resource.
    # @param [String] order_id Required parameter: Example:
    # @return [Object] response from the API call
    def get_tn_order(order_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/orders/{orderId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'orderId' => { 'value' => order_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 404
        raise APIException.new(
          'NOT FOUND - the order id does not exist in the system',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'TnOrderReportResponse',
                                   String)
      )
    end

    # Retrieve count of Telephone numbers for the indicated site
    # @param [Integer] account_id Required parameter: Example:
    # @param [Integer] site_id Required parameter: Example:
    # @return [SiteTnTotalResponse] response from the API call
    def get_total_tns(account_id,
                      site_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/sites/{siteId}/totaltns'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false },
        'siteId' => { 'value' => site_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'SiteTNsResponse',
                                   SiteTnTotalResponse)
      )
    end

    # get a count of the available numbers on the system - structured in a
    # variety of ways.
    # @param [String] type Optional parameter: Example:
    # @return [TelephoneNumbersDetailsHistory] response from the API call
    def get_telephone_numbers_details_history_1(type: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/availableNumbers'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'type' => type
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 404
        raise APIException.new(
          'Not Found - The search parameters are invalid and prevent finding' \
          ' any content',
          _response
        )
      elsif _response.status_code == 500
        raise APIException.new(
          'Internal Server Error - System error',
          _response
        )
      elsif _response.status_code == 504
        raise APIException.new(
          'Timeout - The system was not able to process your request in time',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'TNs',
                                   TelephoneNumbersDetailsHistory)
      )
    end

    # Get the total number of available TNs filtered by the search parameters.
    # @param [Integer] tier Optional parameter: Example:
    # @param [Integer] lata Optional parameter: Example:
    # @param [String] rate_center Optional parameter: Example:
    # @param [String] area_code Optional parameter: Example:
    # @param [String] npa_nxx Optional parameter: Example:
    # @param [String] npa_nxxx Optional parameter: Example:
    # @param [String] state Optional parameter: Example:
    # @param [String] city Optional parameter: Example:
    # @param [String] startdate Optional parameter: Example:
    # @param [String] enddate Optional parameter: Example:
    # @return [TelephoneNumberTotalsHistory] response from the API call
    def get_available_telephone_number_totals(tier: nil,
                                              lata: nil,
                                              rate_center: nil,
                                              area_code: nil,
                                              npa_nxx: nil,
                                              npa_nxxx: nil,
                                              state: nil,
                                              city: nil,
                                              startdate: nil,
                                              enddate: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/availableNumbers/totals'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'tier' => tier,
        'lata' => lata,
        'rateCenter' => rate_center,
        'areaCode' => area_code,
        'npaNxx' => npa_nxx,
        'npaNxxx' => npa_nxxx,
        'state' => state,
        'city' => city,
        'startdate' => startdate,
        'enddate' => enddate
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'Quantity',
                                   TelephoneNumberTotalsHistory)
      )
    end

    # TODO
    # @param [Integer] account_id Required parameter: Example:
    # @return [AccountTollFreeTotalsResponse] response from the API call
    def get_account_toll_free_totals_1(account_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/tftotals'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'AccountTollFreeTotalsResponse',
                                   AccountTollFreeTotalsResponse)
      )
    end

    # Retrieves the total count of Toll-Free Telephone Numbers for the given
    # site.
    # @param [Integer] account_id Required parameter: Example:
    # @param [Integer] site_id Required parameter: Example:
    # @return [SiteTollFreeTotalsResponse] response from the API call
    def get_site_toll_free_totals(account_id,
                                  site_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/sites/{siteId}/tftotals'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false },
        'siteId' => { 'value' => site_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'SiteTollFreeTotalsResponse',
                                   SiteTollFreeTotalsResponse)
      )
    end

    # TODO
    # @param [Integer] account_id Required parameter: Example:
    # @param [String] orderid Required parameter: Example:
    # @param [String] order_type Required parameter: Example:
    # @param [InternalPortEvent] body Optional parameter: Example:
    # @return [Object] response from the API call
    def update(account_id,
               orderid,
               order_type,
               body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/{orderType}/{orderid}/statusupdate'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false },
        'orderid' => { 'value' => orderid, 'encode' => false },
        'orderType' => { 'value' => order_type, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('InternalPortEvent', body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'response', String)
      )
    end

    # Retrieves the file associated with the order
    # @param [Integer] account_id Required parameter: Example:
    # @param [String] order_type Required parameter: Example:
    # @param [String] order_id Required parameter: Example:
    # @param [String] file_name Required parameter: Example:
    # @return [Object] response from the API call
    def get_file(account_id,
                 order_type,
                 order_id,
                 file_name)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/{orderType}/{orderId}/loas/{fileName}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false },
        'orderType' => { 'value' => order_type, 'encode' => false },
        'orderId' => { 'value' => order_id, 'encode' => false },
        'fileName' => { 'value' => file_name, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 404
        raise APIException.new(
          'a 404 indicates that the indicated file was not found in' \
          ' conjunction with the order id.',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'response', String)
      )
    end

    # Retrieves the list of the loa (and other) files associated with the order
    # @param [Integer] account_id Required parameter: Example:
    # @param [String] order_type Required parameter: Example:
    # @param [String] order_id Required parameter: Example:
    # @param [Boolean] metadata Optional parameter: Example:
    # @return [FileListResponse] response from the API call
    def get_files_for_order(account_id,
                            order_type,
                            order_id,
                            metadata: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/{orderType}/{orderId}/loas'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false },
        'orderType' => { 'value' => order_type, 'encode' => false },
        'orderId' => { 'value' => order_id, 'encode' => false }
      )
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'metadata' => metadata
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'FileListResponse',
                                   FileListResponse)
      )
    end

    # A POST to the available orders API will add the listed TNs to the overall
    # inventory, and create a work-order that can be used to track the status of
    # that attempt.Key data elements in the payload include...* The account and
    # gateway profile, that control the routing of calls that are placed to
    # these numbers.  The typical values are *UnallocatedNonTF* and
    # *UnallocatedTF*.* The Vendor name that will be associated with these
    # numbers.  There must be allignment with the NPANXX of the numbers that are
    # being imported, and the Vendor that supplies the rate center in which the
    # numbers will land.* The list of telephone numbers themselves.
    # @param [ImportAvailableNumberOrder] body Optional parameter: Example:
    # @return [Object] response from the API call
    def create_import_available_order(body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/availableNumbers/orders'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('ImportAvailableNumberOrder',
                                                  body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'response', String)
      )
    end

    # Retrieves an account's telephone number reservations
    # @param [Integer] account_id Required parameter: Example:
    # @return [ReservationsResponse] response from the API call
    def get_reservations(account_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/TnReservation'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'ReservationsResponse',
                                   ReservationsResponse)
      )
    end

    # Retrieves reservation information associated with the Telephone Number.
    # @param [String] tn Required parameter: Example:
    # @return [ReservationResponse] response from the API call
    def get_reservation_by_tn(tn)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/tns/{tn}/TnReservation'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'tn' => { 'value' => tn, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'ReservationResponse',
                                   ReservationResponse)
      )
    end

    # TODO
    # @param [String] region Required parameter: Example:
    # @param [String] abbreviation Required parameter: Example:
    # @param [Integer] vendor Required parameter: Example:
    # @return [Object] response from the API call
    def get_coverage(region,
                     abbreviation,
                     vendor)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/{region}/rateCenters/{abbreviation}/vendors/{vendor}/coverage'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'region' => { 'value' => region, 'encode' => false },
        'abbreviation' => { 'value' => abbreviation, 'encode' => false },
        'vendor' => { 'value' => vendor, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'response', String)
      )
    end

    # TODO
    # @param [String] region Required parameter: Example:
    # @param [String] abbreviation Required parameter: Example:
    # @param [Integer] vendor Required parameter: Example:
    # @param [RateCenterCoverage] body Optional parameter: Example:
    # @return [Object] response from the API call
    def update_coverage(region,
                        abbreviation,
                        vendor,
                        body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/{region}/rateCenters/{abbreviation}/vendors/{vendor}/coverage'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'region' => { 'value' => region, 'encode' => false },
        'abbreviation' => { 'value' => abbreviation, 'encode' => false },
        'vendor' => { 'value' => vendor, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'response', String)
      )
    end

    # TODO
    # @param [String] region Required parameter: Example:
    # @param [String] abbreviation Required parameter: Example:
    # @return [Object] response from the API call
    def get_rate_center(region,
                        abbreviation)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/{region}/rateCenters/{abbreviation}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'region' => { 'value' => region, 'encode' => false },
        'abbreviation' => { 'value' => abbreviation, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'response', String)
      )
    end

    # TODO
    # @param [String] region Required parameter: Example:
    # @return [Object] response from the API call
    def get_rate_centers_by_region(region)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/{region}/rateCenters'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'region' => { 'value' => region, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'response', String)
      )
    end

    # TODO
    # @param [String] region Required parameter: Example:
    # @param [String] abbreviation Required parameter: Example:
    # @return [Object] response from the API call
    def get_rate_center_coverage(region,
                                 abbreviation)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/{region}/rateCenters/{abbreviation}/coverage'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'region' => { 'value' => region, 'encode' => false },
        'abbreviation' => { 'value' => abbreviation, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'response', String)
      )
    end

    # Get all report definitions
    # @param [String] scope Optional parameter: Example:
    # @param [Boolean] hidden Optional parameter: Example:false
    # @return [ReportsResponse] response from the API call
    def get_reports(scope: nil,
                    hidden: false)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/reports'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'scope' => scope,
        'hidden' => hidden
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'ReportsResponse',
                                   ReportsResponse)
      )
    end

    # Creates a report type/definition
    # @param [Report] body Optional parameter: Example:
    # @return [ReportResponse] response from the API call
    def create_report_1(body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/reports'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('Report', body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'ReportResponse',
                                   ReportResponse)
      )
    end

    # Retrieve report template details.
    # @param [Integer] report_id Required parameter: Example:
    # @return [ReportResponse] response from the API call
    def get_report(report_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/reports/{reportId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'reportId' => { 'value' => report_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 404
        raise APIException.new(
          'A report template matching the provided ID could not be found.',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'ReportResponse',
                                   ReportResponse)
      )
    end

    # Update an existing report template. Incorrect or omitted display priority
    # will be replaced with the default value of 1.
    # @param [Integer] report_id Required parameter: Example:
    # @param [Report] body Optional parameter: Example:
    # @return [ReportResponse] response from the API call
    def update_report(report_id,
                      body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/reports/{reportId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'reportId' => { 'value' => report_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('Report', body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 404
        raise APIException.new(
          'A report template matching the provided ID could not be found.',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'ReportResponse',
                                   ReportResponse)
      )
    end

    # Delete an existing report template.
    # @param [Integer] report_id Required parameter: Example:
    # @return [ReportResponse] response from the API call
    def delete_report(report_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/reports/{reportId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'reportId' => { 'value' => report_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.delete(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 404
        raise APIException.new(
          'A report template matching the provided ID could not be found.',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'ReportResponse',
                                   ReportResponse)
      )
    end

    # Retrieve report instances associated with a specific report, including the
    # up-to-date report generation status.
    # @param [Integer] report_id Required parameter: Example:
    # @param [Integer] account_id Optional parameter: Example:
    # @param [Boolean] user_instances_only Optional parameter: Example:
    # @return [ReportInstancesResponse] response from the API call
    def get_report_instances(report_id,
                             account_id: nil,
                             user_instances_only: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/reports/{reportId}/instances'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'reportId' => { 'value' => report_id, 'encode' => false }
      )
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'accountId' => account_id,
        'userInstancesOnly' => user_instances_only
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'ReportInstancesResponse',
                                   ReportInstancesResponse)
      )
    end

    # Create a new report instance for a specific report.
    # @param [Integer] report_id Required parameter: Example:
    # @param [Integer] account_id Optional parameter: Example:
    # @param [ReportInstance] body Optional parameter: Example:
    # @return [ReportInstanceResponse] response from the API call
    def create_report_instance(report_id,
                               account_id: nil,
                               body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/reports/{reportId}/instances'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'reportId' => { 'value' => report_id, 'encode' => false }
      )
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'accountId' => account_id
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('Instance', body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 400
        raise APIException.new(
          'Bad Request',
          _response
        )
      elsif _response.status_code == 503
        raise APIException.new(
          'Service Unavailable',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'ReportInstanceResponse',
                                   ReportInstanceResponse)
      )
    end

    # TODO
    # @param [Integer] account_id Optional parameter: Example:
    # @param [Boolean] user_instances_only Optional parameter: Example:
    # @param [String] scope Optional parameter: Example:
    # @return [ReportInstancesResponse] response from the API call
    def get_instances(account_id: nil,
                      user_instances_only: nil,
                      scope: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/reports/instances'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'accountId' => account_id,
        'userInstancesOnly' => user_instances_only,
        'scope' => scope
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'ReportInstancesResponse',
                                   ReportInstancesResponse)
      )
    end

    # Retrieve report instance details, including the current report instance
    # status.
    # @param [Integer] report_id Required parameter: Example:
    # @param [Integer] report_instance_id Required parameter: Example:
    # @param [Integer] account_id Optional parameter: Example:
    # @return [ReportInstanceResponse] response from the API call
    def get_report_instance(report_id,
                            report_instance_id,
                            account_id: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/reports/{reportId}/instances/{reportInstanceId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'reportId' => { 'value' => report_id, 'encode' => false },
        'reportInstanceId' => { 'value' => report_instance_id, 'encode' => false }
      )
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'accountId' => account_id
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 404
        raise APIException.new(
          'A report template matching the provided ID could not be found.',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'ReportInstanceResponse',
                                   ReportInstanceResponse)
      )
    end

    # TODO
    # @param [Integer] report_id Required parameter: Example:
    # @param [Integer] report_instance_id Required parameter: Example:
    # @param [Integer] account_id Optional parameter: Example:
    # @param [ReportInstance] body Optional parameter: Example:
    # @return [ReportInstanceResponse] response from the API call
    def update_report_instance(report_id,
                               report_instance_id,
                               account_id: nil,
                               body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/reports/{reportId}/instances/{reportInstanceId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'reportId' => { 'value' => report_id, 'encode' => false },
        'reportInstanceId' => { 'value' => report_instance_id, 'encode' => false }
      )
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'accountId' => account_id
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('Instance', body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'ReportInstanceResponse',
                                   ReportInstanceResponse)
      )
    end

    # Retrieve report instance output file, if output is available.
    # @param [Integer] report_id Required parameter: Example:
    # @param [Integer] report_instance_id Required parameter: Example:
    # @param [Integer] account_id Optional parameter: Example:
    # @return [Object] response from the API call
    def get_report_instance_file(report_id,
                                 report_instance_id,
                                 account_id: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/reports/{reportId}/instances/{reportInstanceId}/file'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'reportId' => { 'value' => report_id, 'encode' => false },
        'reportInstanceId' => { 'value' => report_instance_id, 'encode' => false }
      )
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'accountId' => account_id
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 404
        raise APIException.new(
          'A report instance matching the supplied identification' \
          ' information could not be found.',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'ReportInstanceFileResponse', String)
      )
    end

    # TODO
    # @param [Integer] report_id Required parameter: Example:
    # @param [Integer] report_instance_id Required parameter: Example:
    # @param [Integer] account_id Optional parameter: Example:
    # @return [ReportInstanceResponse] response from the API call
    def delete_report_instance(report_id,
                               report_instance_id,
                               account_id: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/{reportId}/instances/{reportInstanceId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'reportId' => { 'value' => report_id, 'encode' => false },
        'reportInstanceId' => { 'value' => report_instance_id, 'encode' => false }
      )
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'accountId' => account_id
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.delete(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'ReportInstanceResponse',
                                   ReportInstanceResponse)
      )
    end

    # Retrieve SBC settings associated with a Sip Peer
    # @param [Integer] account_id Required parameter: Example:
    # @param [Integer] site_id Required parameter: Example:
    # @param [Integer] sip_peer_id Required parameter: Example:
    # @return [SipPeerEdgeManagementProductResponse] response from the API call
    def get_sip_peer_edge_management_products(account_id,
                                              site_id,
                                              sip_peer_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/sites/{siteId}/sippeers/{sipPeerId}/products/edgemanagement'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false },
        'siteId' => { 'value' => site_id, 'encode' => false },
        'sipPeerId' => { 'value' => sip_peer_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 400
        raise APIException.new(
          'Bad Request. Possible errors in response:<ul>   <li>13563 "Sip' \
          ' Peer \'544545\' account \'12346159\' and site \'483\'' \
          ' does not exist"</li></ul>',
          _response
        )
      elsif _response.status_code == 404
        raise APIException.new(
          'Not Found - The SBC settings on Sip Peer does not exists',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'EdgeManagementResponse',
                                   SipPeerEdgeManagementProductResponse)
      )
    end

    # Update SBC setting to Sip Peer
    # @param [Integer] account_id Required parameter: Example:
    # @param [Integer] site_id Required parameter: Example:
    # @param [Integer] sip_peer_id Required parameter: Example:
    # @param [SipPeerEdgeManagementProduct] body Optional parameter: Example:
    # @return [SipPeerEdgeManagementProductResponse] response from the API call
    def update_sip_peer_edge_management_products(account_id,
                                                 site_id,
                                                 sip_peer_id,
                                                 body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/sites/{siteId}/sippeers/{sipPeerId}/products/edgemanagement'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false },
        'siteId' => { 'value' => site_id, 'encode' => false },
        'sipPeerId' => { 'value' => sip_peer_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('EdgeManagementProduct', body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 400
        raise APIException.new(
          'Bad Request. Possible errors in response:<ul>   <li>12041' \
          ' "EdgeManagement product has not been' \
          ' configured"</li></ul>',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'EdgeManagementResponse',
                                   SipPeerEdgeManagementProductResponse)
      )
    end

    # Add SBC setting to Sip Peer
    # @param [Integer] account_id Required parameter: Example:
    # @param [Integer] site_id Required parameter: Example:
    # @param [Integer] sip_peer_id Required parameter: Example:
    # @param [SipPeerEdgeManagementProduct] body Optional parameter: Example:
    # @return [SipPeerEdgeManagementProductResponse] response from the API call
    def create_sip_peer_edge_management_products(account_id,
                                                 site_id,
                                                 sip_peer_id,
                                                 body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/sites/{siteId}/sippeers/{sipPeerId}/products/edgemanagement'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false },
        'siteId' => { 'value' => site_id, 'encode' => false },
        'sipPeerId' => { 'value' => sip_peer_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('EdgeManagementProduct', body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 400
        raise APIException.new(
          'Bad Request. Possible errors in response:<ul>   <li>12041' \
          ' "EdgeManagement product has not been' \
          ' configured"</li></ul>',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'EdgeManagementResponse',
                                   SipPeerEdgeManagementProductResponse)
      )
    end

    # Delete SBC settings from Sip Peer
    # @param [Integer] account_id Required parameter: Example:
    # @param [Integer] site_id Required parameter: Example:
    # @param [Integer] sip_peer_id Required parameter: Example:
    # @return [SipPeerEdgeManagementProductResponse] response from the API call
    def delete_sip_peer_edge_management_products(account_id,
                                                 site_id,
                                                 sip_peer_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/sites/{siteId}/sippeers/{sipPeerId}/products/edgemanagement'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false },
        'siteId' => { 'value' => site_id, 'encode' => false },
        'sipPeerId' => { 'value' => sip_peer_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.delete(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 400
        raise APIException.new(
          'Bad Request. Possible errors in response:<ul>   <li>13563 "Sip' \
          ' Peer \'544545\' account \'12346159\' and site \'483\'' \
          ' does not exist"</li></ul>',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'EdgeManagementResponse',
                                   SipPeerEdgeManagementProductResponse)
      )
    end

    # post sip peer gateway IP or subnet
    # @param [Integer] account_id Required parameter: Example:
    # @param [Integer] site_id Required parameter: Example:
    # @param [Integer] sip_peer_id Required parameter: Example:
    # @param [SipPeerGatewayIp] body Optional parameter: Example:
    # @return [SipPeerGatewayIpResponse] response from the API call
    def create_sip_peer_termination_gateway_2(account_id,
                                              site_id,
                                              sip_peer_id,
                                              body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/sites/{siteId}/sippeers/{sipPeerId}/products/termination/hosts'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false },
        'siteId' => { 'value' => site_id, 'encode' => false },
        'sipPeerId' => { 'value' => sip_peer_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('SipPeerGatewayIp', body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'SipPeerGatewayIpResponse',
                                   SipPeerGatewayIpResponse)
      )
    end

    # delete a sip peer gateway ip
    # @param [Integer] account_id Required parameter: Example:
    # @param [Integer] site_id Required parameter: Example:
    # @param [Integer] sip_peer_id Required parameter: Example:
    # @param [Long] gateway_id Required parameter: Example:
    # @return [SipPeerGatewayIpResponse] response from the API call
    def delete_sip_peer_termination_gateway(account_id,
                                            site_id,
                                            sip_peer_id,
                                            gateway_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/sites/{siteId}/sippeers/{sipPeerId}/products/termination/hosts/{gatewayId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false },
        'siteId' => { 'value' => site_id, 'encode' => false },
        'sipPeerId' => { 'value' => sip_peer_id, 'encode' => false },
        'gatewayId' => { 'value' => gateway_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.delete(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 404
        raise APIException.new(
          'sip peer gateway ip was not found',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'SipPeerGatewayIpResponse',
                                   SipPeerGatewayIpResponse)
      )
    end

    # post gateway attribute
    # @param [Integer] account_id Required parameter: Example:
    # @param [Integer] site_id Required parameter: Example:
    # @param [Long] gateway_id Required parameter: Example:
    # @param [String] sip_peer_id Required parameter: Example:
    # @param [TerminationAttribute] body Optional parameter: Example:
    # @return [SipPeerGatewayAttributeResponse] response from the API call
    def create_sip_peer_termination_gateway_attribute(account_id,
                                                      site_id,
                                                      gateway_id,
                                                      sip_peer_id,
                                                      body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/sites/{siteId}/sippeers/{sipPeerId}/products/termination/hosts/{gatewayId}/settings'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false },
        'siteId' => { 'value' => site_id, 'encode' => false },
        'gatewayId' => { 'value' => gateway_id, 'encode' => false },
        'sipPeerId' => { 'value' => sip_peer_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('TerminationAttribute', body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'SipPeerGatewayAttributeResponse',
                                   SipPeerGatewayAttributeResponse)
      )
    end

    # update gateway attribute
    # @param [Integer] account_id Required parameter: Example:
    # @param [Integer] site_id Required parameter: Example:
    # @param [Long] gateway_id Required parameter: Example:
    # @param [Long] attribute_id Required parameter: Example:
    # @param [String] sip_peer_id Required parameter: Example:
    # @param [TerminationAttribute] body Optional parameter: Example:
    # @return [SipPeerGatewayAttributeResponse] response from the API call
    def update_sip_peer_termination_gateway_attribute(account_id,
                                                      site_id,
                                                      gateway_id,
                                                      attribute_id,
                                                      sip_peer_id,
                                                      body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/sites/{siteId}/sippeers/{sipPeerId}/products/termination/hosts/{gatewayId}/settings/{attributeId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false },
        'siteId' => { 'value' => site_id, 'encode' => false },
        'gatewayId' => { 'value' => gateway_id, 'encode' => false },
        'attributeId' => { 'value' => attribute_id, 'encode' => false },
        'sipPeerId' => { 'value' => sip_peer_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('TerminationAttribute', body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'SipPeerGatewayAttributeResponse',
                                   SipPeerGatewayAttributeResponse)
      )
    end

    # delete gateway attribute
    # @param [Integer] account_id Required parameter: Example:
    # @param [Integer] site_id Required parameter: Example:
    # @param [Long] gateway_id Required parameter: Example:
    # @param [Long] attribute_id Required parameter: Example:
    # @param [String] sip_peer_id Required parameter: Example:
    # @return [SipPeerGatewayAttributeResponse] response from the API call
    def delete_sip_peer_termination_gateway_attribute(account_id,
                                                      site_id,
                                                      gateway_id,
                                                      attribute_id,
                                                      sip_peer_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/accounts/{accountId}/sites/{siteId}/sippeers/{sipPeerId}/products/termination/hosts/{gatewayId}/settings/{attributeId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false },
        'siteId' => { 'value' => site_id, 'encode' => false },
        'gatewayId' => { 'value' => gateway_id, 'encode' => false },
        'attributeId' => { 'value' => attribute_id, 'encode' => false },
        'sipPeerId' => { 'value' => sip_peer_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.delete(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 404
        raise APIException.new(
          'gateway attribute was not found',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'SipPeerGatewayAttributeResponse',
                                   SipPeerGatewayAttributeResponse)
      )
    end

    # TODO
    # @param [Long] account_id Required parameter: Example:
    # @param [Long] product_id Required parameter: Example:
    # @return [TerminationCustomerProductAssignmentResponse] response from the API call
    def get_assigned_product_1(account_id,
                               product_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/account/{accountId}/product/{productId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false },
        'productId' => { 'value' => product_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(
        _response.raw_body,
        'TerminationCustomerProductAssignmentResponse',
        TerminationCustomerProductAssignmentResponse
      )
      )
    end

    # TODO
    # @param [Long] account_id Required parameter: Example:
    # @param [Long] product_id Required parameter: Example:
    # @return [TerminationCustomerProductAssignmentResponse] response from the API call
    def delete_assigned_product_1(account_id,
                                  product_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/account/{accountId}/product/{productId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false },
        'productId' => { 'value' => product_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.delete(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(
        _response.raw_body,
        'TerminationCustomerProductAssignmentResponse',
        TerminationCustomerProductAssignmentResponse
      )
      )
    end

    # TODO
    # @param [Long] account_id Required parameter: Example:
    # @return [TerminationCustomerProductAssignmentsResponse] response from the API call
    def get_assigned_products(account_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/account/{accountId}/product'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(
        _response.raw_body,
        'TerminationCustomerProductAssignmentsResponse',
        TerminationCustomerProductAssignmentsResponse
      )
      )
    end

    # TODO
    # @param [Long] account_id Required parameter: Example:
    # @param [TerminationProductAssignment] body Optional parameter: Example:
    # @return [TerminationCustomerProductAssignmentResponse] response from the API call
    def create_assign_product_1(account_id,
                                body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/account/{accountId}/product'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml(
          'TerminationProductAssignment', body
        )
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(
        _response.raw_body,
        'TerminationCustomerProductAssignmentResponse',
        TerminationCustomerProductAssignmentResponse
      )
      )
    end

    # TODO
    # @param [Long] account_id Required parameter: Example:
    # @return [TerminationAttributesResponse] response from the API call
    def get_customer_attributes_1(account_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/account/{accountId}/attribute'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationAttributesResponse',
                                   TerminationAttributesResponse)
      )
    end

    # TODO
    # @param [Long] account_id Required parameter: Example:
    # @param [TerminationAttribute] body Optional parameter: Example:
    # @return [TerminationAttributeResponse] response from the API call
    def post_customer_attribute_1(account_id,
                                  body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/account/{accountId}/attribute'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('TerminationAttribute', body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationAttributeResponse',
                                   TerminationAttributeResponse)
      )
    end

    # TODO
    # @param [Long] account_id Required parameter: Example:
    # @param [Long] attribute_id Required parameter: Example:
    # @return [TerminationAttributeResponse] response from the API call
    def get_customer_attribute_1(account_id,
                                 attribute_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/account/{accountId}/attribute/{attributeId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false },
        'attributeId' => { 'value' => attribute_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationAttributeResponse',
                                   TerminationAttributeResponse)
      )
    end

    # TODO
    # @param [Long] account_id Required parameter: Example:
    # @param [Long] attribute_id Required parameter: Example:
    # @param [TerminationAttribute] body Optional parameter: Example:
    # @return [TerminationAttributeResponse] response from the API call
    def put_customer_attribute_1(account_id,
                                 attribute_id,
                                 body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/account/{accountId}/attribute/{attributeId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false },
        'attributeId' => { 'value' => attribute_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('TerminationAttribute', body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationAttributeResponse',
                                   TerminationAttributeResponse)
      )
    end

    # TODO
    # @param [Long] account_id Required parameter: Example:
    # @param [Long] attribute_id Required parameter: Example:
    # @return [TerminationAttributeResponse] response from the API call
    def delete_customer_attribute_1(account_id,
                                    attribute_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/account/{accountId}/attribute/{attributeId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false },
        'attributeId' => { 'value' => attribute_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.delete(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationAttributeResponse',
                                   TerminationAttributeResponse)
      )
    end

    # Get all products from term services.
    # @return [TerminationProductsResponse] response from the API call
    def get_termination_products
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/product'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationProductsResponse',
                                   TerminationProductsResponse)
      )
    end

    # create product
    # @param [TerminationProduct] body Optional parameter: Example:
    # @return [TerminationProductResponse] response from the API call
    def post_termination_product(body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/product'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('TerminationProduct', body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 400
        raise APIException.new(
          'required fields are absent, attribute list is not empty',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationProductResponse',
                                   TerminationProductResponse)
      )
    end

    # TODO
    # @param [Long] account_id Required parameter: Example:
    # @param [Long] gateway_id Required parameter: Example:
    # @return [TerminationGatewayAttributesResponse] response from the API call
    def get_gateway_attributes(account_id,
                               gateway_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/account/{accountId}/gateway/{gatewayId}/attribute'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false },
        'gatewayId' => { 'value' => gateway_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationGatewayAttributesResponse',
                                   TerminationGatewayAttributesResponse)
      )
    end

    # TODO
    # @param [Long] account_id Required parameter: Example:
    # @param [Long] gateway_id Required parameter: Example:
    # @param [TerminationAttribute] body Optional parameter: Example:
    # @return [TerminationGatewayAttributeResponse] response from the API call
    def post_gateway_attribute(account_id,
                               gateway_id,
                               body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/account/{accountId}/gateway/{gatewayId}/attribute'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false },
        'gatewayId' => { 'value' => gateway_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('TerminationAttribute', body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationGatewayAttributeResponse',
                                   TerminationGatewayAttributeResponse)
      )
    end

    # TODO
    # @param [Long] account_id Required parameter: Example:
    # @param [Long] gateway_id Required parameter: Example:
    # @param [Long] attribute_id Required parameter: Example:
    # @return [TerminationGatewayAttributeResponse] response from the API call
    def get_gateway_attribute(account_id,
                              gateway_id,
                              attribute_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/account/{accountId}/gateway/{gatewayId}/attribute/{attributeId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false },
        'gatewayId' => { 'value' => gateway_id, 'encode' => false },
        'attributeId' => { 'value' => attribute_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationGatewayAttributeResponse',
                                   TerminationGatewayAttributeResponse)
      )
    end

    # TODO
    # @param [Long] account_id Required parameter: Example:
    # @param [Long] gateway_id Required parameter: Example:
    # @param [Long] attribute_id Required parameter: Example:
    # @param [TerminationAttribute] body Optional parameter: Example:
    # @return [TerminationGatewayAttributeResponse] response from the API call
    def put_gateway_attribute(account_id,
                              gateway_id,
                              attribute_id,
                              body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/account/{accountId}/gateway/{gatewayId}/attribute/{attributeId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false },
        'gatewayId' => { 'value' => gateway_id, 'encode' => false },
        'attributeId' => { 'value' => attribute_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('TerminationAttribute', body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationGatewayAttributeResponse',
                                   TerminationGatewayAttributeResponse)
      )
    end

    # TODO
    # @param [Long] account_id Required parameter: Example:
    # @param [Long] gateway_id Required parameter: Example:
    # @param [Long] attribute_id Required parameter: Example:
    # @return [TerminationGatewayAttributeResponse] response from the API call
    def delete_gateway_attribute(account_id,
                                 gateway_id,
                                 attribute_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/account/{accountId}/gateway/{gatewayId}/attribute/{attributeId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false },
        'gatewayId' => { 'value' => gateway_id, 'encode' => false },
        'attributeId' => { 'value' => attribute_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.delete(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationGatewayAttributeResponse',
                                   TerminationGatewayAttributeResponse)
      )
    end

    # This API allow get a list of all available carrier names from Roger.
    # @return [TerminationCarriersResponse] response from the API call
    def get_termination_carriers
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/carrier'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 500
        raise APIException.new(
          'Server Error',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationCarriersResponse',
                                   TerminationCarriersResponse)
      )
    end

    # TODO
    # @return [TerminationCarriersResponse] response from the API call
    def get_termination_toll_free_carriers
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/tollFreeCarriers'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationCarriersResponse',
                                   TerminationCarriersResponse)
      )
    end

    # TODO
    # @return [AccountsResponse] response from the API call
    def get_termination_accounts
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/account'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'AccountsResponse',
                                   AccountsResponse)
      )
    end

    # TODO
    # @param [TerminationAccount] body Optional parameter: Example:
    # @return [TerminationAccountResponse] response from the API call
    def post_termination_account(body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/account'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('TerminationAccount', body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationAccountResponse',
                                   TerminationAccountResponse)
      )
    end

    # TODO
    # @param [Long] account_id Required parameter: Example:
    # @return [TerminationAccountResponse] response from the API call
    def get_termination_account(account_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/account/{accountId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationAccountResponse',
                                   TerminationAccountResponse)
      )
    end

    # TODO
    # @param [Long] account_id Required parameter: Example:
    # @return [TerminationProductResponse] response from the API call
    def delete_termination_account(account_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/account/{accountId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.delete(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationProductResponse',
                                   TerminationProductResponse)
      )
    end

    # Get termination product by id.
    # @param [Long] product_id Required parameter: Example:
    # @param [Boolean] to_assign Optional parameter: Example:
    # @return [TerminationProductResponse] response from the API call
    def get_termination_product(product_id,
                                to_assign: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/product/{productId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'productId' => { 'value' => product_id, 'encode' => false }
      )
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'toAssign' => to_assign
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 404
        raise APIException.new(
          'Could not find product by id.',
          _response
        )
      elsif _response.status_code == 500
        raise APIException.new(
          'System error.',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationProductResponse',
                                   TerminationProductResponse)
      )
    end

    # Delete termination product by id.
    # @param [Long] product_id Required parameter: Example:
    # @return [TerminationProductResponse] response from the API call
    def delete_termination_product(product_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/product/{productId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'productId' => { 'value' => product_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.delete(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 404
        raise APIException.new(
          'Could not find product by id.',
          _response
        )
      elsif _response.status_code == 500
        raise APIException.new(
          'System error.',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationProductResponse',
                                   TerminationProductResponse)
      )
    end

    # Get all product attributes
    # @param [Long] product_id Required parameter: Example:
    # @return [TerminationProductAttributesResponse] response from the API call
    def get_termination_product_attributes(product_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/product/{productId}/attribute'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'productId' => { 'value' => product_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationProductAttributesResponse',
                                   TerminationProductAttributesResponse)
      )
    end

    # create product attribute
    # @param [Long] product_id Required parameter: Example:
    # @param [TerminationAttribute] body Optional parameter: Example:
    # @return [TerminationProductAttributeResponse] response from the API call
    def post_termination_product_attribute(product_id,
                                           body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/product/{productId}/attribute'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'productId' => { 'value' => product_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('TerminationAttribute', body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationProductAttributeResponse',
                                   TerminationProductAttributeResponse)
      )
    end

    # Get all product attribute by id
    # @param [Long] product_id Required parameter: Example:
    # @param [Long] attribute_id Required parameter: Example:
    # @return [TerminationProductAttributeResponse] response from the API call
    def get_termination_product_attribute(product_id,
                                          attribute_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/product/{productId}/attribute/{attributeId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'productId' => { 'value' => product_id, 'encode' => false },
        'attributeId' => { 'value' => attribute_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationProductAttributeResponse',
                                   TerminationProductAttributeResponse)
      )
    end

    # TODO
    # @param [Long] product_id Required parameter: Example:
    # @param [Long] attribute_id Required parameter: Example:
    # @return [TerminationProductAttributeResponse] response from the API call
    def delete_termination_product_attribute(product_id,
                                             attribute_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/product/{productId}/attribute/{attributeId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'productId' => { 'value' => product_id, 'encode' => false },
        'attributeId' => { 'value' => attribute_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.delete(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationProductAttributeResponse',
                                   TerminationProductAttributeResponse)
      )
    end

    # Get rate deck metadata by id.
    # @param [Long] deck_id Required parameter: Example:
    # @return [TerminationRateDeckMetadataResponse] response from the API call
    def get_rate_decks_metadata(deck_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/ratedeck/{deckId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'deckId' => { 'value' => deck_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationRateDeckMetadataResponse',
                                   TerminationRateDeckMetadataResponse)
      )
    end

    # Delete rate deck by id.
    # @param [Long] deck_id Required parameter: Example:
    # @return [TerminationRateDeckResponse] response from the API call
    def delete_rate_deck(deck_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/ratedeck/{deckId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'deckId' => { 'value' => deck_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.delete(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationRateDeckResponse',
                                   TerminationRateDeckResponse)
      )
    end

    # Get all rate decks by type
    # @param [DeckTypeEnum] deck_type Required parameter: Example:
    # @return [TerminationRateDeckMetadataByTypeResponse] response from the API call
    def get_rate_decks_metadata_1(deck_type)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/ratedeck/type/{deckType}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'deckType' => { 'value' => deck_type, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationRateDeckMetadataByTypeResponse',
                                   TerminationRateDeckMetadataByTypeResponse)
      )
    end

    # Get all rate deck metadata
    # @return [TerminationRateDeckMetadatasResponse] response from the API call
    def get_rate_decks_metadata_2
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/ratedeck'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationRateDeckMetadatasResponse',
                                   TerminationRateDeckMetadatasResponse)
      )
    end

    # TODO
    # @param [Long] deck_id Required parameter: Example:
    # @param [FiletypeEnum] filetype Optional parameter: Example:
    # @return [Object] response from the API call
    def get_download_rate_deck(deck_id,
                               filetype: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/ratedeck/{deckId}/file'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'deckId' => { 'value' => deck_id, 'encode' => false }
      )
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'filetype' => filetype
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'response', String)
      )
    end

    # Upload rate deck file
    # @param [String] file_name Required parameter: Example:
    # @param [String] rate_deck_name Required parameter: Example:
    # @param [Object] body Optional parameter: Example:
    # @return [TerminationRateDeckResponse] response from the API call
    def post_rate_deck(file_name,
                       rate_deck_name,
                       body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/ratedeck/file/{fileName}/{rateDeckName}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'fileName' => { 'value' => file_name, 'encode' => false },
        'rateDeckName' => { 'value' => rate_deck_name, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationRateDeckResponse',
                                   TerminationRateDeckResponse)
      )
    end

    # Get all rate deck assignments
    # @param [Long] assignment_id Required parameter: Example:
    # @return [TerminationRateDeckAssignmentUtilityResponse] response from the API call
    def get_rate_deck_assignment(assignment_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/ratedeckassignment/{assignmentId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'assignmentId' => { 'value' => assignment_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(
        _response.raw_body,
        'TerminationRateDeckAssignmentUtilityResponse',
        TerminationRateDeckAssignmentUtilityResponse
      )
      )
    end

    # Get termination product by id.
    # @param [Long] account_id Required parameter: Example:
    # @param [Long] assignment_id Required parameter: Example:
    # @return [TerminationRateDeckAssignmentResponse] response from the API call
    def get_rate_deck_assignment_for_account(account_id,
                                             assignment_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/ratedeckassignment/{assignmentId}/account/{accountId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false },
        'assignmentId' => { 'value' => assignment_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationRateDeckAssignmentResponse',
                                   TerminationRateDeckAssignmentResponse)
      )
    end

    # Unassign rate deck by assignment id.
    # @param [Long] account_id Required parameter: Example:
    # @param [Long] assignment_id Required parameter: Example:
    # @return [TerminationRateDeckAssignmentResponse] response from the API call
    def delete_rate_deck_assignment_for_account(account_id,
                                                assignment_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/ratedeckassignment/{assignmentId}/account/{accountId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false },
        'assignmentId' => { 'value' => assignment_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.delete(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 404
        raise APIException.new(
          'Could not find assignment by id.',
          _response
        )
      elsif _response.status_code == 500
        raise APIException.new(
          'System error.',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationRateDeckAssignmentResponse',
                                   TerminationRateDeckAssignmentResponse)
      )
    end

    # Get all rate deck assignments
    # @return [TerminationRateDeckAssignmentsUtilityResponse] response from the API call
    def get_all_rate_deck_assignments
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/ratedeckassignment'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(
        _response.raw_body,
        'TerminationRateDeckAssignmentsUtilityResponse',
        TerminationRateDeckAssignmentsUtilityResponse
      )
      )
    end

    # assign rate deck
    # @param [TerminationRateDeckAssignment] body Optional parameter: Example:
    # @return [TerminationRateDeckAssignmentResponse] response from the API call
    def post_rate_deck_assignment_for_account(body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/ratedeckassignment'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml(
          'TerminationRateDeckAssignment', body
        )
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationRateDeckAssignmentResponse',
                                   TerminationRateDeckAssignmentResponse)
      )
    end

    # Get all rate deck assignments
    # @param [Long] account_id Required parameter: Example:
    # @return [TerminationRateDeckAssignmentsResponse] response from the API call
    def get_all_rate_deck_assignments_for_account(account_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/ratedeckassignment/account/{accountId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationRateDeckAssignmentsResponse',
                                   TerminationRateDeckAssignmentsResponse)
      )
    end

    # get all attribute metadata
    # @return [TerminationAttributeMetadatasResponse] response from the API call
    def get_termination_attribute_metadatas
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/attributes'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationAttributeMetadatasResponse',
                                   TerminationAttributeMetadatasResponse)
      )
    end

    # post attribute metadata
    # @param [TerminationAttributeMetadata] body Optional parameter: Example:
    # @return [TerminationAttributeMetadataResponse] response from the API call
    def post_termination_attribute_metadata(body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/attributes'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml(
          'TerminationAttributeMetadata', body
        )
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationAttributeMetadataResponse',
                                   TerminationAttributeMetadataResponse)
      )
    end

    # get all attributes by origin
    # @param [OriginEnum] origin Optional parameter: Example:
    # @return [TerminationAttributeMetadataByOriginResponse] response from the API call
    def get_termination_attribute_metadatas_by_origin(origin: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/attributes/origin'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'origin' => origin
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(
        _response.raw_body,
        'TerminationAttributeMetadataByOriginResponse',
        TerminationAttributeMetadataByOriginResponse
      )
      )
    end

    # get all attributes by type
    # @param [String] type Optional parameter: Example:
    # @return [TerminationAttributeMetadataByNameResponse] response from the API call
    def get_termination_attribute_metadatas_by_type(type: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/attributes/type'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'type' => type
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationAttributeMetadataByNameResponse',
                                   TerminationAttributeMetadataByNameResponse)
      )
    end

    # get account by id
    # @param [Long] id Required parameter: Example:
    # @return [TerminationAttributeMetadataResponse] response from the API call
    def get_termination_attribute_metadata_by_id(id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/attributes/{id}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'id' => { 'value' => id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationAttributeMetadataResponse',
                                   TerminationAttributeMetadataResponse)
      )
    end

    # TODO
    # @param [Long] id Required parameter: Example:
    # @param [TerminationAttributeMetadata] body Optional parameter: Example:
    # @return [TerminationAttributeMetadataResponse] response from the API call
    def put_termination_attribute_metadata(id,
                                           body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/attributes/{id}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'id' => { 'value' => id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml(
          'TerminationAttributeMetadata', body
        )
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationAttributeMetadataResponse',
                                   TerminationAttributeMetadataResponse)
      )
    end

    # Get list of named Carrier Masks from Roger
    # @return [TerminationCarrierMasksResponse] response from the API call
    def get_carrier_masks
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/carriermask'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 500
        raise APIException.new(
          'Server Error',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationCarrierMasksResponse',
                                   TerminationCarrierMasksResponse)
      )
    end

    # Update carrier mask
    # @param [TerminationCarrierMask] body Optional parameter: Example:
    # @return [TerminationCarrierMaskResponse] response from the API call
    def update_carrier_mask(body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/carriermask'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('TerminationCarrierMask',
                                                  body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationCarrierMaskResponse',
                                   TerminationCarrierMaskResponse)
      )
    end

    # Create a carrier mask
    # @param [TerminationCarrierMask] body Optional parameter: Example:
    # @return [TerminationCarrierMaskResponse] response from the API call
    def create_carrier_mask(body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/carriermask'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('TerminationCarrierMask',
                                                  body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 500
        raise APIException.new(
          'It may happen in many cases, e.g. such carrier mask name already' \
          ' exists',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationCarrierMaskResponse',
                                   TerminationCarrierMaskResponse)
      )
    end

    # TODO
    # @param [Long] mask_id Required parameter: Example:
    # @return [TerminationCarrierMaskResponse] response from the API call
    def get_carrier_mask(mask_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/carriermask/{maskId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'maskId' => { 'value' => mask_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationCarrierMaskResponse',
                                   TerminationCarrierMaskResponse)
      )
    end

    # Delete carrier mask by id
    # @param [Long] mask_id Required parameter: Example:
    # @return [TerminationCarrierMaskResponse] response from the API call
    def delete_carrier_mask(mask_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/carriermask/{maskId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'maskId' => { 'value' => mask_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.delete(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationCarrierMaskResponse',
                                   TerminationCarrierMaskResponse)
      )
    end

    # Get list of carrier mask metadata
    # @return [TerminationCarrierMaskMetadatasResponse] response from the API call
    def get_carrier_mask_metadatas
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/carriermask/metadata'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationCarrierMaskMetadatasResponse',
                                   TerminationCarrierMaskMetadatasResponse)
      )
    end

    # Get carrier mask by specified id
    # @param [Long] mask_id Required parameter: Example:
    # @return [TerminationCarrierMaskMetadataResponse] response from the API call
    def get_carrier_mask_metadata(mask_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/carriermask/metadata/{maskId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'maskId' => { 'value' => mask_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationCarrierMaskMetadataResponse',
                                   TerminationCarrierMaskMetadataResponse)
      )
    end

    # Get carrier mask by specified carrier mask name
    # @param [String] query_name Optional parameter: Example:
    # @return [TerminationCarrierMaskMetadataSearchResponse] response from the API call
    def search_carrier_mask_metadata(query_name: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/carriermask/metadata/search'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'query_name' => query_name
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(
        _response.raw_body,
        'TerminationCarrierMaskMetadataSearchResponse',
        TerminationCarrierMaskMetadataSearchResponse
      )
      )
    end

    # Upload carrier mask file
    # @param [String] file_name Required parameter: Example:
    # @param [String] carrier_mask_name Required parameter: Example:
    # @param [String] carrier_mask_type Required parameter: Example:
    # @param [Object] body Optional parameter: Example:
    # @return [CarrierMaskFileResponse] response from the API call
    def post_carrier_mask_file(file_name,
                               carrier_mask_name,
                               carrier_mask_type,
                               body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/carriermask/file/{fileName}/{carrierMaskName}/{carrierMaskType}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'fileName' => { 'value' => file_name, 'encode' => false },
        'carrierMaskName' => { 'value' => carrier_mask_name, 'encode' => false },
        'carrierMaskType' => { 'value' => carrier_mask_type, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'CarrierMaskFileResponse',
                                   CarrierMaskFileResponse)
      )
    end

    # Get list of named Routing Exceptions from Roger
    # @return [TerminationRoutingExceptionsResponse] response from the API call
    def get_routing_exceptions
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/routingexception'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 500
        raise APIException.new(
          'Server Error',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationRoutingExceptionsResponse',
                                   TerminationRoutingExceptionsResponse)
      )
    end

    # update routing exception
    # @param [TerminationRoutingException] body Optional parameter: Example:
    # @return [TerminationRoutingExceptionResponse] response from the API call
    def update_routing_exception(body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/routingexception'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('TerminationRoutingException',
                                                  body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationRoutingExceptionResponse',
                                   TerminationRoutingExceptionResponse)
      )
    end

    # Create a routing exception
    # @param [TerminationRoutingException] body Optional parameter: Example:
    # @return [TerminationRoutingExceptionResponse] response from the API call
    def create_routing_exception(body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/routingexception'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('TerminationRoutingException',
                                                  body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _response.status_code == 500
        raise APIException.new(
          'It may happen in many cases, e.g. such routing exception name' \
          ' already exists',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationRoutingExceptionResponse',
                                   TerminationRoutingExceptionResponse)
      )
    end

    # TODO
    # @param [Long] id Required parameter: Example:
    # @return [TerminationRoutingExceptionResponse] response from the API call
    def get_routing_exception(id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/routingexception/{id}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'id' => { 'value' => id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationRoutingExceptionResponse',
                                   TerminationRoutingExceptionResponse)
      )
    end

    # delete routing exception by id
    # @param [Long] id Required parameter: Example:
    # @return [TerminationRoutingExceptionResponse] response from the API call
    def delete_routing_exception(id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/routingexception/{id}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'id' => { 'value' => id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.delete(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationRoutingExceptionResponse',
                                   TerminationRoutingExceptionResponse)
      )
    end

    # TODO
    # @param [Long] id Required parameter: Example:
    # @return [Object] response from the API call
    def get_routing_exception_file(id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/routingexception/{id}/file'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'id' => { 'value' => id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'response', String)
      )
    end

    # Upload routing exception file
    # @param [String] file_name Required parameter: Example:
    # @param [String] routing_exception_name Required parameter: Example:
    # @param [Object] body Optional parameter: Example:
    # @return [TerminationRoutingExceptionFileResponse] response from the API call
    def post_routing_exception_file(file_name,
                                    routing_exception_name,
                                    body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/routingexception/file/{fileName}/{routingExceptionName}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'fileName' => { 'value' => file_name, 'encode' => false },
        'routingExceptionName' => { 'value' => routing_exception_name, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationRoutingExceptionFileResponse',
                                   TerminationRoutingExceptionFileResponse)
      )
    end

    # TODO
    # @param [Long] id Required parameter: Example:
    # @param [String] file_name Required parameter: Example:
    # @param [String] routing_exception_name Required parameter: Example:
    # @param [Object] body Optional parameter: Example:
    # @return [TerminationRoutingExceptionFileResponse] response from the API call
    def update_post_routing_exception_file_1(id,
                                             file_name,
                                             routing_exception_name,
                                             body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/routingexception/{id}/file/{fileName}/{routingExceptionName}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'id' => { 'value' => id, 'encode' => false },
        'fileName' => { 'value' => file_name, 'encode' => false },
        'routingExceptionName' => { 'value' => routing_exception_name, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationRoutingExceptionFileResponse',
                                   TerminationRoutingExceptionFileResponse)
      )
    end

    # TODO
    # @return [TerminationRoutingExceptionsMetadataResponse] response from the API call
    def get_routing_exceptions_metadata
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/routingexception/metadata'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(
        _response.raw_body,
        'TerminationRoutingExceptionsMetadataResponse',
        TerminationRoutingExceptionsMetadataResponse
      )
      )
    end

    # TODO
    # @param [Long] id Required parameter: Example:
    # @return [TerminationRoutingExceptionMetadataResponse] response from the API call
    def get_routing_exception_metadata(id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/routingexception/metadata/{id}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'id' => { 'value' => id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(
        _response.raw_body,
        'TerminationRoutingExceptionMetadataResponse',
        TerminationRoutingExceptionMetadataResponse
      )
      )
    end

    # TODO
    # @param [String] name Optional parameter: Example:
    # @return [TerminationRoutingExceptionsMetadataByNameResponse] response from the API call
    def get_routing_exceptions_metadata_by_name_pattern(name: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/routingexception/metadata/search'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'name' => name
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(
        _response.raw_body,
        'TerminationRoutingExceptionsMetadataByNameResponse',
        TerminationRoutingExceptionsMetadataByNameResponse
      )
      )
    end

    # TODO
    # @param [Long] account_id Required parameter: Example:
    # @param [Long] gateway_id Required parameter: Example:
    # @return [TerminationGatewayResponse] response from the API call
    def get_gateway(account_id,
                    gateway_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/account/{accountId}/gateway/{gatewayId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false },
        'gatewayId' => { 'value' => gateway_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationGatewayResponse',
                                   TerminationGatewayResponse)
      )
    end

    # TODO
    # @param [Long] account_id Required parameter: Example:
    # @param [Long] gateway_id Required parameter: Example:
    # @return [TerminationGatewayResponse] response from the API call
    def delete_gateway(account_id,
                       gateway_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/account/{accountId}/gateway/{gatewayId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false },
        'gatewayId' => { 'value' => gateway_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.delete(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationGatewayResponse',
                                   TerminationGatewayResponse)
      )
    end

    # TODO
    # @param [Long] account_id Required parameter: Example:
    # @return [TerminationGatewaysResponse] response from the API call
    def get_gateways(account_id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/account/{accountId}/gateway'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationGatewaysResponse',
                                   TerminationGatewaysResponse)
      )
    end

    # TODO
    # @param [Long] account_id Required parameter: Example:
    # @param [TerminationGateway] body Optional parameter: Example:
    # @return [TerminationGatewayResponse] response from the API call
    def post_gateway(account_id,
                     body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/account/{accountId}/gateway'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'accountId' => { 'value' => account_id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml',
        'content-type' => 'application/xml; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: XmlUtilities.serialize_to_xml('TerminationGateway', body)
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body,
                                   'TerminationGatewayResponse',
                                   TerminationGatewayResponse)
      )
    end

    # TODO
    # @param [Long] id Required parameter: Example:
    # @return [Object] response from the API call
    def get_file_1(id)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::DASHBOARDDEFAULT)
      _query_builder << '/carriermask/{id}/file'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'id' => { 'value' => id, 'encode' => false }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/xml'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      DashboardBasicAuth.apply(config, _request)
      _response = execute_request(_request)
      validate_response(_response)

      # Return appropriate response type.
      ApiResponse.new(
        _response,
        data: XmlUtilities.deserialize_xml(_response.raw_body, 'response', String)
      )
    end
  end
end
end
