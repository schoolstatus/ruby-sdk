# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # TerminationRoutingExceptionFile Model.
  class TerminationRoutingExceptionFile < BaseModel
    # TODO: Write general description for this method
    # @return [Long]
    attr_accessor :id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :routing_exception_name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :file_name

    # TODO: Write general description for this method
    # @return [List of String]
    attr_accessor :file_bytes

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['routing_exception_name'] = 'routingExceptionName'
      @_hash['file_name'] = 'fileName'
      @_hash['file_bytes'] = 'fileBytes'
      @_hash
    end

    def initialize(id = nil,
                   routing_exception_name = nil,
                   file_name = nil,
                   file_bytes = nil)
      @id = id
      @routing_exception_name = routing_exception_name
      @file_name = file_name
      @file_bytes = file_bytes
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash['id']
      routing_exception_name = hash['routingExceptionName']
      file_name = hash['fileName']
      file_bytes = hash['fileBytes']

      # Create object from extracted values.
      TerminationRoutingExceptionFile.new(id,
                                          routing_exception_name,
                                          file_name,
                                          file_bytes)
    end

    def self.from_element(root)
      id = XmlUtilities.from_element(root, 'id', Integer)
      routing_exception_name = XmlUtilities.from_element(root,
                                                         'routingExceptionName',
                                                         String)
      file_name = XmlUtilities.from_element(root, 'fileName', String)
      file_bytes = XmlUtilities.from_element_to_array(root, 'fileBytes', String)

      new(id,
          routing_exception_name,
          file_name,
          file_bytes)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'id', id)
      XmlUtilities.add_as_subelement(doc, root, 'routingExceptionName',
                                     routing_exception_name)
      XmlUtilities.add_as_subelement(doc, root, 'fileName', file_name)
      XmlUtilities.add_array_as_subelement(doc, root, 'fileBytes', file_bytes)

      root
    end
  end
end
