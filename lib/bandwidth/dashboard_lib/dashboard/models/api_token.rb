# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # ApiToken Model.
  class ApiToken < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :token_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :secret

    # TODO: Write general description for this method
    # @return [TokenScope]
    attr_accessor :token_scope

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['token_id'] = 'tokenId'
      @_hash['secret'] = 'secret'
      @_hash['token_scope'] = 'tokenScope'
      @_hash
    end

    def initialize(token_id = nil,
                   secret = nil,
                   token_scope = nil)
      @token_id = token_id
      @secret = secret
      @token_scope = token_scope
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      token_id = hash['tokenId']
      secret = hash['secret']
      token_scope = TokenScope.from_hash(hash['tokenScope']) if
        hash['tokenScope']

      # Create object from extracted values.
      ApiToken.new(token_id,
                   secret,
                   token_scope)
    end

    def self.from_element(root)
      token_id = XmlUtilities.from_element(root, 'TokenId', String)
      secret = XmlUtilities.from_element(root, 'Secret', String)
      token_scope = XmlUtilities.from_element(root, 'TokenScope', TokenScope)

      new(token_id,
          secret,
          token_scope)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'TokenId', token_id)
      XmlUtilities.add_as_subelement(doc, root, 'Secret', secret)
      XmlUtilities.add_as_subelement(doc, root, 'TokenScope', token_scope)

      root
    end
  end
end
