# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # E911GeocodeAddress Model.
  class E911GeocodeAddress < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :address_line1

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :house_num

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :house_num_suffix

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :prefix_directional

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :street_name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :street_suffix

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :post_directional

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :city

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :state

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :zip

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :zip_plus_four

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :country

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :location

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['address_line1'] = 'addressLine1'
      @_hash['house_num'] = 'houseNum'
      @_hash['house_num_suffix'] = 'houseNumSuffix'
      @_hash['prefix_directional'] = 'prefixDirectional'
      @_hash['street_name'] = 'streetName'
      @_hash['street_suffix'] = 'streetSuffix'
      @_hash['post_directional'] = 'postDirectional'
      @_hash['city'] = 'city'
      @_hash['state'] = 'state'
      @_hash['zip'] = 'zip'
      @_hash['zip_plus_four'] = 'zipPlusFour'
      @_hash['country'] = 'country'
      @_hash['location'] = 'location'
      @_hash
    end

    def initialize(address_line1 = nil,
                   house_num = nil,
                   house_num_suffix = nil,
                   prefix_directional = nil,
                   street_name = nil,
                   street_suffix = nil,
                   post_directional = nil,
                   city = nil,
                   state = nil,
                   zip = nil,
                   zip_plus_four = nil,
                   country = nil,
                   location = nil)
      @address_line1 = address_line1
      @house_num = house_num
      @house_num_suffix = house_num_suffix
      @prefix_directional = prefix_directional
      @street_name = street_name
      @street_suffix = street_suffix
      @post_directional = post_directional
      @city = city
      @state = state
      @zip = zip
      @zip_plus_four = zip_plus_four
      @country = country
      @location = location
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      address_line1 = hash['addressLine1']
      house_num = hash['houseNum']
      house_num_suffix = hash['houseNumSuffix']
      prefix_directional = hash['prefixDirectional']
      street_name = hash['streetName']
      street_suffix = hash['streetSuffix']
      post_directional = hash['postDirectional']
      city = hash['city']
      state = hash['state']
      zip = hash['zip']
      zip_plus_four = hash['zipPlusFour']
      country = hash['country']
      location = hash['location']

      # Create object from extracted values.
      E911GeocodeAddress.new(address_line1,
                             house_num,
                             house_num_suffix,
                             prefix_directional,
                             street_name,
                             street_suffix,
                             post_directional,
                             city,
                             state,
                             zip,
                             zip_plus_four,
                             country,
                             location)
    end

    def self.from_element(root)
      address_line1 = XmlUtilities.from_element(root, 'AddressLine1', String)
      house_num = XmlUtilities.from_element(root, 'HouseNumber', String)
      house_num_suffix = XmlUtilities.from_element(root, 'HouseSuffix', String)
      prefix_directional = XmlUtilities.from_element(root, 'PreDirectional',
                                                     String)
      street_name = XmlUtilities.from_element(root, 'StreetName', String)
      street_suffix = XmlUtilities.from_element(root, 'StreetSuffix', String)
      post_directional = XmlUtilities.from_element(root, 'PostDirectional',
                                                   String)
      city = XmlUtilities.from_element(root, 'City', String)
      state = XmlUtilities.from_element(root, 'StateCode', String)
      zip = XmlUtilities.from_element(root, 'Zip', String)
      zip_plus_four = XmlUtilities.from_element(root, 'PlusFour', String)
      country = XmlUtilities.from_element(root, 'Country', String)
      location = XmlUtilities.from_element(root, 'AddressLine2', String)

      new(address_line1,
          house_num,
          house_num_suffix,
          prefix_directional,
          street_name,
          street_suffix,
          post_directional,
          city,
          state,
          zip,
          zip_plus_four,
          country,
          location)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'AddressLine1', address_line1)
      XmlUtilities.add_as_subelement(doc, root, 'HouseNumber', house_num)
      XmlUtilities.add_as_subelement(doc, root, 'HouseSuffix', house_num_suffix)
      XmlUtilities.add_as_subelement(doc, root, 'PreDirectional',
                                     prefix_directional)
      XmlUtilities.add_as_subelement(doc, root, 'StreetName', street_name)
      XmlUtilities.add_as_subelement(doc, root, 'StreetSuffix', street_suffix)
      XmlUtilities.add_as_subelement(doc, root, 'PostDirectional',
                                     post_directional)
      XmlUtilities.add_as_subelement(doc, root, 'City', city)
      XmlUtilities.add_as_subelement(doc, root, 'StateCode', state)
      XmlUtilities.add_as_subelement(doc, root, 'Zip', zip)
      XmlUtilities.add_as_subelement(doc, root, 'PlusFour', zip_plus_four)
      XmlUtilities.add_as_subelement(doc, root, 'Country', country)
      XmlUtilities.add_as_subelement(doc, root, 'AddressLine2', location)

      root
    end
  end
end
