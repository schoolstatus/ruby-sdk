# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module Bandwidth
  # BillingReport Model.
  class BillingReport < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :type

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :requested_by

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :status

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :description

    # TODO: Write general description for this method
    # @return [DateTime]
    attr_accessor :created_at

    # TODO: Write general description for this method
    # @return [BillingReportDateRange]
    attr_accessor :date_range

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['type'] = 'type'
      @_hash['requested_by'] = 'requestedBy'
      @_hash['status'] = 'status'
      @_hash['description'] = 'description'
      @_hash['created_at'] = 'createdAt'
      @_hash['date_range'] = 'dateRange'
      @_hash
    end

    def initialize(id = nil,
                   type = nil,
                   requested_by = nil,
                   status = nil,
                   description = nil,
                   created_at = nil,
                   date_range = nil)
      @id = id
      @type = type
      @requested_by = requested_by
      @status = status
      @description = description
      @created_at = created_at
      @date_range = date_range
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash['id']
      type = hash['type']
      requested_by = hash['requestedBy']
      status = hash['status']
      description = hash['description']
      created_at = APIHelper.rfc3339(hash['createdAt']) if hash['createdAt']
      date_range = BillingReportDateRange.from_hash(hash['dateRange']) if
        hash['dateRange']

      # Create object from extracted values.
      BillingReport.new(id,
                        type,
                        requested_by,
                        status,
                        description,
                        created_at,
                        date_range)
    end

    def self.from_element(root)
      id = XmlUtilities.from_element(root, 'BillingReportId', String)
      type = XmlUtilities.from_element(root, 'BillingReportKind', String)
      requested_by = XmlUtilities.from_element(root, 'UserId', String)
      status = XmlUtilities.from_element(root, 'ReportStatus', String)
      description = XmlUtilities.from_element(root, 'Description', String)
      created_at = XmlUtilities.from_element(root, 'CreatedDate', String,
                                             datetime_format: 'rfc3339')
      date_range = XmlUtilities.from_element(root, 'DateRange',
                                             BillingReportDateRange)

      new(id,
          type,
          requested_by,
          status,
          description,
          created_at,
          date_range)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'BillingReportId', id)
      XmlUtilities.add_as_subelement(doc, root, 'BillingReportKind', type)
      XmlUtilities.add_as_subelement(doc, root, 'UserId', requested_by)
      XmlUtilities.add_as_subelement(doc, root, 'ReportStatus', status)
      XmlUtilities.add_as_subelement(doc, root, 'Description', description)
      XmlUtilities.add_as_subelement(doc, root, 'CreatedDate', created_at,
                                     datetime_format: 'rfc3339')
      XmlUtilities.add_as_subelement(doc, root, 'DateRange', date_range)

      root
    end
  end
end
