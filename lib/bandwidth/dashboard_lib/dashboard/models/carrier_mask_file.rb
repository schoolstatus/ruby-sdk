# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # CarrierMaskFile Model.
  class CarrierMaskFile < BaseModel
    # TODO: Write general description for this method
    # @return [Long]
    attr_accessor :id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :carrier_mask_name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :file_name

    # TODO: Write general description for this method
    # @return [List of String]
    attr_accessor :file_bytes

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :carrier_mask_type

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['carrier_mask_name'] = 'carrierMaskName'
      @_hash['file_name'] = 'fileName'
      @_hash['file_bytes'] = 'fileBytes'
      @_hash['carrier_mask_type'] = 'carrierMaskType'
      @_hash
    end

    def initialize(id = nil,
                   carrier_mask_name = nil,
                   file_name = nil,
                   file_bytes = nil,
                   carrier_mask_type = nil)
      @id = id
      @carrier_mask_name = carrier_mask_name
      @file_name = file_name
      @file_bytes = file_bytes
      @carrier_mask_type = carrier_mask_type
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash['id']
      carrier_mask_name = hash['carrierMaskName']
      file_name = hash['fileName']
      file_bytes = hash['fileBytes']
      carrier_mask_type = hash['carrierMaskType']

      # Create object from extracted values.
      CarrierMaskFile.new(id,
                          carrier_mask_name,
                          file_name,
                          file_bytes,
                          carrier_mask_type)
    end

    def self.from_element(root)
      id = XmlUtilities.from_element(root, 'id', Integer)
      carrier_mask_name = XmlUtilities.from_element(root, 'carrierMaskName',
                                                    String)
      file_name = XmlUtilities.from_element(root, 'fileName', String)
      file_bytes = XmlUtilities.from_element_to_array(root, 'fileBytes', String)
      carrier_mask_type = XmlUtilities.from_element(root, 'carrierMaskType',
                                                    String)

      new(id,
          carrier_mask_name,
          file_name,
          file_bytes,
          carrier_mask_type)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'id', id)
      XmlUtilities.add_as_subelement(doc, root, 'carrierMaskName',
                                     carrier_mask_name)
      XmlUtilities.add_as_subelement(doc, root, 'fileName', file_name)
      XmlUtilities.add_array_as_subelement(doc, root, 'fileBytes', file_bytes)
      XmlUtilities.add_as_subelement(doc, root, 'carrierMaskType',
                                     carrier_mask_type)

      root
    end
  end
end
