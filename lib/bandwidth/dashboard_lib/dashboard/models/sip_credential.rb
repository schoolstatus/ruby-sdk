# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # SipCredential Model.
  class SipCredential < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :user_name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :domain

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :hash1

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :hash1b

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['user_name'] = 'userName'
      @_hash['domain'] = 'domain'
      @_hash['hash1'] = 'hash1'
      @_hash['hash1b'] = 'hash1b'
      @_hash
    end

    def initialize(user_name = nil,
                   domain = nil,
                   hash1 = nil,
                   hash1b = nil)
      @user_name = user_name
      @domain = domain
      @hash1 = hash1
      @hash1b = hash1b
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      user_name = hash['userName']
      domain = hash['domain']
      hash1 = hash['hash1']
      hash1b = hash['hash1b']

      # Create object from extracted values.
      SipCredential.new(user_name,
                        domain,
                        hash1,
                        hash1b)
    end

    def self.from_element(root)
      user_name = XmlUtilities.from_element(root, 'UserName', String)
      domain = XmlUtilities.from_element(root, 'Domain', String)
      hash1 = XmlUtilities.from_element(root, 'Hash1', String)
      hash1b = XmlUtilities.from_element(root, 'Hash1b', String)

      new(user_name,
          domain,
          hash1,
          hash1b)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'UserName', user_name)
      XmlUtilities.add_as_subelement(doc, root, 'Domain', domain)
      XmlUtilities.add_as_subelement(doc, root, 'Hash1', hash1)
      XmlUtilities.add_as_subelement(doc, root, 'Hash1b', hash1b)

      root
    end
  end
end
