# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # Contact Model.
  class Contact < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :first_name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :last_name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :suffix

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :title

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :phone

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :fax

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :mobile

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :other_phone

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :email

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :website_address

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['first_name'] = 'firstName'
      @_hash['last_name'] = 'lastName'
      @_hash['suffix'] = 'suffix'
      @_hash['title'] = 'title'
      @_hash['phone'] = 'phone'
      @_hash['fax'] = 'fax'
      @_hash['mobile'] = 'mobile'
      @_hash['other_phone'] = 'otherPhone'
      @_hash['email'] = 'email'
      @_hash['website_address'] = 'websiteAddress'
      @_hash
    end

    def initialize(first_name = nil,
                   last_name = nil,
                   suffix = nil,
                   title = nil,
                   phone = nil,
                   fax = nil,
                   mobile = nil,
                   other_phone = nil,
                   email = nil,
                   website_address = nil)
      @first_name = first_name
      @last_name = last_name
      @suffix = suffix
      @title = title
      @phone = phone
      @fax = fax
      @mobile = mobile
      @other_phone = other_phone
      @email = email
      @website_address = website_address
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      first_name = hash['firstName']
      last_name = hash['lastName']
      suffix = hash['suffix']
      title = hash['title']
      phone = hash['phone']
      fax = hash['fax']
      mobile = hash['mobile']
      other_phone = hash['otherPhone']
      email = hash['email']
      website_address = hash['websiteAddress']

      # Create object from extracted values.
      Contact.new(first_name,
                  last_name,
                  suffix,
                  title,
                  phone,
                  fax,
                  mobile,
                  other_phone,
                  email,
                  website_address)
    end

    def self.from_element(root)
      first_name = XmlUtilities.from_element(root, 'FirstName', String)
      last_name = XmlUtilities.from_element(root, 'LastName', String)
      suffix = XmlUtilities.from_element(root, 'Suffix', String)
      title = XmlUtilities.from_element(root, 'Title', String)
      phone = XmlUtilities.from_element(root, 'Phone', String)
      fax = XmlUtilities.from_element(root, 'Fax', String)
      mobile = XmlUtilities.from_element(root, 'Mobile', String)
      other_phone = XmlUtilities.from_element(root, 'OtherPhone', String)
      email = XmlUtilities.from_element(root, 'Email', String)
      website_address = XmlUtilities.from_element(root, 'WebsiteAddress',
                                                  String)

      new(first_name,
          last_name,
          suffix,
          title,
          phone,
          fax,
          mobile,
          other_phone,
          email,
          website_address)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'FirstName', first_name)
      XmlUtilities.add_as_subelement(doc, root, 'LastName', last_name)
      XmlUtilities.add_as_subelement(doc, root, 'Suffix', suffix)
      XmlUtilities.add_as_subelement(doc, root, 'Title', title)
      XmlUtilities.add_as_subelement(doc, root, 'Phone', phone)
      XmlUtilities.add_as_subelement(doc, root, 'Fax', fax)
      XmlUtilities.add_as_subelement(doc, root, 'Mobile', mobile)
      XmlUtilities.add_as_subelement(doc, root, 'OtherPhone', other_phone)
      XmlUtilities.add_as_subelement(doc, root, 'Email', email)
      XmlUtilities.add_as_subelement(doc, root, 'WebsiteAddress',
                                     website_address)

      root
    end
  end
end
