# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # TnOptionGroup Model.
  class TnOptionGroup < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :number_format

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :rpid_format

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :rewrite_user

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :call_forward

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :cnam_lookup

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :port_out_passcode

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :protect

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :sms

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :final_destination_uri

    # TODO: Write general description for this method
    # @return [A2pSettings]
    attr_accessor :a2p_settings

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :nnid

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :espid

    # TODO: Write general description for this method
    # @return [OriginationRoutePlan]
    attr_accessor :origination_route_plan

    # TODO: Write general description for this method
    # @return [List of String]
    attr_accessor :group_numbers

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['number_format'] = 'numberFormat'
      @_hash['rpid_format'] = 'rpidFormat'
      @_hash['rewrite_user'] = 'rewriteUser'
      @_hash['call_forward'] = 'callForward'
      @_hash['cnam_lookup'] = 'cnamLookup'
      @_hash['port_out_passcode'] = 'portOutPasscode'
      @_hash['protect'] = 'protect'
      @_hash['sms'] = 'sms'
      @_hash['final_destination_uri'] = 'finalDestinationUri'
      @_hash['a2p_settings'] = 'a2pSettings'
      @_hash['nnid'] = 'nnid'
      @_hash['espid'] = 'espid'
      @_hash['origination_route_plan'] = 'originationRoutePlan'
      @_hash['group_numbers'] = 'groupNumbers'
      @_hash
    end

    def initialize(number_format = nil,
                   rpid_format = nil,
                   rewrite_user = nil,
                   call_forward = nil,
                   cnam_lookup = nil,
                   port_out_passcode = nil,
                   protect = nil,
                   sms = nil,
                   final_destination_uri = nil,
                   a2p_settings = nil,
                   nnid = nil,
                   espid = nil,
                   origination_route_plan = nil,
                   group_numbers = nil)
      @number_format = number_format
      @rpid_format = rpid_format
      @rewrite_user = rewrite_user
      @call_forward = call_forward
      @cnam_lookup = cnam_lookup
      @port_out_passcode = port_out_passcode
      @protect = protect
      @sms = sms
      @final_destination_uri = final_destination_uri
      @a2p_settings = a2p_settings
      @nnid = nnid
      @espid = espid
      @origination_route_plan = origination_route_plan
      @group_numbers = group_numbers
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      number_format = hash['numberFormat']
      rpid_format = hash['rpidFormat']
      rewrite_user = hash['rewriteUser']
      call_forward = hash['callForward']
      cnam_lookup = hash['cnamLookup']
      port_out_passcode = hash['portOutPasscode']
      protect = hash['protect']
      sms = hash['sms']
      final_destination_uri = hash['finalDestinationUri']
      a2p_settings = A2pSettings.from_hash(hash['a2pSettings']) if
        hash['a2pSettings']
      nnid = hash['nnid']
      espid = hash['espid']
      if hash['originationRoutePlan']
        origination_route_plan = OriginationRoutePlan.from_hash(hash['originationRoutePlan'])
      end
      group_numbers = hash['groupNumbers']

      # Create object from extracted values.
      TnOptionGroup.new(number_format,
                        rpid_format,
                        rewrite_user,
                        call_forward,
                        cnam_lookup,
                        port_out_passcode,
                        protect,
                        sms,
                        final_destination_uri,
                        a2p_settings,
                        nnid,
                        espid,
                        origination_route_plan,
                        group_numbers)
    end

    def self.from_element(root)
      number_format = XmlUtilities.from_element(root, 'NumberFormat', String)
      rpid_format = XmlUtilities.from_element(root, 'RPIDFormat', String)
      rewrite_user = XmlUtilities.from_element(root, 'RewriteUser', String)
      call_forward = XmlUtilities.from_element(root, 'CallForward', String)
      cnam_lookup = XmlUtilities.from_element(root, 'CallingNameDisplay',
                                              String)
      port_out_passcode = XmlUtilities.from_element(root, 'PortOutPasscode',
                                                    String)
      protect = XmlUtilities.from_element(root, 'Protected', String)
      sms = XmlUtilities.from_element(root, 'Sms', String)
      final_destination_uri = XmlUtilities.from_element(root,
                                                        'FinalDestinationURI',
                                                        String)
      a2p_settings = XmlUtilities.from_element(root, 'A2pSettings', A2pSettings)
      nnid = XmlUtilities.from_element(root, 'NNID', String)
      espid = XmlUtilities.from_element(root, 'ESPID', String)
      origination_route_plan = XmlUtilities.from_element(root,
                                                         'OriginationRoutePlan',
                                                         OriginationRoutePlan)
      group_numbers = XmlUtilities.from_element_to_array(
        root, 'TelephoneNumber', String,
        wrapping_element_name: 'TelephoneNumbers'
      )

      new(number_format,
          rpid_format,
          rewrite_user,
          call_forward,
          cnam_lookup,
          port_out_passcode,
          protect,
          sms,
          final_destination_uri,
          a2p_settings,
          nnid,
          espid,
          origination_route_plan,
          group_numbers)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'NumberFormat', number_format)
      XmlUtilities.add_as_subelement(doc, root, 'RPIDFormat', rpid_format)
      XmlUtilities.add_as_subelement(doc, root, 'RewriteUser', rewrite_user)
      XmlUtilities.add_as_subelement(doc, root, 'CallForward', call_forward)
      XmlUtilities.add_as_subelement(doc, root, 'CallingNameDisplay',
                                     cnam_lookup)
      XmlUtilities.add_as_subelement(doc, root, 'PortOutPasscode',
                                     port_out_passcode)
      XmlUtilities.add_as_subelement(doc, root, 'Protected', protect)
      XmlUtilities.add_as_subelement(doc, root, 'Sms', sms)
      XmlUtilities.add_as_subelement(doc, root, 'FinalDestinationURI',
                                     final_destination_uri)
      XmlUtilities.add_as_subelement(doc, root, 'A2pSettings', a2p_settings)
      XmlUtilities.add_as_subelement(doc, root, 'NNID', nnid)
      XmlUtilities.add_as_subelement(doc, root, 'ESPID', espid)
      XmlUtilities.add_as_subelement(doc, root, 'OriginationRoutePlan',
                                     origination_route_plan)
      XmlUtilities.add_array_as_subelement(
        doc, root, 'TelephoneNumber', group_numbers,
        wrapping_element_name: 'TelephoneNumbers'
      )

      root
    end
  end
end
