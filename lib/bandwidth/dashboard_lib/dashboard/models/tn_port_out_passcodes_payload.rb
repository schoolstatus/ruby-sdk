# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # TnPortOutPasscodesPayload Model.
  class TnPortOutPasscodesPayload < BaseModel
    # TODO: Write general description for this method
    # @return [List of TnPortOutPasscodePayload]
    attr_accessor :tn_port_out_passcodes

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['tn_port_out_passcodes'] = 'tnPortOutPasscodes'
      @_hash
    end

    def initialize(tn_port_out_passcodes = nil)
      @tn_port_out_passcodes = tn_port_out_passcodes
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      # Parameter is an array, so we need to iterate through it
      tn_port_out_passcodes = nil
      unless hash['tnPortOutPasscodes'].nil?
        tn_port_out_passcodes = []
        hash['tnPortOutPasscodes'].each do |structure|
          tn_port_out_passcodes << (TnPortOutPasscodePayload.from_hash(structure) if structure)
        end
      end

      # Create object from extracted values.
      TnPortOutPasscodesPayload.new(tn_port_out_passcodes)
    end

    def self.from_element(root)
      tn_port_out_passcodes = XmlUtilities.from_element_to_array(
        root, 'TelephoneNumber', TnPortOutPasscodePayload
      )

      new(tn_port_out_passcodes)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_array_as_subelement(doc, root, 'TelephoneNumber',
                                           tn_port_out_passcodes)

      root
    end
  end
end
