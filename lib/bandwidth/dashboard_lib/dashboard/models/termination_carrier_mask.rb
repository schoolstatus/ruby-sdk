# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # TerminationCarrierMask Model.
  class TerminationCarrierMask < BaseModel
    # TODO: Write general description for this method
    # @return [Long]
    attr_accessor :id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :name

    # TODO: Write general description for this method
    # @return [CarrierMaskTypeEnum]
    attr_accessor :carrier_mask_type

    # TODO: Write general description for this method
    # @return [List of PrefixCarrierMask]
    attr_accessor :prefix_carrier_masks

    # TODO: Write general description for this method
    # @return [List of NpaNxxCarrierMask]
    attr_accessor :npa_nxx_carrier_masks

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :global_carrier_mask

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :user_type

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['name'] = 'name'
      @_hash['carrier_mask_type'] = 'carrierMaskType'
      @_hash['prefix_carrier_masks'] = 'prefixCarrierMasks'
      @_hash['npa_nxx_carrier_masks'] = 'npaNxxCarrierMasks'
      @_hash['global_carrier_mask'] = 'globalCarrierMask'
      @_hash['user_type'] = 'userType'
      @_hash
    end

    def initialize(id = nil,
                   name = nil,
                   carrier_mask_type = nil,
                   prefix_carrier_masks = nil,
                   npa_nxx_carrier_masks = nil,
                   global_carrier_mask = nil,
                   user_type = nil)
      @id = id
      @name = name
      @carrier_mask_type = carrier_mask_type
      @prefix_carrier_masks = prefix_carrier_masks
      @npa_nxx_carrier_masks = npa_nxx_carrier_masks
      @global_carrier_mask = global_carrier_mask
      @user_type = user_type
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash['id']
      name = hash['name']
      carrier_mask_type = hash['carrierMaskType']
      # Parameter is an array, so we need to iterate through it
      prefix_carrier_masks = nil
      unless hash['prefixCarrierMasks'].nil?
        prefix_carrier_masks = []
        hash['prefixCarrierMasks'].each do |structure|
          prefix_carrier_masks << (PrefixCarrierMask.from_hash(structure) if structure)
        end
      end
      # Parameter is an array, so we need to iterate through it
      npa_nxx_carrier_masks = nil
      unless hash['npaNxxCarrierMasks'].nil?
        npa_nxx_carrier_masks = []
        hash['npaNxxCarrierMasks'].each do |structure|
          npa_nxx_carrier_masks << (NpaNxxCarrierMask.from_hash(structure) if structure)
        end
      end
      global_carrier_mask = hash['globalCarrierMask']
      user_type = hash['userType']

      # Create object from extracted values.
      TerminationCarrierMask.new(id,
                                 name,
                                 carrier_mask_type,
                                 prefix_carrier_masks,
                                 npa_nxx_carrier_masks,
                                 global_carrier_mask,
                                 user_type)
    end

    def self.from_element(root)
      id = XmlUtilities.from_element(root, 'id', Integer)
      name = XmlUtilities.from_element(root, 'name', String)
      carrier_mask_type = XmlUtilities.from_element(root, 'carrierMaskType',
                                                    String)
      prefix_carrier_masks = XmlUtilities.from_element_to_array(
        root, 'PrefixCarrierMask', PrefixCarrierMask,
        wrapping_element_name: 'PrefixCarrierMasks'
      )
      npa_nxx_carrier_masks = XmlUtilities.from_element_to_array(
        root, 'NpaNxxCarrierMask', NpaNxxCarrierMask,
        wrapping_element_name: 'NpaNxxCarrierMasks'
      )
      global_carrier_mask = XmlUtilities.from_element(root, 'globalCarrierMask',
                                                      String)
      user_type = XmlUtilities.from_element(root, 'userType', String)

      new(id,
          name,
          carrier_mask_type,
          prefix_carrier_masks,
          npa_nxx_carrier_masks,
          global_carrier_mask,
          user_type)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'id', id)
      XmlUtilities.add_as_subelement(doc, root, 'name', name)
      XmlUtilities.add_as_subelement(doc, root, 'carrierMaskType',
                                     carrier_mask_type)
      XmlUtilities.add_array_as_subelement(
        doc, root, 'PrefixCarrierMask', prefix_carrier_masks,
        wrapping_element_name: 'PrefixCarrierMasks'
      )
      XmlUtilities.add_array_as_subelement(
        doc, root, 'NpaNxxCarrierMask', npa_nxx_carrier_masks,
        wrapping_element_name: 'NpaNxxCarrierMasks'
      )
      XmlUtilities.add_as_subelement(doc, root, 'globalCarrierMask',
                                     global_carrier_mask)
      XmlUtilities.add_as_subelement(doc, root, 'userType', user_type)

      root
    end
  end
end
