# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # E911Settings Model.
  class E911Settings < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :dash_user_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :dash_password

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :dash_authentication_status

    # TODO: Write general description for this method
    # @return [List of E911Host]
    attr_accessor :hosts

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['dash_user_id'] = 'dashUserId'
      @_hash['dash_password'] = 'dashPassword'
      @_hash['dash_authentication_status'] = 'dashAuthenticationStatus'
      @_hash['hosts'] = 'hosts'
      @_hash
    end

    def initialize(dash_user_id = nil,
                   dash_password = nil,
                   dash_authentication_status = nil,
                   hosts = nil)
      @dash_user_id = dash_user_id
      @dash_password = dash_password
      @dash_authentication_status = dash_authentication_status
      @hosts = hosts
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      dash_user_id = hash['dashUserId']
      dash_password = hash['dashPassword']
      dash_authentication_status = hash['dashAuthenticationStatus']
      # Parameter is an array, so we need to iterate through it
      hosts = nil
      unless hash['hosts'].nil?
        hosts = []
        hash['hosts'].each do |structure|
          hosts << (E911Host.from_hash(structure) if structure)
        end
      end

      # Create object from extracted values.
      E911Settings.new(dash_user_id,
                       dash_password,
                       dash_authentication_status,
                       hosts)
    end

    def self.from_element(root)
      dash_user_id = XmlUtilities.from_element(root, 'DashUserId', String)
      dash_password = XmlUtilities.from_element(root, 'DashPassword', String)
      dash_authentication_status = XmlUtilities.from_element(
        root, 'DashAuthenticationStatus', String
      )
      hosts = XmlUtilities.from_element_to_array(root, 'Host', E911Host,
                                                 wrapping_element_name: 'Hosts')

      new(dash_user_id,
          dash_password,
          dash_authentication_status,
          hosts)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'DashUserId', dash_user_id)
      XmlUtilities.add_as_subelement(doc, root, 'DashPassword', dash_password)
      XmlUtilities.add_as_subelement(doc, root, 'DashAuthenticationStatus',
                                     dash_authentication_status)
      XmlUtilities.add_array_as_subelement(doc, root, 'Host', hosts,
                                           wrapping_element_name: 'Hosts')

      root
    end
  end
end
