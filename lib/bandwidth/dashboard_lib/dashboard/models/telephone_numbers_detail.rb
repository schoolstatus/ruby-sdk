# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # TelephoneNumbersDetail Model.
  class TelephoneNumbersDetail < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :city

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :lata

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :ratecenter

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :state

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :npa

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :npanxx

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :npanxxx

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :full_number

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :tier

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :count

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['city'] = 'city'
      @_hash['lata'] = 'lata'
      @_hash['ratecenter'] = 'ratecenter'
      @_hash['state'] = 'state'
      @_hash['npa'] = 'npa'
      @_hash['npanxx'] = 'npanxx'
      @_hash['npanxxx'] = 'npanxxx'
      @_hash['full_number'] = 'fullNumber'
      @_hash['tier'] = 'tier'
      @_hash['count'] = 'count'
      @_hash
    end

    def initialize(city = nil,
                   lata = nil,
                   ratecenter = nil,
                   state = nil,
                   npa = nil,
                   npanxx = nil,
                   npanxxx = nil,
                   full_number = nil,
                   tier = nil,
                   count = nil)
      @city = city
      @lata = lata
      @ratecenter = ratecenter
      @state = state
      @npa = npa
      @npanxx = npanxx
      @npanxxx = npanxxx
      @full_number = full_number
      @tier = tier
      @count = count
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      city = hash['city']
      lata = hash['lata']
      ratecenter = hash['ratecenter']
      state = hash['state']
      npa = hash['npa']
      npanxx = hash['npanxx']
      npanxxx = hash['npanxxx']
      full_number = hash['fullNumber']
      tier = hash['tier']
      count = hash['count']

      # Create object from extracted values.
      TelephoneNumbersDetail.new(city,
                                 lata,
                                 ratecenter,
                                 state,
                                 npa,
                                 npanxx,
                                 npanxxx,
                                 full_number,
                                 tier,
                                 count)
    end

    def self.from_element(root)
      city = XmlUtilities.from_element(root, 'City', String)
      lata = XmlUtilities.from_element(root, 'Lata', Integer)
      ratecenter = XmlUtilities.from_element(root, 'RateCenter', String)
      state = XmlUtilities.from_element(root, 'State', String)
      npa = XmlUtilities.from_element(root, 'AreaCode', String)
      npanxx = XmlUtilities.from_element(root, 'NPA-NXX', String)
      npanxxx = XmlUtilities.from_element(root, 'NPA-NXX-X', String)
      full_number = XmlUtilities.from_element(root, 'FullNumber', String)
      tier = XmlUtilities.from_element(root, 'Tier', Integer)
      count = XmlUtilities.from_element(root, 'Count', Integer)

      new(city,
          lata,
          ratecenter,
          state,
          npa,
          npanxx,
          npanxxx,
          full_number,
          tier,
          count)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'City', city)
      XmlUtilities.add_as_subelement(doc, root, 'Lata', lata)
      XmlUtilities.add_as_subelement(doc, root, 'RateCenter', ratecenter)
      XmlUtilities.add_as_subelement(doc, root, 'State', state)
      XmlUtilities.add_as_subelement(doc, root, 'AreaCode', npa)
      XmlUtilities.add_as_subelement(doc, root, 'NPA-NXX', npanxx)
      XmlUtilities.add_as_subelement(doc, root, 'NPA-NXX-X', npanxxx)
      XmlUtilities.add_as_subelement(doc, root, 'FullNumber', full_number)
      XmlUtilities.add_as_subelement(doc, root, 'Tier', tier)
      XmlUtilities.add_as_subelement(doc, root, 'Count', count)

      root
    end
  end
end
