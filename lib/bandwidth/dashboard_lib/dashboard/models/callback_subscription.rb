# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # CallbackSubscription Model.
  class CallbackSubscription < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :url

    # TODO: Write general description for this method
    # @return [Long]
    attr_accessor :expiry

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :status

    # TODO: Write general description for this method
    # @return [CallbackCredentials]
    attr_accessor :callback_credentials

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['url'] = 'url'
      @_hash['expiry'] = 'expiry'
      @_hash['status'] = 'status'
      @_hash['callback_credentials'] = 'callbackCredentials'
      @_hash
    end

    def initialize(url = nil,
                   expiry = nil,
                   status = nil,
                   callback_credentials = nil)
      @url = url
      @expiry = expiry
      @status = status
      @callback_credentials = callback_credentials
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      url = hash['url']
      expiry = hash['expiry']
      status = hash['status']
      if hash['callbackCredentials']
        callback_credentials = CallbackCredentials.from_hash(hash['callbackCredentials'])
      end

      # Create object from extracted values.
      CallbackSubscription.new(url,
                               expiry,
                               status,
                               callback_credentials)
    end

    def self.from_element(root)
      url = XmlUtilities.from_element(root, 'URL', String)
      expiry = XmlUtilities.from_element(root, 'Expiry', Integer)
      status = XmlUtilities.from_element(root, 'Status', String)
      callback_credentials = XmlUtilities.from_element(root,
                                                       'CallbackCredentials',
                                                       CallbackCredentials)

      new(url,
          expiry,
          status,
          callback_credentials)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'URL', url)
      XmlUtilities.add_as_subelement(doc, root, 'Expiry', expiry)
      XmlUtilities.add_as_subelement(doc, root, 'Status', status)
      XmlUtilities.add_as_subelement(doc, root, 'CallbackCredentials',
                                     callback_credentials)

      root
    end
  end
end
