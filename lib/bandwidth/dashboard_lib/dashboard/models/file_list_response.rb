# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # FileListResponse Model.
  class FileListResponse < BaseModel
    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :result_code

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :result_message

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :file_count

    # TODO: Write general description for this method
    # @return [List of String]
    attr_accessor :file_names

    # TODO: Write general description for this method
    # @return [List of FileData]
    attr_accessor :file_data

    # TODO: Write general description for this method
    # @return [ErrorEnum]
    attr_accessor :error

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['result_code'] = 'resultCode'
      @_hash['result_message'] = 'resultMessage'
      @_hash['file_count'] = 'fileCount'
      @_hash['file_names'] = 'fileNames'
      @_hash['file_data'] = 'fileData'
      @_hash['error'] = 'error'
      @_hash
    end

    def initialize(result_code = nil,
                   result_message = nil,
                   file_count = nil,
                   file_names = nil,
                   file_data = nil,
                   error = nil)
      @result_code = result_code
      @result_message = result_message
      @file_count = file_count
      @file_names = file_names
      @file_data = file_data
      @error = error
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      result_code = hash['resultCode']
      result_message = hash['resultMessage']
      file_count = hash['fileCount']
      file_names = hash['fileNames']
      # Parameter is an array, so we need to iterate through it
      file_data = nil
      unless hash['fileData'].nil?
        file_data = []
        hash['fileData'].each do |structure|
          file_data << (FileData.from_hash(structure) if structure)
        end
      end
      error = hash['error']

      # Create object from extracted values.
      FileListResponse.new(result_code,
                           result_message,
                           file_count,
                           file_names,
                           file_data,
                           error)
    end

    def self.from_element(root)
      result_code = XmlUtilities.from_element(root, 'resultCode', Integer)
      result_message = XmlUtilities.from_element(root, 'resultMessage', String)
      file_count = XmlUtilities.from_element(root, 'fileCount', Integer)
      file_names = XmlUtilities.from_element_to_array(root, 'fileNames', String)
      file_data = XmlUtilities.from_element_to_array(root, 'FileData', FileData)
      error = XmlUtilities.from_element(root, 'error', String)

      new(result_code,
          result_message,
          file_count,
          file_names,
          file_data,
          error)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'resultCode', result_code)
      XmlUtilities.add_as_subelement(doc, root, 'resultMessage', result_message)
      XmlUtilities.add_as_subelement(doc, root, 'fileCount', file_count)
      XmlUtilities.add_array_as_subelement(doc, root, 'fileNames', file_names)
      XmlUtilities.add_array_as_subelement(doc, root, 'FileData', file_data)
      XmlUtilities.add_as_subelement(doc, root, 'error', error)

      root
    end
  end
end
