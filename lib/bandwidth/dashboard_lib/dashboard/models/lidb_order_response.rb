# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # LidbOrderResponse Model.
  class LidbOrderResponse < BaseModel
    # TODO: Write general description for this method
    # @return [LidbOrderPayload]
    attr_accessor :payload

    # TODO: Write general description for this method
    # @return [OrderTypeEnum]
    attr_accessor :order_type

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :error_code

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :response_description

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :requested_account_id

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['payload'] = 'payload'
      @_hash['order_type'] = 'orderType'
      @_hash['error_code'] = 'errorCode'
      @_hash['response_description'] = 'responseDescription'
      @_hash['requested_account_id'] = 'requestedAccountId'
      @_hash
    end

    def initialize(payload = nil,
                   order_type = nil,
                   error_code = nil,
                   response_description = nil,
                   requested_account_id = nil)
      @payload = payload
      @order_type = order_type
      @error_code = error_code
      @response_description = response_description
      @requested_account_id = requested_account_id
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      payload = LidbOrderPayload.from_hash(hash['payload']) if hash['payload']
      order_type = hash['orderType']
      error_code = hash['errorCode']
      response_description = hash['responseDescription']
      requested_account_id = hash['requestedAccountId']

      # Create object from extracted values.
      LidbOrderResponse.new(payload,
                            order_type,
                            error_code,
                            response_description,
                            requested_account_id)
    end

    def self.from_element(root)
      payload = XmlUtilities.from_element(root, 'LidbOrder', LidbOrderPayload)
      order_type = XmlUtilities.from_element(root, 'orderType', String)
      error_code = XmlUtilities.from_element(root, 'errorCode', Integer)
      response_description = XmlUtilities.from_element(root,
                                                       'responseDescription',
                                                       String)
      requested_account_id = XmlUtilities.from_element(root,
                                                       'requestedAccountId',
                                                       Integer)

      new(payload,
          order_type,
          error_code,
          response_description,
          requested_account_id)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'LidbOrder', payload)
      XmlUtilities.add_as_subelement(doc, root, 'orderType', order_type)
      XmlUtilities.add_as_subelement(doc, root, 'errorCode', error_code)
      XmlUtilities.add_as_subelement(doc, root, 'responseDescription',
                                     response_description)
      XmlUtilities.add_as_subelement(doc, root, 'requestedAccountId',
                                     requested_account_id)

      root
    end
  end
end
