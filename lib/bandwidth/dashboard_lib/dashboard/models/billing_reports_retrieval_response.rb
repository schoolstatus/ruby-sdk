# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # BillingReportsRetrievalResponse Model.
  class BillingReportsRetrievalResponse < BaseModel
    # TODO: Write general description for this method
    # @return [BillingReportsRetrievePayload]
    attr_accessor :billing_reports_retrieve_payload

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :report_status

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :description

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['billing_reports_retrieve_payload'] =
        'billingReportsRetrievePayload'
      @_hash['report_status'] = 'reportStatus'
      @_hash['description'] = 'description'
      @_hash
    end

    def initialize(billing_reports_retrieve_payload = nil,
                   report_status = nil,
                   description = nil)
      @billing_reports_retrieve_payload = billing_reports_retrieve_payload
      @report_status = report_status
      @description = description
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      if hash['billingReportsRetrievePayload']
        billing_reports_retrieve_payload = BillingReportsRetrievePayload.from_hash(hash['billingReportsRetrievePayload'])
      end
      report_status = hash['reportStatus']
      description = hash['description']

      # Create object from extracted values.
      BillingReportsRetrievalResponse.new(billing_reports_retrieve_payload,
                                          report_status,
                                          description)
    end

    def self.from_element(root)
      billing_reports_retrieve_payload = XmlUtilities.from_element(
        root, 'BillingReportList', BillingReportsRetrievePayload
      )
      report_status = XmlUtilities.from_element(root, 'ReportStatus', String)
      description = XmlUtilities.from_element(root, 'Description', String)

      new(billing_reports_retrieve_payload,
          report_status,
          description)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'BillingReportList',
                                     billing_reports_retrieve_payload)
      XmlUtilities.add_as_subelement(doc, root, 'ReportStatus', report_status)
      XmlUtilities.add_as_subelement(doc, root, 'Description', description)

      root
    end
  end
end
