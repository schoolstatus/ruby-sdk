# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # AlternateEndUserIdentifier Model.
  class AlternateEndUserIdentifier < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :identifier

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :callback_number

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :pidflo_enabled

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :caller_name

    # TODO: Write general description for this method
    # @return [PreferredLanguageEnum]
    attr_accessor :preferred_language

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :location_id

    # TODO: Write general description for this method
    # @return [EmergencyNotificationGroupPayload]
    attr_accessor :group_payload

    # TODO: Write general description for this method
    # @return [AlternateEndUserIdentifierE911Status]
    attr_accessor :e911_status

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['identifier'] = 'identifier'
      @_hash['callback_number'] = 'callbackNumber'
      @_hash['pidflo_enabled'] = 'pidfloEnabled'
      @_hash['caller_name'] = 'callerName'
      @_hash['preferred_language'] = 'preferredLanguage'
      @_hash['location_id'] = 'locationId'
      @_hash['group_payload'] = 'groupPayload'
      @_hash['e911_status'] = 'e911Status'
      @_hash
    end

    def initialize(identifier = nil,
                   callback_number = nil,
                   pidflo_enabled = nil,
                   caller_name = nil,
                   preferred_language = nil,
                   location_id = nil,
                   group_payload = nil,
                   e911_status = nil)
      @identifier = identifier
      @callback_number = callback_number
      @pidflo_enabled = pidflo_enabled
      @caller_name = caller_name
      @preferred_language = preferred_language
      @location_id = location_id
      @group_payload = group_payload
      @e911_status = e911_status
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      identifier = hash['identifier']
      callback_number = hash['callbackNumber']
      pidflo_enabled = hash['pidfloEnabled']
      caller_name = hash['callerName']
      preferred_language = hash['preferredLanguage']
      location_id = hash['locationId']
      if hash['groupPayload']
        group_payload = EmergencyNotificationGroupPayload.from_hash(hash['groupPayload'])
      end
      if hash['e911Status']
        e911_status = AlternateEndUserIdentifierE911Status.from_hash(hash['e911Status'])
      end

      # Create object from extracted values.
      AlternateEndUserIdentifier.new(identifier,
                                     callback_number,
                                     pidflo_enabled,
                                     caller_name,
                                     preferred_language,
                                     location_id,
                                     group_payload,
                                     e911_status)
    end

    def self.from_element(root)
      identifier = XmlUtilities.from_element(root, 'Identifier', String)
      callback_number = XmlUtilities.from_element(root, 'CallbackNumber',
                                                  String)
      pidflo_enabled = XmlUtilities.from_element(root, 'PIDFLOEnabled',
                                                 TrueClass)
      caller_name = XmlUtilities.from_element(root, 'CallerName', String)
      preferred_language = XmlUtilities.from_element(root, 'PreferredLanguage',
                                                     String)
      location_id = XmlUtilities.from_element(root, 'LocationId', String)
      group_payload = XmlUtilities.from_element(
        root, 'EmergencyNotificationGroup',
        EmergencyNotificationGroupPayload
      )
      e911_status = XmlUtilities.from_element(
        root, 'E911', AlternateEndUserIdentifierE911Status
      )

      new(identifier,
          callback_number,
          pidflo_enabled,
          caller_name,
          preferred_language,
          location_id,
          group_payload,
          e911_status)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'Identifier', identifier)
      XmlUtilities.add_as_subelement(doc, root, 'CallbackNumber',
                                     callback_number)
      XmlUtilities.add_as_subelement(doc, root, 'PIDFLOEnabled', pidflo_enabled)
      XmlUtilities.add_as_subelement(doc, root, 'CallerName', caller_name)
      XmlUtilities.add_as_subelement(doc, root, 'PreferredLanguage',
                                     preferred_language)
      XmlUtilities.add_as_subelement(doc, root, 'LocationId', location_id)
      XmlUtilities.add_as_subelement(doc, root, 'EmergencyNotificationGroup',
                                     group_payload)
      XmlUtilities.add_as_subelement(doc, root, 'E911', e911_status)

      root
    end
  end
end
