# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module Bandwidth
  # EmergencyNotificationGroupEndpointAssociationPayload Model.
  class EmergencyNotificationGroupEndpointAssociationPayload < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :order_id

    # TODO: Write general description for this method
    # @return [DateTime]
    attr_accessor :order_created_date

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :created_by

    # TODO: Write general description for this method
    # @return [ProcessingStatus1Enum]
    attr_accessor :processing_status

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :customer_order_id

    # TODO: Write general description for this method
    # @return [EmergencyNotificationEndpointAssociationsPayload]
    attr_accessor :emergency_notification_endpoint_associations_payload

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['order_id'] = 'orderId'
      @_hash['order_created_date'] = 'orderCreatedDate'
      @_hash['created_by'] = 'createdBy'
      @_hash['processing_status'] = 'processingStatus'
      @_hash['customer_order_id'] = 'customerOrderId'
      @_hash['emergency_notification_endpoint_associations_payload'] =
        'emergencyNotificationEndpointAssociationsPayload'
      @_hash
    end

    def initialize(order_id = nil,
                   order_created_date = nil,
                   created_by = nil,
                   processing_status = nil,
                   customer_order_id = nil,
                   emergency_notification_endpoint_associations_payload = nil)
      @order_id = order_id
      @order_created_date = order_created_date
      @created_by = created_by
      @processing_status = processing_status
      @customer_order_id = customer_order_id
      @emergency_notification_endpoint_associations_payload =
        emergency_notification_endpoint_associations_payload
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      order_id = hash['orderId']
      order_created_date = APIHelper.rfc3339(hash['orderCreatedDate']) if
        hash['orderCreatedDate']
      created_by = hash['createdBy']
      processing_status = hash['processingStatus']
      customer_order_id = hash['customerOrderId']
      if hash['emergencyNotificationEndpointAssociationsPayload']
        emergency_notification_endpoint_associations_payload = EmergencyNotificationEndpointAssociationsPayload.from_hash(hash['emergencyNotificationEndpointAssociationsPayload'])
      end

      # Create object from extracted values.
      EmergencyNotificationGroupEndpointAssociationPayload.new(order_id,
                                                               order_created_date,
                                                               created_by,
                                                               processing_status,
                                                               customer_order_id,
                                                               emergency_notification_endpoint_associations_payload)
    end

    def self.from_element(root)
      order_id = XmlUtilities.from_element(root, 'OrderId', String)
      order_created_date = XmlUtilities.from_element(root, 'OrderCreatedDate',
                                                     String,
                                                     datetime_format: 'rfc3339')
      created_by = XmlUtilities.from_element(root, 'CreatedBy', String)
      processing_status = XmlUtilities.from_element(root, 'ProcessingStatus',
                                                    String)
      customer_order_id = XmlUtilities.from_element(root, 'CustomerOrderId',
                                                    String)
      emergency_notification_endpoint_associations_payload = XmlUtilities.from_element(
        root, 'EmergencyNotificationEndpointAssociations',
        EmergencyNotificationEndpointAssociationsPayload
      )

      new(order_id,
          order_created_date,
          created_by,
          processing_status,
          customer_order_id,
          emergency_notification_endpoint_associations_payload)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'OrderId', order_id)
      XmlUtilities.add_as_subelement(doc, root, 'OrderCreatedDate',
                                     order_created_date,
                                     datetime_format: 'rfc3339')
      XmlUtilities.add_as_subelement(doc, root, 'CreatedBy', created_by)
      XmlUtilities.add_as_subelement(doc, root, 'ProcessingStatus',
                                     processing_status)
      XmlUtilities.add_as_subelement(doc, root, 'CustomerOrderId',
                                     customer_order_id)
      XmlUtilities.add_as_subelement(
        doc, root, 'EmergencyNotificationEndpointAssociations',
        emergency_notification_endpoint_associations_payload
      )

      root
    end
  end
end
