# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # TelephoneNumberStatusWrapper Model.
  class TelephoneNumberStatusWrapper < BaseModel
    # TODO: Write general description for this method
    # @return [List of DetailedTelephoneNumberStatus]
    attr_accessor :telephone_number_status_list

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :telephone_number

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :tn_status

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :last_modified_date_in_utc

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :order_created_date_in_utc

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :order_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :order_type

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :in_service_date

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :site_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :peer_group

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :account_id

    # TODO: Write general description for this method
    # @return [OrderDetailsReport]
    attr_accessor :tn_details

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['telephone_number_status_list'] = 'telephoneNumberStatusList'
      @_hash['telephone_number'] = 'telephoneNumber'
      @_hash['tn_status'] = 'tnStatus'
      @_hash['last_modified_date_in_utc'] = 'lastModifiedDateInUtc'
      @_hash['order_created_date_in_utc'] = 'orderCreatedDateInUtc'
      @_hash['order_id'] = 'orderId'
      @_hash['order_type'] = 'orderType'
      @_hash['in_service_date'] = 'inServiceDate'
      @_hash['site_id'] = 'siteId'
      @_hash['peer_group'] = 'peerGroup'
      @_hash['account_id'] = 'accountId'
      @_hash['tn_details'] = 'tnDetails'
      @_hash
    end

    def initialize(telephone_number_status_list = nil,
                   telephone_number = nil,
                   tn_status = nil,
                   last_modified_date_in_utc = nil,
                   order_created_date_in_utc = nil,
                   order_id = nil,
                   order_type = nil,
                   in_service_date = nil,
                   site_id = nil,
                   peer_group = nil,
                   account_id = nil,
                   tn_details = nil)
      @telephone_number_status_list = telephone_number_status_list
      @telephone_number = telephone_number
      @tn_status = tn_status
      @last_modified_date_in_utc = last_modified_date_in_utc
      @order_created_date_in_utc = order_created_date_in_utc
      @order_id = order_id
      @order_type = order_type
      @in_service_date = in_service_date
      @site_id = site_id
      @peer_group = peer_group
      @account_id = account_id
      @tn_details = tn_details
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      # Parameter is an array, so we need to iterate through it
      telephone_number_status_list = nil
      unless hash['telephoneNumberStatusList'].nil?
        telephone_number_status_list = []
        hash['telephoneNumberStatusList'].each do |structure|
          telephone_number_status_list << (DetailedTelephoneNumberStatus.from_hash(structure) if structure)
        end
      end
      telephone_number = hash['telephoneNumber']
      tn_status = hash['tnStatus']
      last_modified_date_in_utc = hash['lastModifiedDateInUtc']
      order_created_date_in_utc = hash['orderCreatedDateInUtc']
      order_id = hash['orderId']
      order_type = hash['orderType']
      in_service_date = hash['inServiceDate']
      site_id = hash['siteId']
      peer_group = hash['peerGroup']
      account_id = hash['accountId']
      tn_details = OrderDetailsReport.from_hash(hash['tnDetails']) if
        hash['tnDetails']

      # Create object from extracted values.
      TelephoneNumberStatusWrapper.new(telephone_number_status_list,
                                       telephone_number,
                                       tn_status,
                                       last_modified_date_in_utc,
                                       order_created_date_in_utc,
                                       order_id,
                                       order_type,
                                       in_service_date,
                                       site_id,
                                       peer_group,
                                       account_id,
                                       tn_details)
    end

    def self.from_element(root)
      telephone_number_status_list = XmlUtilities.from_element_to_array(
        root, 'DetailedTelephoneNumberStatus',
        DetailedTelephoneNumberStatus,
        wrapping_element_name: 'TelephoneNumberStatuses'
      )
      telephone_number = XmlUtilities.from_element(root, 'TelephoneNumber',
                                                   String)
      tn_status = XmlUtilities.from_element(root, 'Status', String)
      last_modified_date_in_utc = XmlUtilities.from_element(root,
                                                            'LastModifiedDate',
                                                            String)
      order_created_date_in_utc = XmlUtilities.from_element(root,
                                                            'OrderCreateDate',
                                                            String)
      order_id = XmlUtilities.from_element(root, 'OrderId', String)
      order_type = XmlUtilities.from_element(root, 'OrderType', String)
      in_service_date = XmlUtilities.from_element(root, 'InServiceDate', String)
      site_id = XmlUtilities.from_element(root, 'SiteId', Integer)
      peer_group = XmlUtilities.from_element(root, 'PeerGroup', String)
      account_id = XmlUtilities.from_element(root, 'AccountId', Integer)
      tn_details = XmlUtilities.from_element(root, 'TelephoneNumberDetails',
                                             OrderDetailsReport)

      new(telephone_number_status_list,
          telephone_number,
          tn_status,
          last_modified_date_in_utc,
          order_created_date_in_utc,
          order_id,
          order_type,
          in_service_date,
          site_id,
          peer_group,
          account_id,
          tn_details)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_array_as_subelement(
        doc, root, 'DetailedTelephoneNumberStatus',
        telephone_number_status_list,
        wrapping_element_name: 'TelephoneNumberStatuses'
      )
      XmlUtilities.add_as_subelement(doc, root, 'TelephoneNumber',
                                     telephone_number)
      XmlUtilities.add_as_subelement(doc, root, 'Status', tn_status)
      XmlUtilities.add_as_subelement(doc, root, 'LastModifiedDate',
                                     last_modified_date_in_utc)
      XmlUtilities.add_as_subelement(doc, root, 'OrderCreateDate',
                                     order_created_date_in_utc)
      XmlUtilities.add_as_subelement(doc, root, 'OrderId', order_id)
      XmlUtilities.add_as_subelement(doc, root, 'OrderType', order_type)
      XmlUtilities.add_as_subelement(doc, root, 'InServiceDate',
                                     in_service_date)
      XmlUtilities.add_as_subelement(doc, root, 'SiteId', site_id)
      XmlUtilities.add_as_subelement(doc, root, 'PeerGroup', peer_group)
      XmlUtilities.add_as_subelement(doc, root, 'AccountId', account_id)
      XmlUtilities.add_as_subelement(doc, root, 'TelephoneNumberDetails',
                                     tn_details)

      root
    end
  end
end
