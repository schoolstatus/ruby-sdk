# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # TelephoneNumbersAssignmentOrderPayload Model.
  class TelephoneNumbersAssignmentOrderPayload < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :customer_order_id

    # TODO: Write general description for this method
    # @return [List of String]
    attr_accessor :telephone_numbers

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :action

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['customer_order_id'] = 'customerOrderId'
      @_hash['telephone_numbers'] = 'telephoneNumbers'
      @_hash['action'] = 'action'
      @_hash
    end

    def initialize(customer_order_id = nil,
                   telephone_numbers = nil,
                   action = nil)
      @customer_order_id = customer_order_id
      @telephone_numbers = telephone_numbers
      @action = action
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      customer_order_id = hash['customerOrderId']
      telephone_numbers = hash['telephoneNumbers']
      action = hash['action']

      # Create object from extracted values.
      TelephoneNumbersAssignmentOrderPayload.new(customer_order_id,
                                                 telephone_numbers,
                                                 action)
    end

    def self.from_element(root)
      customer_order_id = XmlUtilities.from_element(root, 'CustomerOrderId',
                                                    String)
      telephone_numbers = XmlUtilities.from_element_to_array(
        root, 'TelephoneNumber', String,
        wrapping_element_name: 'TelephoneNumbers'
      )
      action = XmlUtilities.from_element(root, 'Action', String)

      new(customer_order_id,
          telephone_numbers,
          action)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'CustomerOrderId',
                                     customer_order_id)
      XmlUtilities.add_array_as_subelement(
        doc, root, 'TelephoneNumber', telephone_numbers,
        wrapping_element_name: 'TelephoneNumbers'
      )
      XmlUtilities.add_as_subelement(doc, root, 'Action', action)

      root
    end
  end
end
