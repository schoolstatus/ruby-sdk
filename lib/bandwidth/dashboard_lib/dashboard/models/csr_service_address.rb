# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # CsrServiceAddress Model.
  class CsrServiceAddress < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :unparsed_address

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :house_number

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :house_prefix

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :house_suffix

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :pre_directional

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :street_name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :street_suffix

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :post_directional

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :address_line2

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :city

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :state

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :zip

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['unparsed_address'] = 'unparsedAddress'
      @_hash['house_number'] = 'houseNumber'
      @_hash['house_prefix'] = 'housePrefix'
      @_hash['house_suffix'] = 'houseSuffix'
      @_hash['pre_directional'] = 'preDirectional'
      @_hash['street_name'] = 'streetName'
      @_hash['street_suffix'] = 'streetSuffix'
      @_hash['post_directional'] = 'postDirectional'
      @_hash['address_line2'] = 'addressLine2'
      @_hash['city'] = 'city'
      @_hash['state'] = 'state'
      @_hash['zip'] = 'zip'
      @_hash
    end

    def initialize(unparsed_address = nil,
                   house_number = nil,
                   house_prefix = nil,
                   house_suffix = nil,
                   pre_directional = nil,
                   street_name = nil,
                   street_suffix = nil,
                   post_directional = nil,
                   address_line2 = nil,
                   city = nil,
                   state = nil,
                   zip = nil)
      @unparsed_address = unparsed_address
      @house_number = house_number
      @house_prefix = house_prefix
      @house_suffix = house_suffix
      @pre_directional = pre_directional
      @street_name = street_name
      @street_suffix = street_suffix
      @post_directional = post_directional
      @address_line2 = address_line2
      @city = city
      @state = state
      @zip = zip
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      unparsed_address = hash['unparsedAddress']
      house_number = hash['houseNumber']
      house_prefix = hash['housePrefix']
      house_suffix = hash['houseSuffix']
      pre_directional = hash['preDirectional']
      street_name = hash['streetName']
      street_suffix = hash['streetSuffix']
      post_directional = hash['postDirectional']
      address_line2 = hash['addressLine2']
      city = hash['city']
      state = hash['state']
      zip = hash['zip']

      # Create object from extracted values.
      CsrServiceAddress.new(unparsed_address,
                            house_number,
                            house_prefix,
                            house_suffix,
                            pre_directional,
                            street_name,
                            street_suffix,
                            post_directional,
                            address_line2,
                            city,
                            state,
                            zip)
    end

    def self.from_element(root)
      unparsed_address = XmlUtilities.from_element(root, 'UnparsedAddress',
                                                   String)
      house_number = XmlUtilities.from_element(root, 'HouseNumber', String)
      house_prefix = XmlUtilities.from_element(root, 'HousePrefix', String)
      house_suffix = XmlUtilities.from_element(root, 'HouseSuffix', String)
      pre_directional = XmlUtilities.from_element(root, 'PreDirectional',
                                                  String)
      street_name = XmlUtilities.from_element(root, 'StreetName', String)
      street_suffix = XmlUtilities.from_element(root, 'StreetSuffix', String)
      post_directional = XmlUtilities.from_element(root, 'PostDirectional',
                                                   String)
      address_line2 = XmlUtilities.from_element(root, 'AddressLine2', String)
      city = XmlUtilities.from_element(root, 'City', String)
      state = XmlUtilities.from_element(root, 'State', String)
      zip = XmlUtilities.from_element(root, 'Zip', String)

      new(unparsed_address,
          house_number,
          house_prefix,
          house_suffix,
          pre_directional,
          street_name,
          street_suffix,
          post_directional,
          address_line2,
          city,
          state,
          zip)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'UnparsedAddress',
                                     unparsed_address)
      XmlUtilities.add_as_subelement(doc, root, 'HouseNumber', house_number)
      XmlUtilities.add_as_subelement(doc, root, 'HousePrefix', house_prefix)
      XmlUtilities.add_as_subelement(doc, root, 'HouseSuffix', house_suffix)
      XmlUtilities.add_as_subelement(doc, root, 'PreDirectional',
                                     pre_directional)
      XmlUtilities.add_as_subelement(doc, root, 'StreetName', street_name)
      XmlUtilities.add_as_subelement(doc, root, 'StreetSuffix', street_suffix)
      XmlUtilities.add_as_subelement(doc, root, 'PostDirectional',
                                     post_directional)
      XmlUtilities.add_as_subelement(doc, root, 'AddressLine2', address_line2)
      XmlUtilities.add_as_subelement(doc, root, 'City', city)
      XmlUtilities.add_as_subelement(doc, root, 'State', state)
      XmlUtilities.add_as_subelement(doc, root, 'Zip', zip)

      root
    end
  end
end
