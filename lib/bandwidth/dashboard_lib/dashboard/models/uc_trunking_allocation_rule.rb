# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # UcTrunkingAllocationRule Model.
  class UcTrunkingAllocationRule < BaseModel
    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :lower_bound

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :ratio

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['lower_bound'] = 'lowerBound'
      @_hash['ratio'] = 'ratio'
      @_hash
    end

    def initialize(lower_bound = nil,
                   ratio = nil)
      @lower_bound = lower_bound
      @ratio = ratio
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      lower_bound = hash['lowerBound']
      ratio = hash['ratio']

      # Create object from extracted values.
      UcTrunkingAllocationRule.new(lower_bound,
                                   ratio)
    end

    def self.from_element(root)
      lower_bound = XmlUtilities.from_element(root, 'LowerBound', Integer)
      ratio = XmlUtilities.from_element(root, 'Ratio', Integer)

      new(lower_bound,
          ratio)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'LowerBound', lower_bound)
      XmlUtilities.add_as_subelement(doc, root, 'Ratio', ratio)

      root
    end
  end
end
