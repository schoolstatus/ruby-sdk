# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # TelephoneNumberListWrapper Model.
  class TelephoneNumberListWrapper < BaseModel
    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :total_count

    # TODO: Write general description for this method
    # @return [PaginationLinks]
    attr_accessor :pagination_links

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :count

    # TODO: Write general description for this method
    # @return [List of String]
    attr_accessor :telephone_number_list

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :error_message

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['total_count'] = 'totalCount'
      @_hash['pagination_links'] = 'paginationLinks'
      @_hash['count'] = 'count'
      @_hash['telephone_number_list'] = 'telephoneNumberList'
      @_hash['error_message'] = 'errorMessage'
      @_hash
    end

    def initialize(total_count = nil,
                   pagination_links = nil,
                   count = nil,
                   telephone_number_list = nil,
                   error_message = nil)
      @total_count = total_count
      @pagination_links = pagination_links
      @count = count
      @telephone_number_list = telephone_number_list
      @error_message = error_message
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      total_count = hash['totalCount']
      pagination_links = PaginationLinks.from_hash(hash['paginationLinks']) if
        hash['paginationLinks']
      count = hash['count']
      telephone_number_list = hash['telephoneNumberList']
      error_message = hash['errorMessage']

      # Create object from extracted values.
      TelephoneNumberListWrapper.new(total_count,
                                     pagination_links,
                                     count,
                                     telephone_number_list,
                                     error_message)
    end

    def self.from_element(root)
      total_count = XmlUtilities.from_element(root, 'TotalCount', Integer)
      pagination_links = XmlUtilities.from_element(root, 'Links',
                                                   PaginationLinks)
      count = XmlUtilities.from_element(root, 'Count', Integer)
      telephone_number_list = XmlUtilities.from_element_to_array(
        root, 'TelephoneNumber', String
      )
      error_message = XmlUtilities.from_element(root, 'ErrorMessage', String)

      new(total_count,
          pagination_links,
          count,
          telephone_number_list,
          error_message)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'TotalCount', total_count)
      XmlUtilities.add_as_subelement(doc, root, 'Links', pagination_links)
      XmlUtilities.add_as_subelement(doc, root, 'Count', count)
      XmlUtilities.add_array_as_subelement(doc, root, 'TelephoneNumber',
                                           telephone_number_list)
      XmlUtilities.add_as_subelement(doc, root, 'ErrorMessage', error_message)

      root
    end
  end
end
