# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # SystemEventSubscription Model.
  class SystemEventSubscription < BaseModel
    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :system_event

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :email

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :zendesk_group_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :digest_type

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :callback_order_type

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['system_event'] = 'systemEvent'
      @_hash['email'] = 'email'
      @_hash['zendesk_group_id'] = 'zendeskGroupId'
      @_hash['digest_type'] = 'digestType'
      @_hash['callback_order_type'] = 'callbackOrderType'
      @_hash
    end

    def initialize(id = nil,
                   system_event = nil,
                   email = nil,
                   zendesk_group_id = nil,
                   digest_type = nil,
                   callback_order_type = nil)
      @id = id
      @system_event = system_event
      @email = email
      @zendesk_group_id = zendesk_group_id
      @digest_type = digest_type
      @callback_order_type = callback_order_type
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash['id']
      system_event = hash['systemEvent']
      email = hash['email']
      zendesk_group_id = hash['zendeskGroupId']
      digest_type = hash['digestType']
      callback_order_type = hash['callbackOrderType']

      # Create object from extracted values.
      SystemEventSubscription.new(id,
                                  system_event,
                                  email,
                                  zendesk_group_id,
                                  digest_type,
                                  callback_order_type)
    end

    def self.from_element(root)
      id = XmlUtilities.from_element(root, 'SubscriptionId', Integer)
      system_event = XmlUtilities.from_element(root, 'SystemEvent', String)
      email = XmlUtilities.from_element(root, 'Email', String)
      zendesk_group_id = XmlUtilities.from_element(root, 'ZendeskGroupId',
                                                   String)
      digest_type = XmlUtilities.from_element(root, 'DigestType', String)
      callback_order_type = XmlUtilities.from_element(root, 'CallbackOrderType',
                                                      String)

      new(id,
          system_event,
          email,
          zendesk_group_id,
          digest_type,
          callback_order_type)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'SubscriptionId', id)
      XmlUtilities.add_as_subelement(doc, root, 'SystemEvent', system_event)
      XmlUtilities.add_as_subelement(doc, root, 'Email', email)
      XmlUtilities.add_as_subelement(doc, root, 'ZendeskGroupId',
                                     zendesk_group_id)
      XmlUtilities.add_as_subelement(doc, root, 'DigestType', digest_type)
      XmlUtilities.add_as_subelement(doc, root, 'CallbackOrderType',
                                     callback_order_type)

      root
    end
  end
end
