# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # LdapUser Model.
  class LdapUser < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :user_name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :email

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :password

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :has_password

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :validated

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :client_certificate

    # TODO: Write general description for this method
    # @return [UserSettings]
    attr_accessor :user_settings

    # TODO: Write general description for this method
    # @return [UserProfile]
    attr_accessor :user_profile

    # TODO: Write general description for this method
    # @return [LdapRoles]
    attr_accessor :roles

    # TODO: Write general description for this method
    # @return [LdapAccountsDto]
    attr_accessor :accounts

    # TODO: Write general description for this method
    # @return [LdapUserPreferences]
    attr_accessor :user_preferences

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :react_request

    # TODO: Write general description for this method
    # @return [LdapAccount]
    attr_accessor :account

    # TODO: Write general description for this method
    # @return [List of LdapRole]
    attr_accessor :role_list

    # TODO: Write general description for this method
    # @return [List of LdapUserPreference]
    attr_accessor :user_preferences_list

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['user_name'] = 'userName'
      @_hash['email'] = 'email'
      @_hash['password'] = 'password'
      @_hash['has_password'] = 'hasPassword'
      @_hash['validated'] = 'validated'
      @_hash['client_certificate'] = 'clientCertificate'
      @_hash['user_settings'] = 'userSettings'
      @_hash['user_profile'] = 'userProfile'
      @_hash['roles'] = 'roles'
      @_hash['accounts'] = 'accounts'
      @_hash['user_preferences'] = 'userPreferences'
      @_hash['react_request'] = 'reactRequest'
      @_hash['account'] = 'account'
      @_hash['role_list'] = 'roleList'
      @_hash['user_preferences_list'] = 'userPreferencesList'
      @_hash
    end

    def initialize(user_name = nil,
                   email = nil,
                   password = nil,
                   has_password = nil,
                   validated = nil,
                   client_certificate = nil,
                   user_settings = nil,
                   user_profile = nil,
                   roles = nil,
                   accounts = nil,
                   user_preferences = nil,
                   react_request = nil,
                   account = nil,
                   role_list = nil,
                   user_preferences_list = nil)
      @user_name = user_name
      @email = email
      @password = password
      @has_password = has_password
      @validated = validated
      @client_certificate = client_certificate
      @user_settings = user_settings
      @user_profile = user_profile
      @roles = roles
      @accounts = accounts
      @user_preferences = user_preferences
      @react_request = react_request
      @account = account
      @role_list = role_list
      @user_preferences_list = user_preferences_list
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      user_name = hash['userName']
      email = hash['email']
      password = hash['password']
      has_password = hash['hasPassword']
      validated = hash['validated']
      client_certificate = hash['clientCertificate']
      user_settings = UserSettings.from_hash(hash['userSettings']) if
        hash['userSettings']
      user_profile = UserProfile.from_hash(hash['userProfile']) if
        hash['userProfile']
      roles = LdapRoles.from_hash(hash['roles']) if hash['roles']
      accounts = LdapAccountsDto.from_hash(hash['accounts']) if
        hash['accounts']
      if hash['userPreferences']
        user_preferences = LdapUserPreferences.from_hash(hash['userPreferences'])
      end
      react_request = hash['reactRequest']
      account = LdapAccount.from_hash(hash['account']) if hash['account']
      # Parameter is an array, so we need to iterate through it
      role_list = nil
      unless hash['roleList'].nil?
        role_list = []
        hash['roleList'].each do |structure|
          role_list << (LdapRole.from_hash(structure) if structure)
        end
      end
      # Parameter is an array, so we need to iterate through it
      user_preferences_list = nil
      unless hash['userPreferencesList'].nil?
        user_preferences_list = []
        hash['userPreferencesList'].each do |structure|
          user_preferences_list << (LdapUserPreference.from_hash(structure) if structure)
        end
      end

      # Create object from extracted values.
      LdapUser.new(user_name,
                   email,
                   password,
                   has_password,
                   validated,
                   client_certificate,
                   user_settings,
                   user_profile,
                   roles,
                   accounts,
                   user_preferences,
                   react_request,
                   account,
                   role_list,
                   user_preferences_list)
    end

    def self.from_element(root)
      user_name = XmlUtilities.from_element(root, 'UserId', String)
      email = XmlUtilities.from_element(root, 'Email', String)
      password = XmlUtilities.from_element(root, 'Password', String)
      has_password = XmlUtilities.from_element(root, 'hasPassword', TrueClass)
      validated = XmlUtilities.from_element(root, 'EmailValidated', TrueClass)
      client_certificate = XmlUtilities.from_element(root, 'ClientCertificate',
                                                     String)
      user_settings = XmlUtilities.from_element(root, 'UserSettings',
                                                UserSettings)
      user_profile = XmlUtilities.from_element(root, 'UserProfile', UserProfile)
      roles = XmlUtilities.from_element(root, 'RoleList', LdapRoles)
      accounts = XmlUtilities.from_element(root, 'AccountList', LdapAccountsDto)
      user_preferences = XmlUtilities.from_element(root, 'UserPreferences',
                                                   LdapUserPreferences)
      react_request = XmlUtilities.from_element(root, 'ReactRequest', TrueClass)
      account = XmlUtilities.from_element(root, 'LdapAccount', LdapAccount)
      role_list = XmlUtilities.from_element_to_array(root, 'Role', LdapRole)
      user_preferences_list = XmlUtilities.from_element_to_array(
        root, 'UserPreference', LdapUserPreference
      )

      new(user_name,
          email,
          password,
          has_password,
          validated,
          client_certificate,
          user_settings,
          user_profile,
          roles,
          accounts,
          user_preferences,
          react_request,
          account,
          role_list,
          user_preferences_list)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'UserId', user_name)
      XmlUtilities.add_as_subelement(doc, root, 'Email', email)
      XmlUtilities.add_as_subelement(doc, root, 'Password', password)
      XmlUtilities.add_as_subelement(doc, root, 'hasPassword', has_password)
      XmlUtilities.add_as_subelement(doc, root, 'EmailValidated', validated)
      XmlUtilities.add_as_subelement(doc, root, 'ClientCertificate',
                                     client_certificate)
      XmlUtilities.add_as_subelement(doc, root, 'UserSettings', user_settings)
      XmlUtilities.add_as_subelement(doc, root, 'UserProfile', user_profile)
      XmlUtilities.add_as_subelement(doc, root, 'RoleList', roles)
      XmlUtilities.add_as_subelement(doc, root, 'AccountList', accounts)
      XmlUtilities.add_as_subelement(doc, root, 'UserPreferences',
                                     user_preferences)
      XmlUtilities.add_as_subelement(doc, root, 'ReactRequest', react_request)
      XmlUtilities.add_as_subelement(doc, root, 'LdapAccount', account)
      XmlUtilities.add_array_as_subelement(doc, root, 'Role', role_list)
      XmlUtilities.add_array_as_subelement(doc, root, 'UserPreference',
                                           user_preferences_list)

      root
    end
  end
end
