# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # AccountPayload Model.
  class AccountPayload < BaseModel
    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :account_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :global_account_number

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :associated_catapult_account

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :company_name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :account_type

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :external_id

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :billing_cycle

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :penalty_type

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :pricing

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :nena_id

    # TODO: Write general description for this method
    # @return [List of Integer]
    attr_accessor :tiers

    # TODO: Write general description for this method
    # @return [Address]
    attr_accessor :address

    # TODO: Write general description for this method
    # @return [Contact]
    attr_accessor :contact

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :alt_spid

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :spid

    # TODO: Write general description for this method
    # @return [PortCarrierTypeEnum]
    attr_accessor :port_carrier_type

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :default911_provider

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :max_tns_for_automated_port

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :customer_segment

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['account_id'] = 'accountId'
      @_hash['global_account_number'] = 'globalAccountNumber'
      @_hash['associated_catapult_account'] = 'associatedCatapultAccount'
      @_hash['company_name'] = 'companyName'
      @_hash['account_type'] = 'accountType'
      @_hash['external_id'] = 'externalId'
      @_hash['billing_cycle'] = 'billingCycle'
      @_hash['penalty_type'] = 'penaltyType'
      @_hash['pricing'] = 'pricing'
      @_hash['nena_id'] = 'nenaId'
      @_hash['tiers'] = 'tiers'
      @_hash['address'] = 'address'
      @_hash['contact'] = 'contact'
      @_hash['alt_spid'] = 'altSpid'
      @_hash['spid'] = 'spid'
      @_hash['port_carrier_type'] = 'portCarrierType'
      @_hash['default911_provider'] = 'default911Provider'
      @_hash['max_tns_for_automated_port'] = 'maxTnsForAutomatedPort'
      @_hash['customer_segment'] = 'customerSegment'
      @_hash
    end

    def initialize(account_id = nil,
                   global_account_number = nil,
                   associated_catapult_account = nil,
                   company_name = nil,
                   account_type = nil,
                   external_id = nil,
                   billing_cycle = nil,
                   penalty_type = nil,
                   pricing = nil,
                   nena_id = nil,
                   tiers = nil,
                   address = nil,
                   contact = nil,
                   alt_spid = nil,
                   spid = nil,
                   port_carrier_type = nil,
                   default911_provider = nil,
                   max_tns_for_automated_port = nil,
                   customer_segment = nil)
      @account_id = account_id
      @global_account_number = global_account_number
      @associated_catapult_account = associated_catapult_account
      @company_name = company_name
      @account_type = account_type
      @external_id = external_id
      @billing_cycle = billing_cycle
      @penalty_type = penalty_type
      @pricing = pricing
      @nena_id = nena_id
      @tiers = tiers
      @address = address
      @contact = contact
      @alt_spid = alt_spid
      @spid = spid
      @port_carrier_type = port_carrier_type
      @default911_provider = default911_provider
      @max_tns_for_automated_port = max_tns_for_automated_port
      @customer_segment = customer_segment
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      account_id = hash['accountId']
      global_account_number = hash['globalAccountNumber']
      associated_catapult_account = hash['associatedCatapultAccount']
      company_name = hash['companyName']
      account_type = hash['accountType']
      external_id = hash['externalId']
      billing_cycle = hash['billingCycle']
      penalty_type = hash['penaltyType']
      pricing = hash['pricing']
      nena_id = hash['nenaId']
      tiers = hash['tiers']
      address = Address.from_hash(hash['address']) if hash['address']
      contact = Contact.from_hash(hash['contact']) if hash['contact']
      alt_spid = hash['altSpid']
      spid = hash['spid']
      port_carrier_type = hash['portCarrierType']
      default911_provider = hash['default911Provider']
      max_tns_for_automated_port = hash['maxTnsForAutomatedPort']
      customer_segment = hash['customerSegment']

      # Create object from extracted values.
      AccountPayload.new(account_id,
                         global_account_number,
                         associated_catapult_account,
                         company_name,
                         account_type,
                         external_id,
                         billing_cycle,
                         penalty_type,
                         pricing,
                         nena_id,
                         tiers,
                         address,
                         contact,
                         alt_spid,
                         spid,
                         port_carrier_type,
                         default911_provider,
                         max_tns_for_automated_port,
                         customer_segment)
    end

    def self.from_element(root)
      account_id = XmlUtilities.from_element(root, 'AccountId', Integer)
      global_account_number = XmlUtilities.from_element(root,
                                                        'GlobalAccountNumber',
                                                        String)
      associated_catapult_account = XmlUtilities.from_element(
        root, 'AssociatedCatapultAccount', String
      )
      company_name = XmlUtilities.from_element(root, 'CompanyName', String)
      account_type = XmlUtilities.from_element(root, 'AccountType', String)
      external_id = XmlUtilities.from_element(root, 'ExternalId', String)
      billing_cycle = XmlUtilities.from_element(root, 'BillingCycle', Integer)
      penalty_type = XmlUtilities.from_element(root, 'PenaltyType', String)
      pricing = XmlUtilities.from_element(root, 'Pricing', String)
      nena_id = XmlUtilities.from_element(root, 'NenaId', String)
      tiers = XmlUtilities.from_element_to_array(root, 'Tier', Integer,
                                                 wrapping_element_name: 'Tiers')
      address = XmlUtilities.from_element(root, 'Address', Address)
      contact = XmlUtilities.from_element(root, 'Contact', Contact)
      alt_spid = XmlUtilities.from_element(root, 'AltSpid', String)
      spid = XmlUtilities.from_element(root, 'SPID', String)
      port_carrier_type = XmlUtilities.from_element(root, 'PortCarrierType',
                                                    String)
      default911_provider = XmlUtilities.from_element(root,
                                                      'Default911Provider',
                                                      String)
      max_tns_for_automated_port = XmlUtilities.from_element(
        root, 'MaxTnsForAutomatedPort', Integer
      )
      customer_segment = XmlUtilities.from_element(root, 'CustomerSegment',
                                                   String)

      new(account_id,
          global_account_number,
          associated_catapult_account,
          company_name,
          account_type,
          external_id,
          billing_cycle,
          penalty_type,
          pricing,
          nena_id,
          tiers,
          address,
          contact,
          alt_spid,
          spid,
          port_carrier_type,
          default911_provider,
          max_tns_for_automated_port,
          customer_segment)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'AccountId', account_id)
      XmlUtilities.add_as_subelement(doc, root, 'GlobalAccountNumber',
                                     global_account_number)
      XmlUtilities.add_as_subelement(doc, root, 'AssociatedCatapultAccount',
                                     associated_catapult_account)
      XmlUtilities.add_as_subelement(doc, root, 'CompanyName', company_name)
      XmlUtilities.add_as_subelement(doc, root, 'AccountType', account_type)
      XmlUtilities.add_as_subelement(doc, root, 'ExternalId', external_id)
      XmlUtilities.add_as_subelement(doc, root, 'BillingCycle', billing_cycle)
      XmlUtilities.add_as_subelement(doc, root, 'PenaltyType', penalty_type)
      XmlUtilities.add_as_subelement(doc, root, 'Pricing', pricing)
      XmlUtilities.add_as_subelement(doc, root, 'NenaId', nena_id)
      XmlUtilities.add_array_as_subelement(doc, root, 'Tier', tiers,
                                           wrapping_element_name: 'Tiers')
      XmlUtilities.add_as_subelement(doc, root, 'Address', address)
      XmlUtilities.add_as_subelement(doc, root, 'Contact', contact)
      XmlUtilities.add_as_subelement(doc, root, 'AltSpid', alt_spid)
      XmlUtilities.add_as_subelement(doc, root, 'SPID', spid)
      XmlUtilities.add_as_subelement(doc, root, 'PortCarrierType',
                                     port_carrier_type)
      XmlUtilities.add_as_subelement(doc, root, 'Default911Provider',
                                     default911_provider)
      XmlUtilities.add_as_subelement(doc, root, 'MaxTnsForAutomatedPort',
                                     max_tns_for_automated_port)
      XmlUtilities.add_as_subelement(doc, root, 'CustomerSegment',
                                     customer_segment)

      root
    end
  end
end
