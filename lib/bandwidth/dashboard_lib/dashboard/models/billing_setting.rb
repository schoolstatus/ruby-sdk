# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # BillingSetting Model.
  class BillingSetting < BaseModel
    # TODO: Write general description for this method
    # @return [Key]
    attr_accessor :key

    # TODO: Write general description for this method
    # @return [List of Value]
    attr_accessor :values

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['key'] = 'key'
      @_hash['values'] = 'values'
      @_hash
    end

    def initialize(key = nil,
                   values = nil)
      @key = key
      @values = values
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      key = Key.from_hash(hash['key']) if hash['key']
      # Parameter is an array, so we need to iterate through it
      values = nil
      unless hash['values'].nil?
        values = []
        hash['values'].each do |structure|
          values << (Value.from_hash(structure) if structure)
        end
      end

      # Create object from extracted values.
      BillingSetting.new(key,
                         values)
    end

    def self.from_element(root)
      key = XmlUtilities.from_element(root, 'Key', Key)
      values = XmlUtilities.from_element_to_array(
        root, 'Value', Value, wrapping_element_name: 'Values'
      )

      new(key,
          values)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'Key', key)
      XmlUtilities.add_array_as_subelement(doc, root, 'Value', values,
                                           wrapping_element_name: 'Values')

      root
    end
  end
end
