# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # SiteContract Model.
  class SiteContract < BaseModel
    # TODO: Write general description for this method
    # @return [SiteSalesRepresentative]
    attr_accessor :sales_representative

    # TODO: Write general description for this method
    # @return [SiteContactPerson]
    attr_accessor :contact_person

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['sales_representative'] = 'salesRepresentative'
      @_hash['contact_person'] = 'contactPerson'
      @_hash
    end

    def initialize(sales_representative = nil,
                   contact_person = nil)
      @sales_representative = sales_representative
      @contact_person = contact_person
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      if hash['salesRepresentative']
        sales_representative = SiteSalesRepresentative.from_hash(hash['salesRepresentative'])
      end
      contact_person = SiteContactPerson.from_hash(hash['contactPerson']) if
        hash['contactPerson']

      # Create object from extracted values.
      SiteContract.new(sales_representative,
                       contact_person)
    end

    def self.from_element(root)
      sales_representative = XmlUtilities.from_element(root,
                                                       'SalesRepresentative',
                                                       SiteSalesRepresentative)
      contact_person = XmlUtilities.from_element(root, 'ContactPerson',
                                                 SiteContactPerson)

      new(sales_representative,
          contact_person)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'SalesRepresentative',
                                     sales_representative)
      XmlUtilities.add_as_subelement(doc, root, 'ContactPerson', contact_person)

      root
    end
  end
end
