# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # SipPeerSmsFeature Model.
  class SipPeerSmsFeature < BaseModel
    # TODO: Write general description for this method
    # @return [SipPeerSmsFeatureSettings]
    attr_accessor :sip_peer_sms_feature_settings

    # TODO: Write general description for this method
    # @return [List of SmsHost]
    attr_accessor :sms_hosts

    # TODO: Write general description for this method
    # @return [SmsHttpSettings]
    attr_accessor :sms_http_settings

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['sip_peer_sms_feature_settings'] = 'sipPeerSmsFeatureSettings'
      @_hash['sms_hosts'] = 'smsHosts'
      @_hash['sms_http_settings'] = 'smsHttpSettings'
      @_hash
    end

    def initialize(sip_peer_sms_feature_settings = nil,
                   sms_hosts = nil,
                   sms_http_settings = nil)
      @sip_peer_sms_feature_settings = sip_peer_sms_feature_settings
      @sms_hosts = sms_hosts
      @sms_http_settings = sms_http_settings
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      if hash['sipPeerSmsFeatureSettings']
        sip_peer_sms_feature_settings = SipPeerSmsFeatureSettings.from_hash(hash['sipPeerSmsFeatureSettings'])
      end
      # Parameter is an array, so we need to iterate through it
      sms_hosts = nil
      unless hash['smsHosts'].nil?
        sms_hosts = []
        hash['smsHosts'].each do |structure|
          sms_hosts << (SmsHost.from_hash(structure) if structure)
        end
      end
      sms_http_settings = SmsHttpSettings.from_hash(hash['smsHttpSettings']) if
        hash['smsHttpSettings']

      # Create object from extracted values.
      SipPeerSmsFeature.new(sip_peer_sms_feature_settings,
                            sms_hosts,
                            sms_http_settings)
    end

    def self.from_element(root)
      sip_peer_sms_feature_settings = XmlUtilities.from_element(
        root, 'SipPeerSmsFeatureSettings', SipPeerSmsFeatureSettings
      )
      sms_hosts = XmlUtilities.from_element_to_array(
        root, 'SmsHost', SmsHost, wrapping_element_name: 'SmppHosts'
      )
      sms_http_settings = XmlUtilities.from_element(root, 'HttpSettings',
                                                    SmsHttpSettings)

      new(sip_peer_sms_feature_settings,
          sms_hosts,
          sms_http_settings)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'SipPeerSmsFeatureSettings',
                                     sip_peer_sms_feature_settings)
      XmlUtilities.add_array_as_subelement(doc, root, 'SmsHost', sms_hosts,
                                           wrapping_element_name: 'SmppHosts')
      XmlUtilities.add_as_subelement(doc, root, 'HttpSettings',
                                     sms_http_settings)

      root
    end
  end
end
