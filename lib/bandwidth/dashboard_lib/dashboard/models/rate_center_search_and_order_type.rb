# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # RateCenterSearchAndOrderType Model.
  class RateCenterSearchAndOrderType < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :rate_center_abbreviation

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :state

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :quantity

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['rate_center_abbreviation'] = 'rateCenterAbbreviation'
      @_hash['state'] = 'state'
      @_hash['quantity'] = 'quantity'
      @_hash
    end

    def initialize(rate_center_abbreviation = nil,
                   state = nil,
                   quantity = nil)
      @rate_center_abbreviation = rate_center_abbreviation
      @state = state
      @quantity = quantity
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      rate_center_abbreviation = hash['rateCenterAbbreviation']
      state = hash['state']
      quantity = hash['quantity']

      # Create object from extracted values.
      RateCenterSearchAndOrderType.new(rate_center_abbreviation,
                                       state,
                                       quantity)
    end

    def self.from_element(root)
      rate_center_abbreviation = XmlUtilities.from_element(root, 'RateCenter',
                                                           String)
      state = XmlUtilities.from_element(root, 'State', String)
      quantity = XmlUtilities.from_element(root, 'Quantity', Integer)

      new(rate_center_abbreviation,
          state,
          quantity)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'RateCenter',
                                     rate_center_abbreviation)
      XmlUtilities.add_as_subelement(doc, root, 'State', state)
      XmlUtilities.add_as_subelement(doc, root, 'Quantity', quantity)

      root
    end
  end
end
