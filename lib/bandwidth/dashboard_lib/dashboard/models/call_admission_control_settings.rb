# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # CallAdmissionControlSettings Model.
  class CallAdmissionControlSettings < BaseModel
    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :cps

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :concurrent_calls

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['cps'] = 'cps'
      @_hash['concurrent_calls'] = 'concurrentCalls'
      @_hash
    end

    def initialize(cps = nil,
                   concurrent_calls = nil)
      @cps = cps
      @concurrent_calls = concurrent_calls
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      cps = hash['cps']
      concurrent_calls = hash['concurrentCalls']

      # Create object from extracted values.
      CallAdmissionControlSettings.new(cps,
                                       concurrent_calls)
    end

    def self.from_element(root)
      cps = XmlUtilities.from_element(root, 'CPS', Integer)
      concurrent_calls = XmlUtilities.from_element(root, 'ConcurrentCalls',
                                                   Integer)

      new(cps,
          concurrent_calls)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'CPS', cps)
      XmlUtilities.add_as_subelement(doc, root, 'ConcurrentCalls',
                                     concurrent_calls)

      root
    end
  end
end
