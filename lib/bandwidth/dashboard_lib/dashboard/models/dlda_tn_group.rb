# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # DldaTnGroup Model.
  class DldaTnGroup < BaseModel
    # TODO: Write general description for this method
    # @return [List of String]
    attr_accessor :group_numbers

    # TODO: Write general description for this method
    # @return [SubscriberTypeEnum]
    attr_accessor :subscriber_type

    # TODO: Write general description for this method
    # @return [ListingTypeEnum]
    attr_accessor :listing_type

    # TODO: Write general description for this method
    # @return [DldaListingName]
    attr_accessor :listing_name

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :list_address

    # TODO: Write general description for this method
    # @return [Address]
    attr_accessor :address

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['group_numbers'] = 'groupNumbers'
      @_hash['subscriber_type'] = 'subscriberType'
      @_hash['listing_type'] = 'listingType'
      @_hash['listing_name'] = 'listingName'
      @_hash['list_address'] = 'listAddress'
      @_hash['address'] = 'address'
      @_hash
    end

    def initialize(subscriber_type = nil,
                   listing_type = nil,
                   list_address = nil,
                   group_numbers = nil,
                   listing_name = nil,
                   address = nil)
      @group_numbers = group_numbers
      @subscriber_type = subscriber_type
      @listing_type = listing_type
      @listing_name = listing_name
      @list_address = list_address
      @address = address
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      subscriber_type = hash['subscriberType']
      listing_type = hash['listingType']
      list_address = hash['listAddress']
      group_numbers = hash['groupNumbers']
      listing_name = DldaListingName.from_hash(hash['listingName']) if
        hash['listingName']
      address = Address.from_hash(hash['address']) if hash['address']

      # Create object from extracted values.
      DldaTnGroup.new(subscriber_type,
                      listing_type,
                      list_address,
                      group_numbers,
                      listing_name,
                      address)
    end

    def self.from_element(root)
      subscriber_type = XmlUtilities.from_element(root, 'SubscriberType',
                                                  String)
      listing_type = XmlUtilities.from_element(root, 'ListingType', String)
      list_address = XmlUtilities.from_element(root, 'ListAddress', TrueClass)
      group_numbers = XmlUtilities.from_element_to_array(
        root, 'TelephoneNumber', String,
        wrapping_element_name: 'TelephoneNumbers'
      )
      listing_name = XmlUtilities.from_element(root, 'ListingName',
                                               DldaListingName)
      address = XmlUtilities.from_element(root, 'Address', Address)

      new(subscriber_type,
          listing_type,
          list_address,
          group_numbers,
          listing_name,
          address)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'SubscriberType',
                                     subscriber_type)
      XmlUtilities.add_as_subelement(doc, root, 'ListingType', listing_type)
      XmlUtilities.add_as_subelement(doc, root, 'ListAddress', list_address)
      XmlUtilities.add_array_as_subelement(
        doc, root, 'TelephoneNumber', group_numbers,
        wrapping_element_name: 'TelephoneNumbers'
      )
      XmlUtilities.add_as_subelement(doc, root, 'ListingName', listing_name)
      XmlUtilities.add_as_subelement(doc, root, 'Address', address)

      root
    end
  end
end
