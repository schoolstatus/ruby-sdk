# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # TelephoneNumbersHistoryResponse Model.
  class TelephoneNumbersHistoryResponse < BaseModel
    # TODO: Write general description for this method
    # @return [Object]
    attr_accessor :payload

    # TODO: Write general description for this method
    # @return [PaginationLinks]
    attr_accessor :pagination_links

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :telephone_number_count

    # TODO: Write general description for this method
    # @return [List of TelephoneNumberGroupError]
    attr_accessor :error_list

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['payload'] = 'payload'
      @_hash['pagination_links'] = 'paginationLinks'
      @_hash['telephone_number_count'] = 'telephoneNumberCount'
      @_hash['error_list'] = 'errorList'
      @_hash
    end

    def initialize(payload = nil,
                   pagination_links = nil,
                   telephone_number_count = nil,
                   error_list = nil)
      @payload = payload
      @pagination_links = pagination_links
      @telephone_number_count = telephone_number_count
      @error_list = error_list
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      payload = hash['payload']
      pagination_links = PaginationLinks.from_hash(hash['paginationLinks']) if
        hash['paginationLinks']
      telephone_number_count = hash['telephoneNumberCount']
      # Parameter is an array, so we need to iterate through it
      error_list = nil
      unless hash['errorList'].nil?
        error_list = []
        hash['errorList'].each do |structure|
          error_list << (TelephoneNumberGroupError.from_hash(structure) if structure)
        end
      end

      # Create object from extracted values.
      TelephoneNumbersHistoryResponse.new(payload,
                                          pagination_links,
                                          telephone_number_count,
                                          error_list)
    end

    def self.from_element(root)
      payload = XmlUtilities.from_element(root, 'TelephoneNumbers', String)
      pagination_links = XmlUtilities.from_element(root, 'Links',
                                                   PaginationLinks)
      telephone_number_count = XmlUtilities.from_element(root,
                                                         'TelephoneNumberCount',
                                                         Integer)
      error_list = XmlUtilities.from_element_to_array(
        root, 'Error', TelephoneNumberGroupError,
        wrapping_element_name: 'ErrorList'
      )

      new(payload,
          pagination_links,
          telephone_number_count,
          error_list)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'TelephoneNumbers', payload)
      XmlUtilities.add_as_subelement(doc, root, 'Links', pagination_links)
      XmlUtilities.add_as_subelement(doc, root, 'TelephoneNumberCount',
                                     telephone_number_count)
      XmlUtilities.add_array_as_subelement(doc, root, 'Error', error_list,
                                           wrapping_element_name: 'ErrorList')

      root
    end
  end
end
