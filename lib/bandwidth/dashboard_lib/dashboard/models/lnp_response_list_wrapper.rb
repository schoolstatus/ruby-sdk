# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # LnpResponseListWrapper Model.
  class LnpResponseListWrapper < BaseModel
    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :total_count

    # TODO: Write general description for this method
    # @return [PaginationLinks]
    attr_accessor :pagination_links

    # TODO: Write general description for this method
    # @return [List of LnpResponseWrapper]
    attr_accessor :lnp_port_info_for_given_status

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['total_count'] = 'totalCount'
      @_hash['pagination_links'] = 'paginationLinks'
      @_hash['lnp_port_info_for_given_status'] = 'lnpPortInfoForGivenStatus'
      @_hash
    end

    def initialize(total_count = nil,
                   pagination_links = nil,
                   lnp_port_info_for_given_status = nil)
      @total_count = total_count
      @pagination_links = pagination_links
      @lnp_port_info_for_given_status = lnp_port_info_for_given_status
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      total_count = hash['totalCount']
      pagination_links = PaginationLinks.from_hash(hash['paginationLinks']) if
        hash['paginationLinks']
      # Parameter is an array, so we need to iterate through it
      lnp_port_info_for_given_status = nil
      unless hash['lnpPortInfoForGivenStatus'].nil?
        lnp_port_info_for_given_status = []
        hash['lnpPortInfoForGivenStatus'].each do |structure|
          lnp_port_info_for_given_status << (LnpResponseWrapper.from_hash(structure) if structure)
        end
      end

      # Create object from extracted values.
      LnpResponseListWrapper.new(total_count,
                                 pagination_links,
                                 lnp_port_info_for_given_status)
    end

    def self.from_element(root)
      total_count = XmlUtilities.from_element(root, 'TotalCount', Integer)
      pagination_links = XmlUtilities.from_element(root, 'Links',
                                                   PaginationLinks)
      lnp_port_info_for_given_status = XmlUtilities.from_element_to_array(
        root, 'LNPPortInfoForGivenStatus', LnpResponseWrapper
      )

      new(total_count,
          pagination_links,
          lnp_port_info_for_given_status)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'TotalCount', total_count)
      XmlUtilities.add_as_subelement(doc, root, 'Links', pagination_links)
      XmlUtilities.add_array_as_subelement(doc, root,
                                           'LNPPortInfoForGivenStatus',
                                           lnp_port_info_for_given_status)

      root
    end
  end
end
