# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # TokenGroups Model.
  class TokenGroups < BaseModel
    # TODO: Write general description for this method
    # @return [List of TokenGroup]
    attr_accessor :token_groups

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['token_groups'] = 'tokenGroups'
      @_hash
    end

    def initialize(token_groups = nil)
      @token_groups = token_groups
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      # Parameter is an array, so we need to iterate through it
      token_groups = nil
      unless hash['tokenGroups'].nil?
        token_groups = []
        hash['tokenGroups'].each do |structure|
          token_groups << (TokenGroup.from_hash(structure) if structure)
        end
      end

      # Create object from extracted values.
      TokenGroups.new(token_groups)
    end

    def self.from_element(root)
      token_groups = XmlUtilities.from_element_to_array(root, 'TokenGroup',
                                                        TokenGroup)

      new(token_groups)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_array_as_subelement(doc, root, 'TokenGroup',
                                           token_groups)

      root
    end
  end
end
