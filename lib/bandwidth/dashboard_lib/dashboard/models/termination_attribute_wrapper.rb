# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # TerminationAttributeWrapper Model.
  class TerminationAttributeWrapper < BaseModel
    # TODO: Write general description for this method
    # @return [Long]
    attr_accessor :account_id

    # TODO: Write general description for this method
    # @return [TerminationAttribute]
    attr_accessor :attribute

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['account_id'] = 'accountId'
      @_hash['attribute'] = 'attribute'
      @_hash
    end

    def initialize(account_id = nil,
                   attribute = nil)
      @account_id = account_id
      @attribute = attribute
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      account_id = hash['accountId']
      attribute = TerminationAttribute.from_hash(hash['attribute']) if
        hash['attribute']

      # Create object from extracted values.
      TerminationAttributeWrapper.new(account_id,
                                      attribute)
    end

    def self.from_element(root)
      account_id = XmlUtilities.from_element(root, 'accountId', Integer)
      attribute = XmlUtilities.from_element(root, 'TerminationAttribute',
                                            TerminationAttribute)

      new(account_id,
          attribute)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'accountId', account_id)
      XmlUtilities.add_as_subelement(doc, root, 'TerminationAttribute',
                                     attribute)

      root
    end
  end
end
