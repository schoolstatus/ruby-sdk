# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # AddressErrorDescription Model.
  class AddressErrorDescription < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :address_inconsistencies

    # TODO: Write general description for this method
    # @return [E911GeocodeAddress]
    attr_accessor :recommended_address

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['address_inconsistencies'] = 'addressInconsistencies'
      @_hash['recommended_address'] = 'recommendedAddress'
      @_hash
    end

    def initialize(address_inconsistencies = nil,
                   recommended_address = nil)
      @address_inconsistencies = address_inconsistencies
      @recommended_address = recommended_address
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      address_inconsistencies = hash['addressInconsistencies']
      if hash['recommendedAddress']
        recommended_address = E911GeocodeAddress.from_hash(hash['recommendedAddress'])
      end

      # Create object from extracted values.
      AddressErrorDescription.new(address_inconsistencies,
                                  recommended_address)
    end

    def self.from_element(root)
      address_inconsistencies = XmlUtilities.from_element(
        root, 'AddressInconsistencies', String
      )
      recommended_address = XmlUtilities.from_element(root,
                                                      'RecommendedAddress',
                                                      E911GeocodeAddress)

      new(address_inconsistencies,
          recommended_address)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'AddressInconsistencies',
                                     address_inconsistencies)
      XmlUtilities.add_as_subelement(doc, root, 'RecommendedAddress',
                                     recommended_address)

      root
    end
  end
end
