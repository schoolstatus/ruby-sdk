# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # SipAuthDnsRecord Model.
  class SipAuthDnsRecord < BaseModel
    # TODO: Write general description for this method
    # @return [TypeEnum]
    attr_accessor :type

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :data

    # TODO: Write general description for this method
    # @return [Long]
    attr_accessor :ttl

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['type'] = 'type'
      @_hash['name'] = 'name'
      @_hash['data'] = 'data'
      @_hash['ttl'] = 'ttl'
      @_hash
    end

    def initialize(type = nil,
                   name = nil,
                   data = nil,
                   ttl = nil)
      @type = type
      @name = name
      @data = data
      @ttl = ttl
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      type = hash['type']
      name = hash['name']
      data = hash['data']
      ttl = hash['ttl']

      # Create object from extracted values.
      SipAuthDnsRecord.new(type,
                           name,
                           data,
                           ttl)
    end

    def self.from_element(root)
      type = XmlUtilities.from_element(root, 'Type', String)
      name = XmlUtilities.from_element(root, 'Name', String)
      data = XmlUtilities.from_element(root, 'Data', String)
      ttl = XmlUtilities.from_element(root, 'TTL', Integer)

      new(type,
          name,
          data,
          ttl)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'Type', type)
      XmlUtilities.add_as_subelement(doc, root, 'Name', name)
      XmlUtilities.add_as_subelement(doc, root, 'Data', data)
      XmlUtilities.add_as_subelement(doc, root, 'TTL', ttl)

      root
    end
  end
end
