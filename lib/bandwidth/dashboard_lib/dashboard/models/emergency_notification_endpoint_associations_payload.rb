# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # EmergencyNotificationEndpointAssociationsPayload Model.
  class EmergencyNotificationEndpointAssociationsPayload < BaseModel
    # TODO: Write general description for this method
    # @return [List of String]
    attr_accessor :emergency_notification_group

    # TODO: Write general description for this method
    # @return [List of EepToEngAssociationsPayload]
    attr_accessor :added_associations

    # TODO: Write general description for this method
    # @return [List of EepToEngAssociationsPayload]
    attr_accessor :deleted_associations

    # TODO: Write general description for this method
    # @return [List of String]
    attr_accessor :error_list

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['emergency_notification_group'] = 'emergencyNotificationGroup'
      @_hash['added_associations'] = 'addedAssociations'
      @_hash['deleted_associations'] = 'deletedAssociations'
      @_hash['error_list'] = 'errorList'
      @_hash
    end

    def initialize(emergency_notification_group = nil,
                   added_associations = nil,
                   deleted_associations = nil,
                   error_list = nil)
      @emergency_notification_group = emergency_notification_group
      @added_associations = added_associations
      @deleted_associations = deleted_associations
      @error_list = error_list
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      emergency_notification_group = hash['emergencyNotificationGroup']
      # Parameter is an array, so we need to iterate through it
      added_associations = nil
      unless hash['addedAssociations'].nil?
        added_associations = []
        hash['addedAssociations'].each do |structure|
          added_associations << (EepToEngAssociationsPayload.from_hash(structure) if structure)
        end
      end
      # Parameter is an array, so we need to iterate through it
      deleted_associations = nil
      unless hash['deletedAssociations'].nil?
        deleted_associations = []
        hash['deletedAssociations'].each do |structure|
          deleted_associations << (EepToEngAssociationsPayload.from_hash(structure) if structure)
        end
      end
      error_list = hash['errorList']

      # Create object from extracted values.
      EmergencyNotificationEndpointAssociationsPayload.new(emergency_notification_group,
                                                           added_associations,
                                                           deleted_associations,
                                                           error_list)
    end

    def self.from_element(root)
      emergency_notification_group = XmlUtilities.from_element_to_array(
        root, 'Identifier', String,
        wrapping_element_name: 'EmergencyNotificationGroup'
      )
      added_associations = XmlUtilities.from_element_to_array(
        root, 'EepToEngAssociations', EepToEngAssociationsPayload,
        wrapping_element_name: 'AddedAssociations'
      )
      deleted_associations = XmlUtilities.from_element_to_array(
        root, 'EepToEngAssociations', EepToEngAssociationsPayload,
        wrapping_element_name: 'DeletedAssociations'
      )
      error_list = XmlUtilities.from_element_to_array(
        root, 'Description', String,
        wrapping_element_name: 'ErrorList'
      )

      new(emergency_notification_group,
          added_associations,
          deleted_associations,
          error_list)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_array_as_subelement(
        doc, root, 'Identifier', emergency_notification_group,
        wrapping_element_name: 'EmergencyNotificationGroup'
      )
      XmlUtilities.add_array_as_subelement(
        doc, root, 'EepToEngAssociations', added_associations,
        wrapping_element_name: 'AddedAssociations'
      )
      XmlUtilities.add_array_as_subelement(
        doc, root, 'EepToEngAssociations', deleted_associations,
        wrapping_element_name: 'DeletedAssociations'
      )
      XmlUtilities.add_array_as_subelement(doc, root, 'Description', error_list,
                                           wrapping_element_name: 'ErrorList')

      root
    end
  end
end
