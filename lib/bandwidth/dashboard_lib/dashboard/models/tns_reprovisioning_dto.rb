# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # TnsReprovisioningDto Model.
  class TnsReprovisioningDto < BaseModel
    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :id

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :version

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :completed_quantity

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :created_by_user

    # TODO: Write general description for this method
    # @return [List of TelephoneNumberGroupError]
    attr_accessor :errors

    # TODO: Write general description for this method
    # @return [TelephoneNumbers]
    attr_accessor :reprovisioned_tns

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :new

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['version'] = 'version'
      @_hash['completed_quantity'] = 'completedQuantity'
      @_hash['created_by_user'] = 'createdByUser'
      @_hash['errors'] = 'errors'
      @_hash['reprovisioned_tns'] = 'reprovisionedTns'
      @_hash['new'] = 'new'
      @_hash
    end

    def initialize(id = nil,
                   version = nil,
                   completed_quantity = nil,
                   created_by_user = nil,
                   errors = nil,
                   reprovisioned_tns = nil,
                   new = nil)
      @id = id
      @version = version
      @completed_quantity = completed_quantity
      @created_by_user = created_by_user
      @errors = errors
      @reprovisioned_tns = reprovisioned_tns
      @new = new
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash['id']
      version = hash['version']
      completed_quantity = hash['completedQuantity']
      created_by_user = hash['createdByUser']
      # Parameter is an array, so we need to iterate through it
      errors = nil
      unless hash['errors'].nil?
        errors = []
        hash['errors'].each do |structure|
          errors << (TelephoneNumberGroupError.from_hash(structure) if structure)
        end
      end
      if hash['reprovisionedTns']
        reprovisioned_tns = TelephoneNumbers.from_hash(hash['reprovisionedTns'])
      end
      new = hash['new']

      # Create object from extracted values.
      TnsReprovisioningDto.new(id,
                               version,
                               completed_quantity,
                               created_by_user,
                               errors,
                               reprovisioned_tns,
                               new)
    end

    def self.from_element(root)
      id = XmlUtilities.from_element(root, 'id', Integer)
      version = XmlUtilities.from_element(root, 'version', Integer)
      completed_quantity = XmlUtilities.from_element(root, 'CompletedQuantity',
                                                     Integer)
      created_by_user = XmlUtilities.from_element(root, 'CreatedByUser', String)
      errors = XmlUtilities.from_element_to_array(
        root, 'Error', TelephoneNumberGroupError,
        wrapping_element_name: 'ErrorList'
      )
      reprovisioned_tns = XmlUtilities.from_element(root, 'CompletedNumbers',
                                                    TelephoneNumbers)
      new = XmlUtilities.from_element(root, 'new', TrueClass)

      new(id,
          version,
          completed_quantity,
          created_by_user,
          errors,
          reprovisioned_tns,
          new)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'id', id)
      XmlUtilities.add_as_subelement(doc, root, 'version', version)
      XmlUtilities.add_as_subelement(doc, root, 'CompletedQuantity',
                                     completed_quantity)
      XmlUtilities.add_as_subelement(doc, root, 'CreatedByUser',
                                     created_by_user)
      XmlUtilities.add_array_as_subelement(doc, root, 'Error', errors,
                                           wrapping_element_name: 'ErrorList')
      XmlUtilities.add_as_subelement(doc, root, 'CompletedNumbers',
                                     reprovisioned_tns)
      XmlUtilities.add_as_subelement(doc, root, 'new', new)

      root
    end
  end
end
