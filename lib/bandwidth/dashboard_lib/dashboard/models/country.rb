# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # Country Model.
  class Country < BaseModel
    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :two_letter_code

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :three_letter_code

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :supported

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['name'] = 'name'
      @_hash['two_letter_code'] = 'twoLetterCode'
      @_hash['three_letter_code'] = 'threeLetterCode'
      @_hash['supported'] = 'supported'
      @_hash
    end

    def initialize(id = nil,
                   name = nil,
                   two_letter_code = nil,
                   three_letter_code = nil,
                   supported = nil)
      @id = id
      @name = name
      @two_letter_code = two_letter_code
      @three_letter_code = three_letter_code
      @supported = supported
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash['id']
      name = hash['name']
      two_letter_code = hash['twoLetterCode']
      three_letter_code = hash['threeLetterCode']
      supported = hash['supported']

      # Create object from extracted values.
      Country.new(id,
                  name,
                  two_letter_code,
                  three_letter_code,
                  supported)
    end

    def self.from_element(root)
      id = XmlUtilities.from_element(root, 'Id', Integer)
      name = XmlUtilities.from_element(root, 'CountryName', String)
      two_letter_code = XmlUtilities.from_element(root, 'TwoLetterCode', String)
      three_letter_code = XmlUtilities.from_element(root, 'ThreeLetterCode',
                                                    String)
      supported = XmlUtilities.from_element(root, 'Supported', TrueClass)

      new(id,
          name,
          two_letter_code,
          three_letter_code,
          supported)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'Id', id)
      XmlUtilities.add_as_subelement(doc, root, 'CountryName', name)
      XmlUtilities.add_as_subelement(doc, root, 'TwoLetterCode',
                                     two_letter_code)
      XmlUtilities.add_as_subelement(doc, root, 'ThreeLetterCode',
                                     three_letter_code)
      XmlUtilities.add_as_subelement(doc, root, 'Supported', supported)

      root
    end
  end
end
