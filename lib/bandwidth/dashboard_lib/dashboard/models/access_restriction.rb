# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # AccessRestriction Model.
  class AccessRestriction < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :product

    # TODO: Write general description for this method
    # @return [List of String]
    attr_accessor :access_restriction_types

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['product'] = 'product'
      @_hash['access_restriction_types'] = 'accessRestrictionTypes'
      @_hash
    end

    def initialize(product = nil,
                   access_restriction_types = nil)
      @product = product
      @access_restriction_types = access_restriction_types
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      product = hash['product']
      access_restriction_types = hash['accessRestrictionTypes']

      # Create object from extracted values.
      AccessRestriction.new(product,
                            access_restriction_types)
    end

    def self.from_element(root)
      product = XmlUtilities.from_element(root, 'RestrictedProduct', String)
      access_restriction_types = XmlUtilities.from_element_to_array(
        root, 'RestrictedAccessType', String,
        wrapping_element_name: 'RestrictedAccessTypes'
      )

      new(product,
          access_restriction_types)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'RestrictedProduct', product)
      XmlUtilities.add_array_as_subelement(
        doc, root, 'RestrictedAccessType', access_restriction_types,
        wrapping_element_name: 'RestrictedAccessTypes'
      )

      root
    end
  end
end
