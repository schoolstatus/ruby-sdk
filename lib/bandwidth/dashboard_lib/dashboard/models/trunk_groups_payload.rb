# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # TrunkGroupsPayload Model.
  class TrunkGroupsPayload < BaseModel
    # TODO: Write general description for this method
    # @return [List of TrunkGroup]
    attr_accessor :trunk_groups

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['trunk_groups'] = 'trunkGroups'
      @_hash
    end

    def initialize(trunk_groups = nil)
      @trunk_groups = trunk_groups
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      # Parameter is an array, so we need to iterate through it
      trunk_groups = nil
      unless hash['trunkGroups'].nil?
        trunk_groups = []
        hash['trunkGroups'].each do |structure|
          trunk_groups << (TrunkGroup.from_hash(structure) if structure)
        end
      end

      # Create object from extracted values.
      TrunkGroupsPayload.new(trunk_groups)
    end

    def self.from_element(root)
      trunk_groups = XmlUtilities.from_element_to_array(root, 'TrunkGroup',
                                                        TrunkGroup)

      new(trunk_groups)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_array_as_subelement(doc, root, 'TrunkGroup',
                                           trunk_groups)

      root
    end
  end
end
