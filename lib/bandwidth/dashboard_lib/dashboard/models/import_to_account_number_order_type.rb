# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # ImportToAccountNumberOrderType Model.
  class ImportToAccountNumberOrderType < BaseModel
    # TODO: Write general description for this method
    # @return [List of String]
    attr_accessor :telephone_numbers

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :vendor_name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :batch_id

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :batch_size

    # TODO: Write general description for this method
    # @return [ImportBillingTypeEnum]
    attr_accessor :import_billing_type

    # TODO: Write general description for this method
    # @return [List of String]
    attr_accessor :tn_attributes

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :initial_status

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['telephone_numbers'] = 'telephoneNumbers'
      @_hash['vendor_name'] = 'vendorName'
      @_hash['batch_id'] = 'batchId'
      @_hash['batch_size'] = 'batchSize'
      @_hash['import_billing_type'] = 'importBillingType'
      @_hash['tn_attributes'] = 'tnAttributes'
      @_hash['initial_status'] = 'initialStatus'
      @_hash
    end

    def initialize(telephone_numbers = nil,
                   vendor_name = nil,
                   batch_id = nil,
                   batch_size = nil,
                   import_billing_type = nil,
                   tn_attributes = nil,
                   initial_status = nil)
      @telephone_numbers = telephone_numbers
      @vendor_name = vendor_name
      @batch_id = batch_id
      @batch_size = batch_size
      @import_billing_type = import_billing_type
      @tn_attributes = tn_attributes
      @initial_status = initial_status
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      telephone_numbers = hash['telephoneNumbers']
      vendor_name = hash['vendorName']
      batch_id = hash['batchId']
      batch_size = hash['batchSize']
      import_billing_type = hash['importBillingType']
      tn_attributes = hash['tnAttributes']
      initial_status = hash['initialStatus']

      # Create object from extracted values.
      ImportToAccountNumberOrderType.new(telephone_numbers,
                                         vendor_name,
                                         batch_id,
                                         batch_size,
                                         import_billing_type,
                                         tn_attributes,
                                         initial_status)
    end

    def self.from_element(root)
      telephone_numbers = XmlUtilities.from_element_to_array(
        root, 'telephoneNumber', String,
        wrapping_element_name: 'TelephoneNumberList'
      )
      vendor_name = XmlUtilities.from_element(root, 'VendorName', String)
      batch_id = XmlUtilities.from_element(root, 'BatchId', String)
      batch_size = XmlUtilities.from_element(root, 'BatchSize', Integer)
      import_billing_type = XmlUtilities.from_element(root, 'BillingType',
                                                      String)
      tn_attributes = XmlUtilities.from_element_to_array(
        root, 'TnAttribute', String,
        wrapping_element_name: 'TnAttributes'
      )
      initial_status = XmlUtilities.from_element(root, 'InitialStatus', String)

      new(telephone_numbers,
          vendor_name,
          batch_id,
          batch_size,
          import_billing_type,
          tn_attributes,
          initial_status)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_array_as_subelement(
        doc, root, 'telephoneNumber', telephone_numbers,
        wrapping_element_name: 'TelephoneNumberList'
      )
      XmlUtilities.add_as_subelement(doc, root, 'VendorName', vendor_name)
      XmlUtilities.add_as_subelement(doc, root, 'BatchId', batch_id)
      XmlUtilities.add_as_subelement(doc, root, 'BatchSize', batch_size)
      XmlUtilities.add_as_subelement(doc, root, 'BillingType',
                                     import_billing_type)
      XmlUtilities.add_array_as_subelement(
        doc, root, 'TnAttribute', tn_attributes,
        wrapping_element_name: 'TnAttributes'
      )
      XmlUtilities.add_as_subelement(doc, root, 'InitialStatus', initial_status)

      root
    end
  end
end
