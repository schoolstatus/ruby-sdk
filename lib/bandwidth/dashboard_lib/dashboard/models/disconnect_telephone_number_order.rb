# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # DisconnectTelephoneNumberOrder Model.
  class DisconnectTelephoneNumberOrder < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :last_modified_by

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :customer_order_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :order_create_date

    # TODO: Write general description for this method
    # @return [DisconnectTelephoneNumberOrderType]
    attr_accessor :order_type

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['name'] = 'name'
      @_hash['last_modified_by'] = 'lastModifiedBy'
      @_hash['customer_order_id'] = 'customerOrderId'
      @_hash['order_create_date'] = 'orderCreateDate'
      @_hash['order_type'] = 'orderType'
      @_hash
    end

    def initialize(id = nil,
                   name = nil,
                   last_modified_by = nil,
                   customer_order_id = nil,
                   order_create_date = nil,
                   order_type = nil)
      @id = id
      @name = name
      @last_modified_by = last_modified_by
      @customer_order_id = customer_order_id
      @order_create_date = order_create_date
      @order_type = order_type
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash['id']
      name = hash['name']
      last_modified_by = hash['lastModifiedBy']
      customer_order_id = hash['customerOrderId']
      order_create_date = hash['orderCreateDate']
      if hash['orderType']
        order_type = DisconnectTelephoneNumberOrderType.from_hash(hash['orderType'])
      end

      # Create object from extracted values.
      DisconnectTelephoneNumberOrder.new(id,
                                         name,
                                         last_modified_by,
                                         customer_order_id,
                                         order_create_date,
                                         order_type)
    end

    def self.from_element(root)
      id = XmlUtilities.from_element(root, 'id', String)
      name = XmlUtilities.from_element(root, 'Name', String)
      last_modified_by = XmlUtilities.from_element(root, 'LastModifiedBy',
                                                   String)
      customer_order_id = XmlUtilities.from_element(root, 'CustomerOrderId',
                                                    String)
      order_create_date = XmlUtilities.from_element(root, 'OrderCreateDate',
                                                    String)
      order_type = XmlUtilities.from_element(
        root, 'DisconnectTelephoneNumberOrderType',
        DisconnectTelephoneNumberOrderType
      )

      new(id,
          name,
          last_modified_by,
          customer_order_id,
          order_create_date,
          order_type)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'id', id)
      XmlUtilities.add_as_subelement(doc, root, 'Name', name)
      XmlUtilities.add_as_subelement(doc, root, 'LastModifiedBy',
                                     last_modified_by)
      XmlUtilities.add_as_subelement(doc, root, 'CustomerOrderId',
                                     customer_order_id)
      XmlUtilities.add_as_subelement(doc, root, 'OrderCreateDate',
                                     order_create_date)
      XmlUtilities.add_as_subelement(doc, root,
                                     'DisconnectTelephoneNumberOrderType',
                                     order_type)

      root
    end
  end
end
