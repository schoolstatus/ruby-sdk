# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # TelephoneNumberDetailsWrapper Model.
  class TelephoneNumberDetailsWrapper < BaseModel
    # TODO: Write general description for this method
    # @return [List of OrderDetailsReport]
    attr_accessor :states

    # TODO: Write general description for this method
    # @return [List of OrderDetailsReport]
    attr_accessor :rate_centers

    # TODO: Write general description for this method
    # @return [List of OrderDetailsReport]
    attr_accessor :cities

    # TODO: Write general description for this method
    # @return [List of OrderDetailsReport]
    attr_accessor :tiers

    # TODO: Write general description for this method
    # @return [List of OrderDetailsReport]
    attr_accessor :vendors

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['states'] = 'States'
      @_hash['rate_centers'] = 'RateCenters'
      @_hash['cities'] = 'Cities'
      @_hash['tiers'] = 'Tiers'
      @_hash['vendors'] = 'Vendors'
      @_hash
    end

    def initialize(states = nil,
                   rate_centers = nil,
                   cities = nil,
                   tiers = nil,
                   vendors = nil)
      @states = states
      @rate_centers = rate_centers
      @cities = cities
      @tiers = tiers
      @vendors = vendors
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      # Parameter is an array, so we need to iterate through it
      states = nil
      unless hash['States'].nil?
        states = []
        hash['States'].each do |structure|
          states << (OrderDetailsReport.from_hash(structure) if structure)
        end
      end
      # Parameter is an array, so we need to iterate through it
      rate_centers = nil
      unless hash['RateCenters'].nil?
        rate_centers = []
        hash['RateCenters'].each do |structure|
          rate_centers << (OrderDetailsReport.from_hash(structure) if structure)
        end
      end
      # Parameter is an array, so we need to iterate through it
      cities = nil
      unless hash['Cities'].nil?
        cities = []
        hash['Cities'].each do |structure|
          cities << (OrderDetailsReport.from_hash(structure) if structure)
        end
      end
      # Parameter is an array, so we need to iterate through it
      tiers = nil
      unless hash['Tiers'].nil?
        tiers = []
        hash['Tiers'].each do |structure|
          tiers << (OrderDetailsReport.from_hash(structure) if structure)
        end
      end
      # Parameter is an array, so we need to iterate through it
      vendors = nil
      unless hash['Vendors'].nil?
        vendors = []
        hash['Vendors'].each do |structure|
          vendors << (OrderDetailsReport.from_hash(structure) if structure)
        end
      end

      # Create object from extracted values.
      TelephoneNumberDetailsWrapper.new(states,
                                        rate_centers,
                                        cities,
                                        tiers,
                                        vendors)
    end

    def self.from_element(root)
      states = XmlUtilities.from_element_to_array(
        root, 'TelephoneDetailsReport', OrderDetailsReport,
        wrapping_element_name: 'States'
      )
      rate_centers = XmlUtilities.from_element_to_array(
        root, 'TelephoneDetailsReport', OrderDetailsReport,
        wrapping_element_name: 'RateCenters'
      )
      cities = XmlUtilities.from_element_to_array(
        root, 'TelephoneDetailsReport', OrderDetailsReport,
        wrapping_element_name: 'Cities'
      )
      tiers = XmlUtilities.from_element_to_array(root, 'TelephoneDetailsReport',
                                                 OrderDetailsReport,
                                                 wrapping_element_name: 'Tiers')
      vendors = XmlUtilities.from_element_to_array(
        root, 'TelephoneDetailsReport', OrderDetailsReport,
        wrapping_element_name: 'Vendors'
      )

      new(states,
          rate_centers,
          cities,
          tiers,
          vendors)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_array_as_subelement(doc, root, 'TelephoneDetailsReport',
                                           states,
                                           wrapping_element_name: 'States')
      XmlUtilities.add_array_as_subelement(doc, root, 'TelephoneDetailsReport',
                                           rate_centers,
                                           wrapping_element_name: 'RateCenters')
      XmlUtilities.add_array_as_subelement(doc, root, 'TelephoneDetailsReport',
                                           cities,
                                           wrapping_element_name: 'Cities')
      XmlUtilities.add_array_as_subelement(doc, root, 'TelephoneDetailsReport',
                                           tiers,
                                           wrapping_element_name: 'Tiers')
      XmlUtilities.add_array_as_subelement(doc, root, 'TelephoneDetailsReport',
                                           vendors,
                                           wrapping_element_name: 'Vendors')

      root
    end
  end
end
