# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # LdapRole Model.
  class LdapRole < BaseModel
    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :id

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :version

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :role_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :description

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :internal

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :customer_visible

    # TODO: Write general description for this method
    # @return [LdapPermissions]
    attr_accessor :permissions

    # TODO: Write general description for this method
    # @return [List of String]
    attr_accessor :permission_id_list

    # TODO: Write general description for this method
    # @return [LdapPermission]
    attr_accessor :first_permission

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :new

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['version'] = 'version'
      @_hash['role_id'] = 'roleId'
      @_hash['name'] = 'name'
      @_hash['description'] = 'description'
      @_hash['internal'] = 'internal'
      @_hash['customer_visible'] = 'customerVisible'
      @_hash['permissions'] = 'permissions'
      @_hash['permission_id_list'] = 'permissionIdList'
      @_hash['first_permission'] = 'firstPermission'
      @_hash['new'] = 'new'
      @_hash
    end

    def initialize(id = nil,
                   version = nil,
                   role_id = nil,
                   name = nil,
                   description = nil,
                   internal = nil,
                   customer_visible = nil,
                   permissions = nil,
                   permission_id_list = nil,
                   first_permission = nil,
                   new = nil)
      @id = id
      @version = version
      @role_id = role_id
      @name = name
      @description = description
      @internal = internal
      @customer_visible = customer_visible
      @permissions = permissions
      @permission_id_list = permission_id_list
      @first_permission = first_permission
      @new = new
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash['id']
      version = hash['version']
      role_id = hash['roleId']
      name = hash['name']
      description = hash['description']
      internal = hash['internal']
      customer_visible = hash['customerVisible']
      permissions = LdapPermissions.from_hash(hash['permissions']) if
        hash['permissions']
      permission_id_list = hash['permissionIdList']
      first_permission = LdapPermission.from_hash(hash['firstPermission']) if
        hash['firstPermission']
      new = hash['new']

      # Create object from extracted values.
      LdapRole.new(id,
                   version,
                   role_id,
                   name,
                   description,
                   internal,
                   customer_visible,
                   permissions,
                   permission_id_list,
                   first_permission,
                   new)
    end

    def self.from_element(root)
      id = XmlUtilities.from_element(root, 'id', Integer)
      version = XmlUtilities.from_element(root, 'version', Integer)
      role_id = XmlUtilities.from_element(root, 'RoleId', String)
      name = XmlUtilities.from_element(root, 'RoleSimpleName', String)
      description = XmlUtilities.from_element(root, 'RoleDescription', String)
      internal = XmlUtilities.from_element(root, 'Internal', TrueClass)
      customer_visible = XmlUtilities.from_element(root, 'CustomerVisible',
                                                   TrueClass)
      permissions = XmlUtilities.from_element(root, 'PermissionList',
                                              LdapPermissions)
      permission_id_list = XmlUtilities.from_element_to_array(
        root, 'permissionIdList', String
      )
      first_permission = XmlUtilities.from_element(root, 'Permission',
                                                   LdapPermission)
      new = XmlUtilities.from_element(root, 'new', TrueClass)

      new(id,
          version,
          role_id,
          name,
          description,
          internal,
          customer_visible,
          permissions,
          permission_id_list,
          first_permission,
          new)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'id', id)
      XmlUtilities.add_as_subelement(doc, root, 'version', version)
      XmlUtilities.add_as_subelement(doc, root, 'RoleId', role_id)
      XmlUtilities.add_as_subelement(doc, root, 'RoleSimpleName', name)
      XmlUtilities.add_as_subelement(doc, root, 'RoleDescription', description)
      XmlUtilities.add_as_subelement(doc, root, 'Internal', internal)
      XmlUtilities.add_as_subelement(doc, root, 'CustomerVisible',
                                     customer_visible)
      XmlUtilities.add_as_subelement(doc, root, 'PermissionList', permissions)
      XmlUtilities.add_array_as_subelement(doc, root, 'permissionIdList',
                                           permission_id_list)
      XmlUtilities.add_as_subelement(doc, root, 'Permission', first_permission)
      XmlUtilities.add_as_subelement(doc, root, 'new', new)

      root
    end
  end
end
