# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # EndpointResponse Model.
  class EndpointResponse < BaseModel
    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :resource_count

    # TODO: Write general description for this method
    # @return [List of Endpoint]
    attr_accessor :endpoints

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['resource_count'] = 'resourceCount'
      @_hash['endpoints'] = 'endpoints'
      @_hash
    end

    def initialize(resource_count = nil,
                   endpoints = nil)
      @resource_count = resource_count
      @endpoints = endpoints
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      resource_count = hash['resourceCount']
      # Parameter is an array, so we need to iterate through it
      endpoints = nil
      unless hash['endpoints'].nil?
        endpoints = []
        hash['endpoints'].each do |structure|
          endpoints << (Endpoint.from_hash(structure) if structure)
        end
      end

      # Create object from extracted values.
      EndpointResponse.new(resource_count,
                           endpoints)
    end

    def self.from_element(root)
      resource_count = XmlUtilities.from_element(root, 'ResourceCount', Integer)
      endpoints = XmlUtilities.from_element_to_array(
        root, 'Endpoint', Endpoint,
        wrapping_element_name: 'Endpoints'
      )

      new(resource_count,
          endpoints)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'ResourceCount', resource_count)
      XmlUtilities.add_array_as_subelement(doc, root, 'Endpoint', endpoints,
                                           wrapping_element_name: 'Endpoints')

      root
    end
  end
end
