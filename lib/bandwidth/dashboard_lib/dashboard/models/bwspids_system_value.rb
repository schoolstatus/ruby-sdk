# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # BwspidsSystemValue Model.
  class BwspidsSystemValue < BaseModel
    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :route_type

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :priority

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :spid

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :type

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :malias

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['route_type'] = 'routeType'
      @_hash['priority'] = 'priority'
      @_hash['spid'] = 'spid'
      @_hash['type'] = 'type'
      @_hash['malias'] = 'alias'
      @_hash
    end

    def initialize(id = nil,
                   route_type = nil,
                   priority = nil,
                   spid = nil,
                   type = nil,
                   malias = nil)
      @id = id
      @route_type = route_type
      @priority = priority
      @spid = spid
      @type = type
      @malias = malias
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash['id']
      route_type = hash['routeType']
      priority = hash['priority']
      spid = hash['spid']
      type = hash['type']
      malias = hash['alias']

      # Create object from extracted values.
      BwspidsSystemValue.new(id,
                             route_type,
                             priority,
                             spid,
                             type,
                             malias)
    end

    def self.from_element(root)
      id = XmlUtilities.from_element(root, 'Id', Integer)
      route_type = XmlUtilities.from_element(root, 'RouteType', String)
      priority = XmlUtilities.from_element(root, 'Priority', Integer)
      spid = XmlUtilities.from_element(root, 'Spid', String)
      type = XmlUtilities.from_element(root, 'Type', String)
      malias = XmlUtilities.from_element(root, 'Alias', String)

      new(id,
          route_type,
          priority,
          spid,
          type,
          malias)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'Id', id)
      XmlUtilities.add_as_subelement(doc, root, 'RouteType', route_type)
      XmlUtilities.add_as_subelement(doc, root, 'Priority', priority)
      XmlUtilities.add_as_subelement(doc, root, 'Spid', spid)
      XmlUtilities.add_as_subelement(doc, root, 'Type', type)
      XmlUtilities.add_as_subelement(doc, root, 'Alias', malias)

      root
    end
  end
end
