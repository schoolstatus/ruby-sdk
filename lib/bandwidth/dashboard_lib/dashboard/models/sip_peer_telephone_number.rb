# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # SipPeerTelephoneNumber Model.
  class SipPeerTelephoneNumber < BaseModel
    # TODO: Write general description for this method
    # @return [TelephoneNumber]
    attr_accessor :full_number

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :number_format

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :rpid_format

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :rewrite_user

    # TODO: Write general description for this method
    # @return [TelephoneNumber]
    attr_accessor :call_forward

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :final_destination_uri

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :cnam_lookup

    # TODO: Write general description for this method
    # @return [List of String]
    attr_accessor :tn_attributes

    # TODO: Write general description for this method
    # @return [MessagingSettings]
    attr_accessor :messaging_settings

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :port_out_passcode

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :route_plan_id

    # TODO: Write general description for this method
    # @return [List of SipPeerTelephoneNumberWarningPayload]
    attr_accessor :warnings

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['full_number'] = 'fullNumber'
      @_hash['number_format'] = 'numberFormat'
      @_hash['rpid_format'] = 'rpidFormat'
      @_hash['rewrite_user'] = 'rewriteUser'
      @_hash['call_forward'] = 'callForward'
      @_hash['final_destination_uri'] = 'finalDestinationUri'
      @_hash['cnam_lookup'] = 'cnamLookup'
      @_hash['tn_attributes'] = 'tnAttributes'
      @_hash['messaging_settings'] = 'messagingSettings'
      @_hash['port_out_passcode'] = 'portOutPasscode'
      @_hash['route_plan_id'] = 'routePlanId'
      @_hash['warnings'] = 'warnings'
      @_hash
    end

    def initialize(full_number = nil,
                   number_format = nil,
                   rpid_format = nil,
                   rewrite_user = nil,
                   call_forward = nil,
                   final_destination_uri = nil,
                   cnam_lookup = nil,
                   tn_attributes = nil,
                   messaging_settings = nil,
                   port_out_passcode = nil,
                   route_plan_id = nil,
                   warnings = nil)
      @full_number = full_number
      @number_format = number_format
      @rpid_format = rpid_format
      @rewrite_user = rewrite_user
      @call_forward = call_forward
      @final_destination_uri = final_destination_uri
      @cnam_lookup = cnam_lookup
      @tn_attributes = tn_attributes
      @messaging_settings = messaging_settings
      @port_out_passcode = port_out_passcode
      @route_plan_id = route_plan_id
      @warnings = warnings
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      full_number = TelephoneNumber.from_hash(hash['fullNumber']) if
        hash['fullNumber']
      number_format = hash['numberFormat']
      rpid_format = hash['rpidFormat']
      rewrite_user = hash['rewriteUser']
      call_forward = TelephoneNumber.from_hash(hash['callForward']) if
        hash['callForward']
      final_destination_uri = hash['finalDestinationUri']
      cnam_lookup = hash['cnamLookup']
      tn_attributes = hash['tnAttributes']
      if hash['messagingSettings']
        messaging_settings = MessagingSettings.from_hash(hash['messagingSettings'])
      end
      port_out_passcode = hash['portOutPasscode']
      route_plan_id = hash['routePlanId']
      # Parameter is an array, so we need to iterate through it
      warnings = nil
      unless hash['warnings'].nil?
        warnings = []
        hash['warnings'].each do |structure|
          warnings << (SipPeerTelephoneNumberWarningPayload.from_hash(structure) if structure)
        end
      end

      # Create object from extracted values.
      SipPeerTelephoneNumber.new(full_number,
                                 number_format,
                                 rpid_format,
                                 rewrite_user,
                                 call_forward,
                                 final_destination_uri,
                                 cnam_lookup,
                                 tn_attributes,
                                 messaging_settings,
                                 port_out_passcode,
                                 route_plan_id,
                                 warnings)
    end

    def self.from_element(root)
      full_number = XmlUtilities.from_element(root, 'FullNumber',
                                              TelephoneNumber)
      number_format = XmlUtilities.from_element(root, 'NumberFormat', String)
      rpid_format = XmlUtilities.from_element(root, 'RPIDFormat', String)
      rewrite_user = XmlUtilities.from_element(root, 'RewriteUser', String)
      call_forward = XmlUtilities.from_element(root, 'CallForward',
                                               TelephoneNumber)
      final_destination_uri = XmlUtilities.from_element(root,
                                                        'FinalDestinationURI',
                                                        String)
      cnam_lookup = XmlUtilities.from_element(root, 'CallingNameDisplay',
                                              String)
      tn_attributes = XmlUtilities.from_element_to_array(
        root, 'TnAttribute', String,
        wrapping_element_name: 'TnAttributes'
      )
      messaging_settings = XmlUtilities.from_element(root, 'MessagingSettings',
                                                     MessagingSettings)
      port_out_passcode = XmlUtilities.from_element(root, 'PortOutPasscode',
                                                    String)
      route_plan_id = XmlUtilities.from_element(root, 'RoutePlanId', String)
      warnings = XmlUtilities.from_element_to_array(
        root, 'Warning', SipPeerTelephoneNumberWarningPayload,
        wrapping_element_name: 'Warnings'
      )

      new(full_number,
          number_format,
          rpid_format,
          rewrite_user,
          call_forward,
          final_destination_uri,
          cnam_lookup,
          tn_attributes,
          messaging_settings,
          port_out_passcode,
          route_plan_id,
          warnings)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'FullNumber', full_number)
      XmlUtilities.add_as_subelement(doc, root, 'NumberFormat', number_format)
      XmlUtilities.add_as_subelement(doc, root, 'RPIDFormat', rpid_format)
      XmlUtilities.add_as_subelement(doc, root, 'RewriteUser', rewrite_user)
      XmlUtilities.add_as_subelement(doc, root, 'CallForward', call_forward)
      XmlUtilities.add_as_subelement(doc, root, 'FinalDestinationURI',
                                     final_destination_uri)
      XmlUtilities.add_as_subelement(doc, root, 'CallingNameDisplay',
                                     cnam_lookup)
      XmlUtilities.add_array_as_subelement(
        doc, root, 'TnAttribute', tn_attributes,
        wrapping_element_name: 'TnAttributes'
      )
      XmlUtilities.add_as_subelement(doc, root, 'MessagingSettings',
                                     messaging_settings)
      XmlUtilities.add_as_subelement(doc, root, 'PortOutPasscode',
                                     port_out_passcode)
      XmlUtilities.add_as_subelement(doc, root, 'RoutePlanId', route_plan_id)
      XmlUtilities.add_array_as_subelement(doc, root, 'Warning', warnings,
                                           wrapping_element_name: 'Warnings')

      root
    end
  end
end
