# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # SearchResultForAvailableNpaNxx Model.
  class SearchResultForAvailableNpaNxx < BaseModel
    # TODO: Write general description for this method
    # @return [SearchError]
    attr_accessor :search_error

    # TODO: Write general description for this method
    # @return [List of ResultItemForAvailableNpaNxx]
    attr_accessor :result_set

    # TODO: Write general description for this method
    # @return [IrisStatus]
    attr_accessor :status

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['search_error'] = 'searchError'
      @_hash['result_set'] = 'resultSet'
      @_hash['status'] = 'status'
      @_hash
    end

    def initialize(search_error = nil,
                   result_set = nil,
                   status = nil)
      @search_error = search_error
      @result_set = result_set
      @status = status
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      search_error = SearchError.from_hash(hash['searchError']) if
        hash['searchError']
      # Parameter is an array, so we need to iterate through it
      result_set = nil
      unless hash['resultSet'].nil?
        result_set = []
        hash['resultSet'].each do |structure|
          result_set << (ResultItemForAvailableNpaNxx.from_hash(structure) if structure)
        end
      end
      status = IrisStatus.from_hash(hash['status']) if hash['status']

      # Create object from extracted values.
      SearchResultForAvailableNpaNxx.new(search_error,
                                         result_set,
                                         status)
    end

    def self.from_element(root)
      search_error = XmlUtilities.from_element(root, 'Error', SearchError)
      result_set = XmlUtilities.from_element_to_array(
        root, 'ResultItemForAvailableNpaNxx',
        ResultItemForAvailableNpaNxx,
        wrapping_element_name: 'AvailableNpaNxxList'
      )
      status = XmlUtilities.from_element(root, 'Status', IrisStatus)

      new(search_error,
          result_set,
          status)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'Error', search_error)
      XmlUtilities.add_array_as_subelement(
        doc, root, 'ResultItemForAvailableNpaNxx', result_set,
        wrapping_element_name: 'AvailableNpaNxxList'
      )
      XmlUtilities.add_as_subelement(doc, root, 'Status', status)

      root
    end
  end
end
