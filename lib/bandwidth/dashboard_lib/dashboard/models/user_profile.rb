# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # UserProfile Model.
  class UserProfile < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :first_name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :last_name

    # TODO: Write general description for this method
    # @return [UserStreetAddress]
    attr_accessor :street_address

    # TODO: Write general description for this method
    # @return [UserTelephoneNumbers]
    attr_accessor :telephone_numbers

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :company_name

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['first_name'] = 'firstName'
      @_hash['last_name'] = 'lastName'
      @_hash['street_address'] = 'streetAddress'
      @_hash['telephone_numbers'] = 'telephoneNumbers'
      @_hash['company_name'] = 'companyName'
      @_hash
    end

    def initialize(first_name = nil,
                   last_name = nil,
                   street_address = nil,
                   telephone_numbers = nil,
                   company_name = nil)
      @first_name = first_name
      @last_name = last_name
      @street_address = street_address
      @telephone_numbers = telephone_numbers
      @company_name = company_name
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      first_name = hash['firstName']
      last_name = hash['lastName']
      street_address = UserStreetAddress.from_hash(hash['streetAddress']) if
        hash['streetAddress']
      if hash['telephoneNumbers']
        telephone_numbers = UserTelephoneNumbers.from_hash(hash['telephoneNumbers'])
      end
      company_name = hash['companyName']

      # Create object from extracted values.
      UserProfile.new(first_name,
                      last_name,
                      street_address,
                      telephone_numbers,
                      company_name)
    end

    def self.from_element(root)
      first_name = XmlUtilities.from_element(root, 'FirstName', String)
      last_name = XmlUtilities.from_element(root, 'LastName', String)
      street_address = XmlUtilities.from_element(root, 'StreetAddress',
                                                 UserStreetAddress)
      telephone_numbers = XmlUtilities.from_element(root, 'TelephoneNumbers',
                                                    UserTelephoneNumbers)
      company_name = XmlUtilities.from_element(root, 'CompanyName', String)

      new(first_name,
          last_name,
          street_address,
          telephone_numbers,
          company_name)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'FirstName', first_name)
      XmlUtilities.add_as_subelement(doc, root, 'LastName', last_name)
      XmlUtilities.add_as_subelement(doc, root, 'StreetAddress', street_address)
      XmlUtilities.add_as_subelement(doc, root, 'TelephoneNumbers',
                                     telephone_numbers)
      XmlUtilities.add_as_subelement(doc, root, 'CompanyName', company_name)

      root
    end
  end
end
