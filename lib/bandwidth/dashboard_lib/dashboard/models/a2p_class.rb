# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # A2pClass Model.
  class A2pClass < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :message_class

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :class_description

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['message_class'] = 'messageClass'
      @_hash['class_description'] = 'classDescription'
      @_hash
    end

    def initialize(message_class = nil,
                   class_description = nil)
      @message_class = message_class
      @class_description = class_description
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      message_class = hash['messageClass']
      class_description = hash['classDescription']

      # Create object from extracted values.
      A2pClass.new(message_class,
                   class_description)
    end

    def self.from_element(root)
      message_class = XmlUtilities.from_element(root, 'MessageClass', String)
      class_description = XmlUtilities.from_element(root, 'ClassDescription',
                                                    String)

      new(message_class,
          class_description)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'MessageClass', message_class)
      XmlUtilities.add_as_subelement(doc, root, 'ClassDescription',
                                     class_description)

      root
    end
  end
end
