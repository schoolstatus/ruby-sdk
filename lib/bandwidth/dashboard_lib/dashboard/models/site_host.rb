# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # SiteHost Model.
  class SiteHost < BaseModel
    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :site_id

    # TODO: Write general description for this method
    # @return [SipPeerHosts]
    attr_accessor :sip_peer_hosts

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['site_id'] = 'siteId'
      @_hash['sip_peer_hosts'] = 'sipPeerHosts'
      @_hash
    end

    def initialize(site_id = nil,
                   sip_peer_hosts = nil)
      @site_id = site_id
      @sip_peer_hosts = sip_peer_hosts
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      site_id = hash['siteId']
      sip_peer_hosts = SipPeerHosts.from_hash(hash['sipPeerHosts']) if
        hash['sipPeerHosts']

      # Create object from extracted values.
      SiteHost.new(site_id,
                   sip_peer_hosts)
    end

    def self.from_element(root)
      site_id = XmlUtilities.from_element(root, 'SiteId', Integer)
      sip_peer_hosts = XmlUtilities.from_element(root, 'SipPeerHosts',
                                                 SipPeerHosts)

      new(site_id,
          sip_peer_hosts)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'SiteId', site_id)
      XmlUtilities.add_as_subelement(doc, root, 'SipPeerHosts', sip_peer_hosts)

      root
    end
  end
end
