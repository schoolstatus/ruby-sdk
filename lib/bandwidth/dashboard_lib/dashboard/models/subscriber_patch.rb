# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # SubscriberPatch Model.
  class SubscriberPatch < BaseModel
    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :delete

    # TODO: Write general description for this method
    # @return [SubscriberTypePatch]
    attr_accessor :subscriber_type

    # TODO: Write general description for this method
    # @return [StringPatch]
    attr_accessor :business_name

    # TODO: Write general description for this method
    # @return [StringPatch]
    attr_accessor :first_name

    # TODO: Write general description for this method
    # @return [StringPatch]
    attr_accessor :middle_initial

    # TODO: Write general description for this method
    # @return [StringPatch]
    attr_accessor :last_name

    # TODO: Write general description for this method
    # @return [AddressPatch]
    attr_accessor :service_address

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['delete'] = 'delete'
      @_hash['subscriber_type'] = 'subscriberType'
      @_hash['business_name'] = 'businessName'
      @_hash['first_name'] = 'firstName'
      @_hash['middle_initial'] = 'middleInitial'
      @_hash['last_name'] = 'lastName'
      @_hash['service_address'] = 'serviceAddress'
      @_hash
    end

    def initialize(delete = nil,
                   subscriber_type = nil,
                   business_name = nil,
                   first_name = nil,
                   middle_initial = nil,
                   last_name = nil,
                   service_address = nil)
      @delete = delete
      @subscriber_type = subscriber_type
      @business_name = business_name
      @first_name = first_name
      @middle_initial = middle_initial
      @last_name = last_name
      @service_address = service_address
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      delete = hash['delete']
      subscriber_type = SubscriberTypePatch.from_hash(hash['subscriberType']) if
        hash['subscriberType']
      business_name = StringPatch.from_hash(hash['businessName']) if
        hash['businessName']
      first_name = StringPatch.from_hash(hash['firstName']) if
        hash['firstName']
      middle_initial = StringPatch.from_hash(hash['middleInitial']) if
        hash['middleInitial']
      last_name = StringPatch.from_hash(hash['lastName']) if hash['lastName']
      service_address = AddressPatch.from_hash(hash['serviceAddress']) if
        hash['serviceAddress']

      # Create object from extracted values.
      SubscriberPatch.new(delete,
                          subscriber_type,
                          business_name,
                          first_name,
                          middle_initial,
                          last_name,
                          service_address)
    end

    def self.from_element(root)
      delete = XmlUtilities.from_attribute(root, 'delete', TrueClass)
      subscriber_type = XmlUtilities.from_element(root, 'SubscriberType',
                                                  SubscriberTypePatch)
      business_name = XmlUtilities.from_element(root, 'BusinessName',
                                                StringPatch)
      first_name = XmlUtilities.from_element(root, 'FirstName', StringPatch)
      middle_initial = XmlUtilities.from_element(root, 'MiddleInitial',
                                                 StringPatch)
      last_name = XmlUtilities.from_element(root, 'LastName', StringPatch)
      service_address = XmlUtilities.from_element(root, 'ServiceAddress',
                                                  AddressPatch)

      new(delete,
          subscriber_type,
          business_name,
          first_name,
          middle_initial,
          last_name,
          service_address)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_attribute(root, 'delete', delete)
      XmlUtilities.add_as_subelement(doc, root, 'SubscriberType',
                                     subscriber_type)
      XmlUtilities.add_as_subelement(doc, root, 'BusinessName', business_name)
      XmlUtilities.add_as_subelement(doc, root, 'FirstName', first_name)
      XmlUtilities.add_as_subelement(doc, root, 'MiddleInitial', middle_initial)
      XmlUtilities.add_as_subelement(doc, root, 'LastName', last_name)
      XmlUtilities.add_as_subelement(doc, root, 'ServiceAddress',
                                     service_address)

      root
    end
  end
end
