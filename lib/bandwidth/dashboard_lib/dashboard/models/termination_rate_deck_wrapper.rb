# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # TerminationRateDeckWrapper Model.
  class TerminationRateDeckWrapper < BaseModel
    # TODO: Write general description for this method
    # @return [TerminationRateDeck]
    attr_accessor :rate_deck

    # TODO: Write general description for this method
    # @return [TerminationRateDeckMetadata]
    attr_accessor :metadata

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['rate_deck'] = 'rateDeck'
      @_hash['metadata'] = 'metadata'
      @_hash
    end

    def initialize(rate_deck = nil,
                   metadata = nil)
      @rate_deck = rate_deck
      @metadata = metadata
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      rate_deck = TerminationRateDeck.from_hash(hash['rateDeck']) if
        hash['rateDeck']
      metadata = TerminationRateDeckMetadata.from_hash(hash['metadata']) if
        hash['metadata']

      # Create object from extracted values.
      TerminationRateDeckWrapper.new(rate_deck,
                                     metadata)
    end

    def self.from_element(root)
      rate_deck = XmlUtilities.from_element(root, 'TerminationRateDeck',
                                            TerminationRateDeck)
      metadata = XmlUtilities.from_element(root, 'TerminationRateDeckResponse',
                                           TerminationRateDeckMetadata)

      new(rate_deck,
          metadata)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'TerminationRateDeck',
                                     rate_deck)
      XmlUtilities.add_as_subelement(doc, root, 'TerminationRateDeckResponse',
                                     metadata)

      root
    end
  end
end
