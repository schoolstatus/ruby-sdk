# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # CitySearchResults Model.
  class CitySearchResults < BaseModel
    # TODO: Write general description for this method
    # @return [SearchError]
    attr_accessor :search_error

    # TODO: Write general description for this method
    # @return [List of CitySearchResult]
    attr_accessor :result_set

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :result_size

    # TODO: Write general description for this method
    # @return [IrisStatus]
    attr_accessor :status

    # TODO: Write general description for this method
    # @return [List of String]
    attr_accessor :telephone_number_list

    # TODO: Write general description for this method
    # @return [List of TelephoneNumberDetail]
    attr_accessor :telephone_number_detail_list

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['search_error'] = 'searchError'
      @_hash['result_set'] = 'resultSet'
      @_hash['result_size'] = 'resultSize'
      @_hash['status'] = 'status'
      @_hash['telephone_number_list'] = 'TelephoneNumberList'
      @_hash['telephone_number_detail_list'] = 'TelephoneNumberDetailList'
      @_hash
    end

    def initialize(search_error = nil,
                   result_set = nil,
                   result_size = nil,
                   status = nil,
                   telephone_number_list = nil,
                   telephone_number_detail_list = nil)
      @search_error = search_error
      @result_set = result_set
      @result_size = result_size
      @status = status
      @telephone_number_list = telephone_number_list
      @telephone_number_detail_list = telephone_number_detail_list
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      search_error = SearchError.from_hash(hash['searchError']) if
        hash['searchError']
      # Parameter is an array, so we need to iterate through it
      result_set = nil
      unless hash['resultSet'].nil?
        result_set = []
        hash['resultSet'].each do |structure|
          result_set << (CitySearchResult.from_hash(structure) if structure)
        end
      end
      result_size = hash['resultSize']
      status = IrisStatus.from_hash(hash['status']) if hash['status']
      telephone_number_list = hash['TelephoneNumberList']
      # Parameter is an array, so we need to iterate through it
      telephone_number_detail_list = nil
      unless hash['TelephoneNumberDetailList'].nil?
        telephone_number_detail_list = []
        hash['TelephoneNumberDetailList'].each do |structure|
          telephone_number_detail_list << (TelephoneNumberDetail.from_hash(structure) if structure)
        end
      end

      # Create object from extracted values.
      CitySearchResults.new(search_error,
                            result_set,
                            result_size,
                            status,
                            telephone_number_list,
                            telephone_number_detail_list)
    end

    def self.from_element(root)
      search_error = XmlUtilities.from_element(root, 'Error', SearchError)
      result_set = XmlUtilities.from_element_to_array(
        root, 'City', CitySearchResult,
        wrapping_element_name: 'Cities'
      )
      result_size = XmlUtilities.from_element(root, 'ResultCount', Integer)
      status = XmlUtilities.from_element(root, 'Status', IrisStatus)
      telephone_number_list = XmlUtilities.from_element_to_array(
        root, 'TelephoneNumber', String,
        wrapping_element_name: 'TelephoneNumberList'
      )
      telephone_number_detail_list = XmlUtilities.from_element_to_array(
        root, 'TelephoneNumberDetail', TelephoneNumberDetail,
        wrapping_element_name: 'TelephoneNumberDetailList'
      )

      new(search_error,
          result_set,
          result_size,
          status,
          telephone_number_list,
          telephone_number_detail_list)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'Error', search_error)
      XmlUtilities.add_array_as_subelement(doc, root, 'City', result_set,
                                           wrapping_element_name: 'Cities')
      XmlUtilities.add_as_subelement(doc, root, 'ResultCount', result_size)
      XmlUtilities.add_as_subelement(doc, root, 'Status', status)
      XmlUtilities.add_array_as_subelement(
        doc, root, 'TelephoneNumber', telephone_number_list,
        wrapping_element_name: 'TelephoneNumberList'
      )
      XmlUtilities.add_array_as_subelement(
        doc, root, 'TelephoneNumberDetail',
        telephone_number_detail_list,
        wrapping_element_name: 'TelephoneNumberDetailList'
      )

      root
    end
  end
end
