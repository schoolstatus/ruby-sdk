# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module Bandwidth
  # BulkPortout Model.
  class BulkPortout < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :pon

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :pin

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :new_spid

    # TODO: Write general description for this method
    # @return [DateTime]
    attr_accessor :foc_date

    # TODO: Write general description for this method
    # @return [SupplementalEnum]
    attr_accessor :supplemental

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :immediately

    # TODO: Write general description for this method
    # @return [List of String]
    attr_accessor :telephone_numbers

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :callback_url

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :internal_port

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :account_number

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :zip

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :subscriber_name

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :override_validation

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :skip_port_ps_check

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['pon'] = 'pon'
      @_hash['pin'] = 'pin'
      @_hash['new_spid'] = 'newSpid'
      @_hash['foc_date'] = 'focDate'
      @_hash['supplemental'] = 'supplemental'
      @_hash['immediately'] = 'immediately'
      @_hash['telephone_numbers'] = 'telephoneNumbers'
      @_hash['callback_url'] = 'callbackUrl'
      @_hash['internal_port'] = 'internalPort'
      @_hash['account_number'] = 'accountNumber'
      @_hash['zip'] = 'zip'
      @_hash['subscriber_name'] = 'subscriberName'
      @_hash['override_validation'] = 'overrideValidation'
      @_hash['skip_port_ps_check'] = 'skipPortPsCheck'
      @_hash
    end

    def initialize(pon = nil,
                   pin = nil,
                   new_spid = nil,
                   foc_date = nil,
                   supplemental = nil,
                   immediately = nil,
                   telephone_numbers = nil,
                   callback_url = nil,
                   internal_port = nil,
                   account_number = nil,
                   zip = nil,
                   subscriber_name = nil,
                   override_validation = nil,
                   skip_port_ps_check = nil)
      @pon = pon
      @pin = pin
      @new_spid = new_spid
      @foc_date = foc_date
      @supplemental = supplemental
      @immediately = immediately
      @telephone_numbers = telephone_numbers
      @callback_url = callback_url
      @internal_port = internal_port
      @account_number = account_number
      @zip = zip
      @subscriber_name = subscriber_name
      @override_validation = override_validation
      @skip_port_ps_check = skip_port_ps_check
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      pon = hash['pon']
      pin = hash['pin']
      new_spid = hash['newSpid']
      foc_date = APIHelper.rfc3339(hash['focDate']) if hash['focDate']
      supplemental = hash['supplemental']
      immediately = hash['immediately']
      telephone_numbers = hash['telephoneNumbers']
      callback_url = hash['callbackUrl']
      internal_port = hash['internalPort']
      account_number = hash['accountNumber']
      zip = hash['zip']
      subscriber_name = hash['subscriberName']
      override_validation = hash['overrideValidation']
      skip_port_ps_check = hash['skipPortPsCheck']

      # Create object from extracted values.
      BulkPortout.new(pon,
                      pin,
                      new_spid,
                      foc_date,
                      supplemental,
                      immediately,
                      telephone_numbers,
                      callback_url,
                      internal_port,
                      account_number,
                      zip,
                      subscriber_name,
                      override_validation,
                      skip_port_ps_check)
    end

    def self.from_element(root)
      pon = XmlUtilities.from_element(root, 'PON', String)
      pin = XmlUtilities.from_element(root, 'Pin', String)
      new_spid = XmlUtilities.from_element(root, 'NewNetworkSPID', String)
      foc_date = XmlUtilities.from_element(root, 'FocDate', String,
                                           datetime_format: 'rfc3339')
      supplemental = XmlUtilities.from_element(root, 'Supplemental', String)
      immediately = XmlUtilities.from_element(root, 'Immediately', TrueClass)
      telephone_numbers = XmlUtilities.from_element_to_array(
        root, 'TelephoneNumberToPort', String,
        wrapping_element_name: 'TelephoneNumberList'
      )
      callback_url = XmlUtilities.from_element(root, 'CallbackUrl', String)
      internal_port = XmlUtilities.from_element(root, 'InternalPort', TrueClass)
      account_number = XmlUtilities.from_element(root, 'AccountNumber', String)
      zip = XmlUtilities.from_element(root, 'ZipCode', String)
      subscriber_name = XmlUtilities.from_element(root, 'SubscriberName',
                                                  String)
      override_validation = XmlUtilities.from_element(root,
                                                      'OverrideValidation',
                                                      TrueClass)
      skip_port_ps_check = XmlUtilities.from_element(root, 'SkipPortPsCheck',
                                                     TrueClass)

      new(pon,
          pin,
          new_spid,
          foc_date,
          supplemental,
          immediately,
          telephone_numbers,
          callback_url,
          internal_port,
          account_number,
          zip,
          subscriber_name,
          override_validation,
          skip_port_ps_check)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'PON', pon)
      XmlUtilities.add_as_subelement(doc, root, 'Pin', pin)
      XmlUtilities.add_as_subelement(doc, root, 'NewNetworkSPID', new_spid)
      XmlUtilities.add_as_subelement(doc, root, 'FocDate', foc_date,
                                     datetime_format: 'rfc3339')
      XmlUtilities.add_as_subelement(doc, root, 'Supplemental', supplemental)
      XmlUtilities.add_as_subelement(doc, root, 'Immediately', immediately)
      XmlUtilities.add_array_as_subelement(
        doc, root, 'TelephoneNumberToPort', telephone_numbers,
        wrapping_element_name: 'TelephoneNumberList'
      )
      XmlUtilities.add_as_subelement(doc, root, 'CallbackUrl', callback_url)
      XmlUtilities.add_as_subelement(doc, root, 'InternalPort', internal_port)
      XmlUtilities.add_as_subelement(doc, root, 'AccountNumber', account_number)
      XmlUtilities.add_as_subelement(doc, root, 'ZipCode', zip)
      XmlUtilities.add_as_subelement(doc, root, 'SubscriberName',
                                     subscriber_name)
      XmlUtilities.add_as_subelement(doc, root, 'OverrideValidation',
                                     override_validation)
      XmlUtilities.add_as_subelement(doc, root, 'SkipPortPsCheck',
                                     skip_port_ps_check)

      root
    end
  end
end
