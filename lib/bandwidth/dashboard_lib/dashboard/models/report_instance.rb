# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module Bandwidth
  # ReportInstance Model.
  class ReportInstance < BaseModel
    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :id

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :report_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :jasper_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :description

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :jasper_export_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :jasper_host

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :jasper_session_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :report_name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :output_format

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :pages

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :status

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :jasper_output_format

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :requested_by_user_name

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :requested_for_account_id

    # TODO: Write general description for this method
    # @return [DateTime]
    attr_accessor :requested_at

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :expires_at_str

    # TODO: Write general description for this method
    # @return [DateTime]
    attr_accessor :completed_at

    # TODO: Write general description for this method
    # @return [List of ReportParameterValue]
    attr_accessor :parameter_values

    # TODO: Write general description for this method
    # @return [ReportInstanceErrorDetails]
    attr_accessor :error_details

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :jasper_report_status_display

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :jasper_export_status_display

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['report_id'] = 'reportId'
      @_hash['jasper_id'] = 'jasperId'
      @_hash['description'] = 'description'
      @_hash['jasper_export_id'] = 'jasperExportId'
      @_hash['jasper_host'] = 'jasperHost'
      @_hash['jasper_session_id'] = 'jasperSessionId'
      @_hash['report_name'] = 'reportName'
      @_hash['output_format'] = 'outputFormat'
      @_hash['pages'] = 'pages'
      @_hash['status'] = 'status'
      @_hash['jasper_output_format'] = 'jasperOutputFormat'
      @_hash['requested_by_user_name'] = 'requestedByUserName'
      @_hash['requested_for_account_id'] = 'requestedForAccountId'
      @_hash['requested_at'] = 'requestedAt'
      @_hash['expires_at_str'] = 'expiresAtStr'
      @_hash['completed_at'] = 'completedAt'
      @_hash['parameter_values'] = 'parameterValues'
      @_hash['error_details'] = 'errorDetails'
      @_hash['jasper_report_status_display'] = 'jasperReportStatusDisplay'
      @_hash['jasper_export_status_display'] = 'jasperExportStatusDisplay'
      @_hash
    end

    def initialize(id = nil,
                   report_id = nil,
                   jasper_id = nil,
                   description = nil,
                   jasper_export_id = nil,
                   jasper_host = nil,
                   jasper_session_id = nil,
                   report_name = nil,
                   output_format = nil,
                   pages = nil,
                   status = nil,
                   jasper_output_format = nil,
                   requested_by_user_name = nil,
                   requested_for_account_id = nil,
                   requested_at = nil,
                   expires_at_str = nil,
                   completed_at = nil,
                   parameter_values = nil,
                   error_details = nil,
                   jasper_report_status_display = nil,
                   jasper_export_status_display = nil)
      @id = id
      @report_id = report_id
      @jasper_id = jasper_id
      @description = description
      @jasper_export_id = jasper_export_id
      @jasper_host = jasper_host
      @jasper_session_id = jasper_session_id
      @report_name = report_name
      @output_format = output_format
      @pages = pages
      @status = status
      @jasper_output_format = jasper_output_format
      @requested_by_user_name = requested_by_user_name
      @requested_for_account_id = requested_for_account_id
      @requested_at = requested_at
      @expires_at_str = expires_at_str
      @completed_at = completed_at
      @parameter_values = parameter_values
      @error_details = error_details
      @jasper_report_status_display = jasper_report_status_display
      @jasper_export_status_display = jasper_export_status_display
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash['id']
      report_id = hash['reportId']
      jasper_id = hash['jasperId']
      description = hash['description']
      jasper_export_id = hash['jasperExportId']
      jasper_host = hash['jasperHost']
      jasper_session_id = hash['jasperSessionId']
      report_name = hash['reportName']
      output_format = hash['outputFormat']
      pages = hash['pages']
      status = hash['status']
      jasper_output_format = hash['jasperOutputFormat']
      requested_by_user_name = hash['requestedByUserName']
      requested_for_account_id = hash['requestedForAccountId']
      requested_at = APIHelper.rfc3339(hash['requestedAt']) if
        hash['requestedAt']
      expires_at_str = hash['expiresAtStr']
      completed_at = APIHelper.rfc3339(hash['completedAt']) if
        hash['completedAt']
      # Parameter is an array, so we need to iterate through it
      parameter_values = nil
      unless hash['parameterValues'].nil?
        parameter_values = []
        hash['parameterValues'].each do |structure|
          parameter_values << (ReportParameterValue.from_hash(structure) if structure)
        end
      end
      if hash['errorDetails']
        error_details = ReportInstanceErrorDetails.from_hash(hash['errorDetails'])
      end
      jasper_report_status_display = hash['jasperReportStatusDisplay']
      jasper_export_status_display = hash['jasperExportStatusDisplay']

      # Create object from extracted values.
      ReportInstance.new(id,
                         report_id,
                         jasper_id,
                         description,
                         jasper_export_id,
                         jasper_host,
                         jasper_session_id,
                         report_name,
                         output_format,
                         pages,
                         status,
                         jasper_output_format,
                         requested_by_user_name,
                         requested_for_account_id,
                         requested_at,
                         expires_at_str,
                         completed_at,
                         parameter_values,
                         error_details,
                         jasper_report_status_display,
                         jasper_export_status_display)
    end

    def self.from_element(root)
      id = XmlUtilities.from_element(root, 'Id', Integer)
      report_id = XmlUtilities.from_element(root, 'ReportId', Integer)
      jasper_id = XmlUtilities.from_element(root, 'JasperId', String)
      description = XmlUtilities.from_element(root, 'Description', String)
      jasper_export_id = XmlUtilities.from_element(root, 'JasperExportId',
                                                   String)
      jasper_host = XmlUtilities.from_element(root, 'JasperHost', String)
      jasper_session_id = XmlUtilities.from_element(root, 'JasperSessionId',
                                                    String)
      report_name = XmlUtilities.from_element(root, 'ReportName', String)
      output_format = XmlUtilities.from_element(root, 'OutputFormat', String)
      pages = XmlUtilities.from_element(root, 'Pages', String)
      status = XmlUtilities.from_element(root, 'Status', String)
      jasper_output_format = XmlUtilities.from_element(root,
                                                       'JasperOutputFormat',
                                                       String)
      requested_by_user_name = XmlUtilities.from_element(root,
                                                         'RequestedByUserName',
                                                         String)
      requested_for_account_id = XmlUtilities.from_element(
        root, 'RequestedForAccountId', Integer
      )
      requested_at = XmlUtilities.from_element(root, 'RequestedAt', String,
                                               datetime_format: 'rfc3339')
      expires_at_str = XmlUtilities.from_element(root, 'ExpiresAt', String)
      completed_at = XmlUtilities.from_element(root, 'CompletedAt', String,
                                               datetime_format: 'rfc3339')
      parameter_values = XmlUtilities.from_element_to_array(
        root, 'ParameterValue', ReportParameterValue,
        wrapping_element_name: 'Parameters'
      )
      error_details = XmlUtilities.from_element(root, 'ErrorDetails',
                                                ReportInstanceErrorDetails)
      jasper_report_status_display = XmlUtilities.from_element(
        root, 'JasperReportStatus', String
      )
      jasper_export_status_display = XmlUtilities.from_element(
        root, 'JasperExportStatus', String
      )

      new(id,
          report_id,
          jasper_id,
          description,
          jasper_export_id,
          jasper_host,
          jasper_session_id,
          report_name,
          output_format,
          pages,
          status,
          jasper_output_format,
          requested_by_user_name,
          requested_for_account_id,
          requested_at,
          expires_at_str,
          completed_at,
          parameter_values,
          error_details,
          jasper_report_status_display,
          jasper_export_status_display)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'Id', id)
      XmlUtilities.add_as_subelement(doc, root, 'ReportId', report_id)
      XmlUtilities.add_as_subelement(doc, root, 'JasperId', jasper_id)
      XmlUtilities.add_as_subelement(doc, root, 'Description', description)
      XmlUtilities.add_as_subelement(doc, root, 'JasperExportId',
                                     jasper_export_id)
      XmlUtilities.add_as_subelement(doc, root, 'JasperHost', jasper_host)
      XmlUtilities.add_as_subelement(doc, root, 'JasperSessionId',
                                     jasper_session_id)
      XmlUtilities.add_as_subelement(doc, root, 'ReportName', report_name)
      XmlUtilities.add_as_subelement(doc, root, 'OutputFormat', output_format)
      XmlUtilities.add_as_subelement(doc, root, 'Pages', pages)
      XmlUtilities.add_as_subelement(doc, root, 'Status', status)
      XmlUtilities.add_as_subelement(doc, root, 'JasperOutputFormat',
                                     jasper_output_format)
      XmlUtilities.add_as_subelement(doc, root, 'RequestedByUserName',
                                     requested_by_user_name)
      XmlUtilities.add_as_subelement(doc, root, 'RequestedForAccountId',
                                     requested_for_account_id)
      XmlUtilities.add_as_subelement(doc, root, 'RequestedAt', requested_at,
                                     datetime_format: 'rfc3339')
      XmlUtilities.add_as_subelement(doc, root, 'ExpiresAt', expires_at_str)
      XmlUtilities.add_as_subelement(doc, root, 'CompletedAt', completed_at,
                                     datetime_format: 'rfc3339')
      XmlUtilities.add_array_as_subelement(doc, root, 'ParameterValue',
                                           parameter_values,
                                           wrapping_element_name: 'Parameters')
      XmlUtilities.add_as_subelement(doc, root, 'ErrorDetails', error_details)
      XmlUtilities.add_as_subelement(doc, root, 'JasperReportStatus',
                                     jasper_report_status_display)
      XmlUtilities.add_as_subelement(doc, root, 'JasperExportStatus',
                                     jasper_export_status_display)

      root
    end
  end
end
