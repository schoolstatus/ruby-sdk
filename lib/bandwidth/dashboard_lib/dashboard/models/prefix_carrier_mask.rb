# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # PrefixCarrierMask Model.
  class PrefixCarrierMask < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :prefix

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :carrier_mask

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['prefix'] = 'prefix'
      @_hash['carrier_mask'] = 'carrierMask'
      @_hash
    end

    def initialize(prefix = nil,
                   carrier_mask = nil)
      @prefix = prefix
      @carrier_mask = carrier_mask
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      prefix = hash['prefix']
      carrier_mask = hash['carrierMask']

      # Create object from extracted values.
      PrefixCarrierMask.new(prefix,
                            carrier_mask)
    end

    def self.from_element(root)
      prefix = XmlUtilities.from_element(root, 'prefix', String)
      carrier_mask = XmlUtilities.from_element(root, 'carrierMask', String)

      new(prefix,
          carrier_mask)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'prefix', prefix)
      XmlUtilities.add_as_subelement(doc, root, 'carrierMask', carrier_mask)

      root
    end
  end
end
