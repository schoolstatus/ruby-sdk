# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # InternalPortEvent Model.
  class InternalPortEvent < BaseModel
    # TODO: Write general description for this method
    # @return [Status]
    attr_accessor :status

    # TODO: Write general description for this method
    # @return [ProcessingStatus9Enum]
    attr_accessor :processing_status

    # TODO: Write general description for this method
    # @return [List of String]
    attr_accessor :errors

    # TODO: Write general description for this method
    # @return [BulkPortout]
    attr_accessor :bulk_port_out

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['status'] = 'status'
      @_hash['processing_status'] = 'processingStatus'
      @_hash['errors'] = 'errors'
      @_hash['bulk_port_out'] = 'bulkPortOut'
      @_hash
    end

    def initialize(status = nil,
                   processing_status = nil,
                   errors = nil,
                   bulk_port_out = nil)
      @status = status
      @processing_status = processing_status
      @errors = errors
      @bulk_port_out = bulk_port_out
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      status = Status.from_hash(hash['status']) if hash['status']
      processing_status = hash['processingStatus']
      errors = hash['errors']
      bulk_port_out = BulkPortout.from_hash(hash['bulkPortOut']) if
        hash['bulkPortOut']

      # Create object from extracted values.
      InternalPortEvent.new(status,
                            processing_status,
                            errors,
                            bulk_port_out)
    end

    def self.from_element(root)
      status = XmlUtilities.from_element(root, 'Status', Status)
      processing_status = XmlUtilities.from_element(root, 'ProcessingStatus',
                                                    String)
      errors = XmlUtilities.from_element_to_array(
        root, 'Error', String,
        wrapping_element_name: 'ProcessingErrors'
      )
      bulk_port_out = XmlUtilities.from_element(root, 'BulkPortOut',
                                                BulkPortout)

      new(status,
          processing_status,
          errors,
          bulk_port_out)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'Status', status)
      XmlUtilities.add_as_subelement(doc, root, 'ProcessingStatus',
                                     processing_status)
      XmlUtilities.add_array_as_subelement(
        doc, root, 'Error', errors,
        wrapping_element_name: 'ProcessingErrors'
      )
      XmlUtilities.add_as_subelement(doc, root, 'BulkPortOut', bulk_port_out)

      root
    end
  end
end
