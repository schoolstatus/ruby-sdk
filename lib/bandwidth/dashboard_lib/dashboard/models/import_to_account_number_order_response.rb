# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # ImportToAccountNumberOrderResponse Model.
  class ImportToAccountNumberOrderResponse < BaseModel
    # TODO: Write general description for this method
    # @return [ImportToAccountNumberOrder]
    attr_accessor :order_request

    # TODO: Write general description for this method
    # @return [OrderStatusEnum]
    attr_accessor :order_status

    # TODO: Write general description for this method
    # @return [List of String]
    attr_accessor :imported_telephone_numbers

    # TODO: Write general description for this method
    # @return [List of OrderError]
    attr_accessor :errors

    # TODO: Write general description for this method
    # @return [List of TelephoneNumberDetail]
    attr_accessor :provisioned_telephone_number_details

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['order_request'] = 'orderRequest'
      @_hash['order_status'] = 'orderStatus'
      @_hash['imported_telephone_numbers'] = 'importedTelephoneNumbers'
      @_hash['errors'] = 'errors'
      @_hash['provisioned_telephone_number_details'] =
        'provisionedTelephoneNumberDetails'
      @_hash
    end

    def initialize(order_request = nil,
                   order_status = nil,
                   imported_telephone_numbers = nil,
                   errors = nil,
                   provisioned_telephone_number_details = nil)
      @order_request = order_request
      @order_status = order_status
      @imported_telephone_numbers = imported_telephone_numbers
      @errors = errors
      @provisioned_telephone_number_details =
        provisioned_telephone_number_details
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      if hash['orderRequest']
        order_request = ImportToAccountNumberOrder.from_hash(hash['orderRequest'])
      end
      order_status = hash['orderStatus']
      imported_telephone_numbers = hash['importedTelephoneNumbers']
      # Parameter is an array, so we need to iterate through it
      errors = nil
      unless hash['errors'].nil?
        errors = []
        hash['errors'].each do |structure|
          errors << (OrderError.from_hash(structure) if structure)
        end
      end
      # Parameter is an array, so we need to iterate through it
      provisioned_telephone_number_details = nil
      unless hash['provisionedTelephoneNumberDetails'].nil?
        provisioned_telephone_number_details = []
        hash['provisionedTelephoneNumberDetails'].each do |structure|
          provisioned_telephone_number_details << (TelephoneNumberDetail.from_hash(structure) if structure)
        end
      end

      # Create object from extracted values.
      ImportToAccountNumberOrderResponse.new(order_request,
                                             order_status,
                                             imported_telephone_numbers,
                                             errors,
                                             provisioned_telephone_number_details)
    end

    def self.from_element(root)
      order_request = XmlUtilities.from_element(root, 'OrderRequest',
                                                ImportToAccountNumberOrder)
      order_status = XmlUtilities.from_element(root, 'OrderStatus', String)
      imported_telephone_numbers = XmlUtilities.from_element_to_array(
        root, 'TelephoneNumber', String,
        wrapping_element_name: 'ImportedTelephoneNumberList'
      )
      errors = XmlUtilities.from_element_to_array(
        root, 'OrderError', OrderError,
        wrapping_element_name: 'ErrorList'
      )
      provisioned_telephone_number_details = XmlUtilities.from_element_to_array(
        root, 'TelephoneNumberDetail', TelephoneNumberDetail,
        wrapping_element_name: 'ImportedTelephoneNumberDetailList'
      )

      new(order_request,
          order_status,
          imported_telephone_numbers,
          errors,
          provisioned_telephone_number_details)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'OrderRequest', order_request)
      XmlUtilities.add_as_subelement(doc, root, 'OrderStatus', order_status)
      XmlUtilities.add_array_as_subelement(
        doc, root, 'TelephoneNumber', imported_telephone_numbers,
        wrapping_element_name: 'ImportedTelephoneNumberList'
      )
      XmlUtilities.add_array_as_subelement(doc, root, 'OrderError', errors,
                                           wrapping_element_name: 'ErrorList')
      XmlUtilities.add_array_as_subelement(
        doc, root, 'TelephoneNumberDetail',
        provisioned_telephone_number_details,
        wrapping_element_name: 'ImportedTelephoneNumberDetailList'
      )

      root
    end
  end
end
