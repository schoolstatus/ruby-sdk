# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # OrderHistory Model.
  class OrderHistory < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :order_date

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :note_description

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :author

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :order_status

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :difference

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['order_date'] = 'orderDate'
      @_hash['note_description'] = 'noteDescription'
      @_hash['author'] = 'author'
      @_hash['order_status'] = 'orderStatus'
      @_hash['difference'] = 'difference'
      @_hash
    end

    def initialize(order_date = nil,
                   note_description = nil,
                   author = nil,
                   order_status = nil,
                   difference = nil)
      @order_date = order_date
      @note_description = note_description
      @author = author
      @order_status = order_status
      @difference = difference
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      order_date = hash['orderDate']
      note_description = hash['noteDescription']
      author = hash['author']
      order_status = hash['orderStatus']
      difference = hash['difference']

      # Create object from extracted values.
      OrderHistory.new(order_date,
                       note_description,
                       author,
                       order_status,
                       difference)
    end

    def self.from_element(root)
      order_date = XmlUtilities.from_element(root, 'OrderDate', String)
      note_description = XmlUtilities.from_element(root, 'Note', String)
      author = XmlUtilities.from_element(root, 'Author', String)
      order_status = XmlUtilities.from_element(root, 'Status', String)
      difference = XmlUtilities.from_element(root, 'Difference', String)

      new(order_date,
          note_description,
          author,
          order_status,
          difference)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'OrderDate', order_date)
      XmlUtilities.add_as_subelement(doc, root, 'Note', note_description)
      XmlUtilities.add_as_subelement(doc, root, 'Author', author)
      XmlUtilities.add_as_subelement(doc, root, 'Status', order_status)
      XmlUtilities.add_as_subelement(doc, root, 'Difference', difference)

      root
    end
  end
end
