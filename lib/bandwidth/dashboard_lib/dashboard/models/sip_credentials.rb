# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # SipCredentials Model.
  class SipCredentials < BaseModel
    # TODO: Write general description for this method
    # @return [List of AccountSipCredentials]
    attr_accessor :account_sip_credentials

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['account_sip_credentials'] = 'accountSipCredentials'
      @_hash
    end

    def initialize(account_sip_credentials = nil)
      @account_sip_credentials = account_sip_credentials
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      # Parameter is an array, so we need to iterate through it
      account_sip_credentials = nil
      unless hash['accountSipCredentials'].nil?
        account_sip_credentials = []
        hash['accountSipCredentials'].each do |structure|
          account_sip_credentials << (AccountSipCredentials.from_hash(structure) if structure)
        end
      end

      # Create object from extracted values.
      SipCredentials.new(account_sip_credentials)
    end

    def self.from_element(root)
      account_sip_credentials = XmlUtilities.from_element_to_array(
        root, 'SipCredentialsByAccount', AccountSipCredentials
      )

      new(account_sip_credentials)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_array_as_subelement(doc, root, 'SipCredentialsByAccount',
                                           account_sip_credentials)

      root
    end
  end
end
