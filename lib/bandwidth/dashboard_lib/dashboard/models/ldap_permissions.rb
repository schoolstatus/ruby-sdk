# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # LdapPermissions Model.
  class LdapPermissions < BaseModel
    # TODO: Write general description for this method
    # @return [List of LdapPermission]
    attr_accessor :ldap_permissions

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['ldap_permissions'] = 'ldapPermissions'
      @_hash
    end

    def initialize(ldap_permissions = nil)
      @ldap_permissions = ldap_permissions
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      # Parameter is an array, so we need to iterate through it
      ldap_permissions = nil
      unless hash['ldapPermissions'].nil?
        ldap_permissions = []
        hash['ldapPermissions'].each do |structure|
          ldap_permissions << (LdapPermission.from_hash(structure) if structure)
        end
      end

      # Create object from extracted values.
      LdapPermissions.new(ldap_permissions)
    end

    def self.from_element(root)
      ldap_permissions = XmlUtilities.from_element_to_array(root, 'Permission',
                                                            LdapPermission)

      new(ldap_permissions)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_array_as_subelement(doc, root, 'Permission',
                                           ldap_permissions)

      root
    end
  end
end
