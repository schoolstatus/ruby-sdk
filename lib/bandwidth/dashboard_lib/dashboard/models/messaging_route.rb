# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # MessagingRoute Model.
  class MessagingRoute < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :nn_id

    # TODO: Write general description for this method
    # @return [TnMessagingTypeEnum]
    attr_accessor :tn_messaging_type

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :default_route

    # TODO: Write general description for this method
    # @return [MessagingRouteDetailsWrapper]
    attr_accessor :details_wrapper

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['nn_id'] = 'nnId'
      @_hash['tn_messaging_type'] = 'tnMessagingType'
      @_hash['default_route'] = 'defaultRoute'
      @_hash['details_wrapper'] = 'detailsWrapper'
      @_hash
    end

    def initialize(nn_id = nil,
                   tn_messaging_type = nil,
                   default_route = nil,
                   details_wrapper = nil)
      @nn_id = nn_id
      @tn_messaging_type = tn_messaging_type
      @default_route = default_route
      @details_wrapper = details_wrapper
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      nn_id = hash['nnId']
      tn_messaging_type = hash['tnMessagingType']
      default_route = hash['defaultRoute']
      if hash['detailsWrapper']
        details_wrapper = MessagingRouteDetailsWrapper.from_hash(hash['detailsWrapper'])
      end

      # Create object from extracted values.
      MessagingRoute.new(nn_id,
                         tn_messaging_type,
                         default_route,
                         details_wrapper)
    end

    def self.from_element(root)
      nn_id = XmlUtilities.from_element(root, 'NNID', String)
      tn_messaging_type = XmlUtilities.from_element(root, 'TNType', String)
      default_route = XmlUtilities.from_element(root, 'Default', TrueClass)
      details_wrapper = XmlUtilities.from_element(root, 'Details',
                                                  MessagingRouteDetailsWrapper)

      new(nn_id,
          tn_messaging_type,
          default_route,
          details_wrapper)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'NNID', nn_id)
      XmlUtilities.add_as_subelement(doc, root, 'TNType', tn_messaging_type)
      XmlUtilities.add_as_subelement(doc, root, 'Default', default_route)
      XmlUtilities.add_as_subelement(doc, root, 'Details', details_wrapper)

      root
    end
  end
end
