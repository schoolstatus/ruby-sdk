# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # SipPeerHosts Model.
  class SipPeerHosts < BaseModel
    # TODO: Write general description for this method
    # @return [List of SipPeerHost]
    attr_accessor :sip_peer_hosts

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['sip_peer_hosts'] = 'sipPeerHosts'
      @_hash
    end

    def initialize(sip_peer_hosts = nil)
      @sip_peer_hosts = sip_peer_hosts
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      # Parameter is an array, so we need to iterate through it
      sip_peer_hosts = nil
      unless hash['sipPeerHosts'].nil?
        sip_peer_hosts = []
        hash['sipPeerHosts'].each do |structure|
          sip_peer_hosts << (SipPeerHost.from_hash(structure) if structure)
        end
      end

      # Create object from extracted values.
      SipPeerHosts.new(sip_peer_hosts)
    end

    def self.from_element(root)
      sip_peer_hosts = XmlUtilities.from_element_to_array(root, 'SipPeerHost',
                                                          SipPeerHost)

      new(sip_peer_hosts)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_array_as_subelement(doc, root, 'SipPeerHost',
                                           sip_peer_hosts)

      root
    end
  end
end
