# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # CnamDipSettings Model.
  class CnamDipSettings < BaseModel
    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :sustained_request_rate

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :burst_request_rate

    # TODO: Write general description for this method
    # @return [List of Host]
    attr_accessor :source_ips

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['sustained_request_rate'] = 'sustainedRequestRate'
      @_hash['burst_request_rate'] = 'burstRequestRate'
      @_hash['source_ips'] = 'sourceIps'
      @_hash
    end

    def initialize(sustained_request_rate = nil,
                   burst_request_rate = nil,
                   source_ips = nil)
      @sustained_request_rate = sustained_request_rate
      @burst_request_rate = burst_request_rate
      @source_ips = source_ips
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      sustained_request_rate = hash['sustainedRequestRate']
      burst_request_rate = hash['burstRequestRate']
      # Parameter is an array, so we need to iterate through it
      source_ips = nil
      unless hash['sourceIps'].nil?
        source_ips = []
        hash['sourceIps'].each do |structure|
          source_ips << (Host.from_hash(structure) if structure)
        end
      end

      # Create object from extracted values.
      CnamDipSettings.new(sustained_request_rate,
                          burst_request_rate,
                          source_ips)
    end

    def self.from_element(root)
      sustained_request_rate = XmlUtilities.from_element(root,
                                                         'SustainedRequestRate',
                                                         Integer)
      burst_request_rate = XmlUtilities.from_element(root, 'BurstRequestRate',
                                                     Integer)
      source_ips = XmlUtilities.from_element_to_array(
        root, 'Host', Host, wrapping_element_name: 'SourceIps'
      )

      new(sustained_request_rate,
          burst_request_rate,
          source_ips)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'SustainedRequestRate',
                                     sustained_request_rate)
      XmlUtilities.add_as_subelement(doc, root, 'BurstRequestRate',
                                     burst_request_rate)
      XmlUtilities.add_array_as_subelement(doc, root, 'Host', source_ips,
                                           wrapping_element_name: 'SourceIps')

      root
    end
  end
end
