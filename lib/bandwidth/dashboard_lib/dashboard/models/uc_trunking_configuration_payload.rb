# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # UcTrunkingConfigurationPayload Model.
  class UcTrunkingConfigurationPayload < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :partner_type

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :max_uc_trunks

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :billing_type

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :customer_traffic

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :usage_category

    # TODO: Write general description for this method
    # @return [List of UcTrunkingAllocationRule]
    attr_accessor :trunk_allocation_rules

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :main_u_cloud_host

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['partner_type'] = 'partnerType'
      @_hash['max_uc_trunks'] = 'maxUcTrunks'
      @_hash['billing_type'] = 'billingType'
      @_hash['customer_traffic'] = 'customerTraffic'
      @_hash['usage_category'] = 'usageCategory'
      @_hash['trunk_allocation_rules'] = 'trunkAllocationRules'
      @_hash['main_u_cloud_host'] = 'mainUCloudHost'
      @_hash
    end

    def initialize(partner_type = nil,
                   max_uc_trunks = nil,
                   billing_type = nil,
                   customer_traffic = nil,
                   usage_category = nil,
                   trunk_allocation_rules = nil,
                   main_u_cloud_host = nil)
      @partner_type = partner_type
      @max_uc_trunks = max_uc_trunks
      @billing_type = billing_type
      @customer_traffic = customer_traffic
      @usage_category = usage_category
      @trunk_allocation_rules = trunk_allocation_rules
      @main_u_cloud_host = main_u_cloud_host
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      partner_type = hash['partnerType']
      max_uc_trunks = hash['maxUcTrunks']
      billing_type = hash['billingType']
      customer_traffic = hash['customerTraffic']
      usage_category = hash['usageCategory']
      # Parameter is an array, so we need to iterate through it
      trunk_allocation_rules = nil
      unless hash['trunkAllocationRules'].nil?
        trunk_allocation_rules = []
        hash['trunkAllocationRules'].each do |structure|
          trunk_allocation_rules << (UcTrunkingAllocationRule.from_hash(structure) if structure)
        end
      end
      main_u_cloud_host = hash['mainUCloudHost']

      # Create object from extracted values.
      UcTrunkingConfigurationPayload.new(partner_type,
                                         max_uc_trunks,
                                         billing_type,
                                         customer_traffic,
                                         usage_category,
                                         trunk_allocation_rules,
                                         main_u_cloud_host)
    end

    def self.from_element(root)
      partner_type = XmlUtilities.from_element(root, 'PartnerType', String)
      max_uc_trunks = XmlUtilities.from_element(root, 'MaxUcTrunks', Integer)
      billing_type = XmlUtilities.from_element(root, 'BillingType', String)
      customer_traffic = XmlUtilities.from_element(root,
                                                   'CustomerTrafficAllowed',
                                                   String)
      usage_category = XmlUtilities.from_element(root, 'UsageCategory', String)
      trunk_allocation_rules = XmlUtilities.from_element_to_array(
        root, 'TrunkAllocationRule', UcTrunkingAllocationRule,
        wrapping_element_name: 'TrunkAllocationRules'
      )
      main_u_cloud_host = XmlUtilities.from_element(root, 'MainCloudHost',
                                                    String)

      new(partner_type,
          max_uc_trunks,
          billing_type,
          customer_traffic,
          usage_category,
          trunk_allocation_rules,
          main_u_cloud_host)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'PartnerType', partner_type)
      XmlUtilities.add_as_subelement(doc, root, 'MaxUcTrunks', max_uc_trunks)
      XmlUtilities.add_as_subelement(doc, root, 'BillingType', billing_type)
      XmlUtilities.add_as_subelement(doc, root, 'CustomerTrafficAllowed',
                                     customer_traffic)
      XmlUtilities.add_as_subelement(doc, root, 'UsageCategory', usage_category)
      XmlUtilities.add_array_as_subelement(
        doc, root, 'TrunkAllocationRule', trunk_allocation_rules,
        wrapping_element_name: 'TrunkAllocationRules'
      )
      XmlUtilities.add_as_subelement(doc, root, 'MainCloudHost',
                                     main_u_cloud_host)

      root
    end
  end
end
