# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # Level3PortingErrorSettingPayload Model.
  class Level3PortingErrorSettingPayload < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :l3_error_code

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :bandwidth_error_code

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :error_description

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :install_action

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :supp_action

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :cancel_action

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :port_tn_action

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :validate_action

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['l3_error_code'] = 'l3ErrorCode'
      @_hash['bandwidth_error_code'] = 'bandwidthErrorCode'
      @_hash['error_description'] = 'errorDescription'
      @_hash['install_action'] = 'installAction'
      @_hash['supp_action'] = 'suppAction'
      @_hash['cancel_action'] = 'cancelAction'
      @_hash['port_tn_action'] = 'portTnAction'
      @_hash['validate_action'] = 'validateAction'
      @_hash
    end

    def initialize(l3_error_code = nil,
                   bandwidth_error_code = nil,
                   error_description = nil,
                   install_action = nil,
                   supp_action = nil,
                   cancel_action = nil,
                   port_tn_action = nil,
                   validate_action = nil)
      @l3_error_code = l3_error_code
      @bandwidth_error_code = bandwidth_error_code
      @error_description = error_description
      @install_action = install_action
      @supp_action = supp_action
      @cancel_action = cancel_action
      @port_tn_action = port_tn_action
      @validate_action = validate_action
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      l3_error_code = hash['l3ErrorCode']
      bandwidth_error_code = hash['bandwidthErrorCode']
      error_description = hash['errorDescription']
      install_action = hash['installAction']
      supp_action = hash['suppAction']
      cancel_action = hash['cancelAction']
      port_tn_action = hash['portTnAction']
      validate_action = hash['validateAction']

      # Create object from extracted values.
      Level3PortingErrorSettingPayload.new(l3_error_code,
                                           bandwidth_error_code,
                                           error_description,
                                           install_action,
                                           supp_action,
                                           cancel_action,
                                           port_tn_action,
                                           validate_action)
    end

    def self.from_element(root)
      l3_error_code = XmlUtilities.from_element(root, 'L3ErrorCode', String)
      bandwidth_error_code = XmlUtilities.from_element(root,
                                                       'BandwidthErrorCode',
                                                       String)
      error_description = XmlUtilities.from_element(root, 'ErrorDescription',
                                                    String)
      install_action = XmlUtilities.from_element(root, 'InstallAction', String)
      supp_action = XmlUtilities.from_element(root, 'SuppAction', String)
      cancel_action = XmlUtilities.from_element(root, 'CancelAction', String)
      port_tn_action = XmlUtilities.from_element(root, 'PortTnAction', String)
      validate_action = XmlUtilities.from_element(root, 'ValidateAction',
                                                  String)

      new(l3_error_code,
          bandwidth_error_code,
          error_description,
          install_action,
          supp_action,
          cancel_action,
          port_tn_action,
          validate_action)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'L3ErrorCode', l3_error_code)
      XmlUtilities.add_as_subelement(doc, root, 'BandwidthErrorCode',
                                     bandwidth_error_code)
      XmlUtilities.add_as_subelement(doc, root, 'ErrorDescription',
                                     error_description)
      XmlUtilities.add_as_subelement(doc, root, 'InstallAction', install_action)
      XmlUtilities.add_as_subelement(doc, root, 'SuppAction', supp_action)
      XmlUtilities.add_as_subelement(doc, root, 'CancelAction', cancel_action)
      XmlUtilities.add_as_subelement(doc, root, 'PortTnAction', port_tn_action)
      XmlUtilities.add_as_subelement(doc, root, 'ValidateAction',
                                     validate_action)

      root
    end
  end
end
