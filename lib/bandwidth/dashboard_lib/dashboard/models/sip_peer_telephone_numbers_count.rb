# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # SipPeerTelephoneNumbersCount Model.
  class SipPeerTelephoneNumbersCount < BaseModel
    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :count

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :cnam_count

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :lidb_count

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :dlda_count

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :da_count

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['count'] = 'count'
      @_hash['cnam_count'] = 'cnamCount'
      @_hash['lidb_count'] = 'lidbCount'
      @_hash['dlda_count'] = 'dldaCount'
      @_hash['da_count'] = 'daCount'
      @_hash
    end

    def initialize(count = nil,
                   cnam_count = nil,
                   lidb_count = nil,
                   dlda_count = nil,
                   da_count = nil)
      @count = count
      @cnam_count = cnam_count
      @lidb_count = lidb_count
      @dlda_count = dlda_count
      @da_count = da_count
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      count = hash['count']
      cnam_count = hash['cnamCount']
      lidb_count = hash['lidbCount']
      dlda_count = hash['dldaCount']
      da_count = hash['daCount']

      # Create object from extracted values.
      SipPeerTelephoneNumbersCount.new(count,
                                       cnam_count,
                                       lidb_count,
                                       dlda_count,
                                       da_count)
    end

    def self.from_element(root)
      count = XmlUtilities.from_element(root, 'SipPeerTelephoneNumbersCount',
                                        Integer)
      cnam_count = XmlUtilities.from_element(root, 'CnamTelephoneNumbersCount',
                                             Integer)
      lidb_count = XmlUtilities.from_element(root, 'LidbTelephoneNumbersCount',
                                             Integer)
      dlda_count = XmlUtilities.from_element(root, 'DldaTelephoneNumbersCount',
                                             Integer)
      da_count = XmlUtilities.from_element(root, 'DaTelephoneNumbersCount',
                                           Integer)

      new(count,
          cnam_count,
          lidb_count,
          dlda_count,
          da_count)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'SipPeerTelephoneNumbersCount',
                                     count)
      XmlUtilities.add_as_subelement(doc, root, 'CnamTelephoneNumbersCount',
                                     cnam_count)
      XmlUtilities.add_as_subelement(doc, root, 'LidbTelephoneNumbersCount',
                                     lidb_count)
      XmlUtilities.add_as_subelement(doc, root, 'DldaTelephoneNumbersCount',
                                     dlda_count)
      XmlUtilities.add_as_subelement(doc, root, 'DaTelephoneNumbersCount',
                                     da_count)

      root
    end
  end
end
