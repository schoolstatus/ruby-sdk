# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # EmergencyNotificationGroupPayload Model.
  class EmergencyNotificationGroupPayload < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :identifier

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :created_date

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :modified_by

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :modified_date

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :description

    # TODO: Write general description for this method
    # @return [EmergencyNotificationRecipientsPayload]
    attr_accessor :emergency_notification_recipients

    # TODO: Write general description for this method
    # @return [EepToEngAssociationsPayload]
    attr_accessor :eep_to_eng_associations

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['identifier'] = 'identifier'
      @_hash['created_date'] = 'createdDate'
      @_hash['modified_by'] = 'modifiedBy'
      @_hash['modified_date'] = 'modifiedDate'
      @_hash['description'] = 'description'
      @_hash['emergency_notification_recipients'] =
        'emergencyNotificationRecipients'
      @_hash['eep_to_eng_associations'] = 'eepToEngAssociations'
      @_hash
    end

    def initialize(identifier = nil,
                   created_date = nil,
                   modified_by = nil,
                   modified_date = nil,
                   description = nil,
                   emergency_notification_recipients = nil,
                   eep_to_eng_associations = nil)
      @identifier = identifier
      @created_date = created_date
      @modified_by = modified_by
      @modified_date = modified_date
      @description = description
      @emergency_notification_recipients = emergency_notification_recipients
      @eep_to_eng_associations = eep_to_eng_associations
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      identifier = hash['identifier']
      created_date = hash['createdDate']
      modified_by = hash['modifiedBy']
      modified_date = hash['modifiedDate']
      description = hash['description']
      if hash['emergencyNotificationRecipients']
        emergency_notification_recipients = EmergencyNotificationRecipientsPayload.from_hash(hash['emergencyNotificationRecipients'])
      end
      if hash['eepToEngAssociations']
        eep_to_eng_associations = EepToEngAssociationsPayload.from_hash(hash['eepToEngAssociations'])
      end

      # Create object from extracted values.
      EmergencyNotificationGroupPayload.new(identifier,
                                            created_date,
                                            modified_by,
                                            modified_date,
                                            description,
                                            emergency_notification_recipients,
                                            eep_to_eng_associations)
    end

    def self.from_element(root)
      identifier = XmlUtilities.from_element(root, 'Identifier', String)
      created_date = XmlUtilities.from_element(root, 'CreatedDate', String)
      modified_by = XmlUtilities.from_element(root, 'ModifiedBy', String)
      modified_date = XmlUtilities.from_element(root, 'ModifiedDate', String)
      description = XmlUtilities.from_element(root, 'Description', String)
      emergency_notification_recipients = XmlUtilities.from_element(
        root, 'EmergencyNotificationRecipients',
        EmergencyNotificationRecipientsPayload
      )
      eep_to_eng_associations = XmlUtilities.from_element(
        root, 'EepToEngAssociations', EepToEngAssociationsPayload
      )

      new(identifier,
          created_date,
          modified_by,
          modified_date,
          description,
          emergency_notification_recipients,
          eep_to_eng_associations)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'Identifier', identifier)
      XmlUtilities.add_as_subelement(doc, root, 'CreatedDate', created_date)
      XmlUtilities.add_as_subelement(doc, root, 'ModifiedBy', modified_by)
      XmlUtilities.add_as_subelement(doc, root, 'ModifiedDate', modified_date)
      XmlUtilities.add_as_subelement(doc, root, 'Description', description)
      XmlUtilities.add_as_subelement(doc, root,
                                     'EmergencyNotificationRecipients',
                                     emergency_notification_recipients)
      XmlUtilities.add_as_subelement(doc, root, 'EepToEngAssociations',
                                     eep_to_eng_associations)

      root
    end
  end
end
