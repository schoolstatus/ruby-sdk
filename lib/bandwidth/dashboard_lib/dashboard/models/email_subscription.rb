# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # EmailSubscription Model.
  class EmailSubscription < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :email

    # TODO: Write general description for this method
    # @return [DigestRequestedEnum]
    attr_accessor :digest_requested

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['email'] = 'email'
      @_hash['digest_requested'] = 'digestRequested'
      @_hash
    end

    def initialize(email = nil,
                   digest_requested = nil)
      @email = email
      @digest_requested = digest_requested
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      email = hash['email']
      digest_requested = hash['digestRequested']

      # Create object from extracted values.
      EmailSubscription.new(email,
                            digest_requested)
    end

    def self.from_element(root)
      email = XmlUtilities.from_element(root, 'Email', String)
      digest_requested = XmlUtilities.from_element(root, 'DigestRequested',
                                                   String)

      new(email,
          digest_requested)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'Email', email)
      XmlUtilities.add_as_subelement(doc, root, 'DigestRequested',
                                     digest_requested)

      root
    end
  end
end
