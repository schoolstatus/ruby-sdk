# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # UserSettings Model.
  class UserSettings < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :scope

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :active

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :allowed_api_origin

    # TODO: Write general description for this method
    # @return [AllowedApiOriginEnum]
    attr_accessor :allowed_api_origin_enum

    # TODO: Write general description for this method
    # @return [ScopeEnum]
    attr_accessor :scope_enum

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['scope'] = 'scope'
      @_hash['active'] = 'active'
      @_hash['allowed_api_origin'] = 'allowedApiOrigin'
      @_hash['allowed_api_origin_enum'] = 'allowedApiOriginEnum'
      @_hash['scope_enum'] = 'scopeEnum'
      @_hash
    end

    def initialize(scope = nil,
                   active = nil,
                   allowed_api_origin = nil,
                   allowed_api_origin_enum = nil,
                   scope_enum = nil)
      @scope = scope
      @active = active
      @allowed_api_origin = allowed_api_origin
      @allowed_api_origin_enum = allowed_api_origin_enum
      @scope_enum = scope_enum
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      scope = hash['scope']
      active = hash['active']
      allowed_api_origin = hash['allowedApiOrigin']
      allowed_api_origin_enum = hash['allowedApiOriginEnum']
      scope_enum = hash['scopeEnum']

      # Create object from extracted values.
      UserSettings.new(scope,
                       active,
                       allowed_api_origin,
                       allowed_api_origin_enum,
                       scope_enum)
    end

    def self.from_element(root)
      scope = XmlUtilities.from_element(root, 'Scope', String)
      active = XmlUtilities.from_element(root, 'Active', TrueClass)
      allowed_api_origin = XmlUtilities.from_element(root, 'AllowedApiOrigin',
                                                     String)
      allowed_api_origin_enum = XmlUtilities.from_element(
        root, 'allowedApiOriginEnum', String
      )
      scope_enum = XmlUtilities.from_element(root, 'scopeEnum', String)

      new(scope,
          active,
          allowed_api_origin,
          allowed_api_origin_enum,
          scope_enum)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'Scope', scope)
      XmlUtilities.add_as_subelement(doc, root, 'Active', active)
      XmlUtilities.add_as_subelement(doc, root, 'AllowedApiOrigin',
                                     allowed_api_origin)
      XmlUtilities.add_as_subelement(doc, root, 'allowedApiOriginEnum',
                                     allowed_api_origin_enum)
      XmlUtilities.add_as_subelement(doc, root, 'scopeEnum', scope_enum)

      root
    end
  end
end
