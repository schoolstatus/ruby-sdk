# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module Bandwidth
  # LsrOrderPayload Model.
  class LsrOrderPayload < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :id

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :account_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :last_modified_date_in_utc

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :last_modified_by

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :created_by_user

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :customer_order_id

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :site_id

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :peer_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :order_create_date

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :override_validation

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :authorizing_person

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :spid

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :billing_telephone_number

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :pon

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :pon_version

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :partial_port

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :requested_foc_date

    # TODO: Write general description for this method
    # @return [DateTime]
    attr_accessor :actual_foc_date

    # TODO: Write general description for this method
    # @return [Subscriber]
    attr_accessor :subscriber

    # TODO: Write general description for this method
    # @return [List of String]
    attr_accessor :telephone_numbers

    # TODO: Write general description for this method
    # @return [List of LsrOrderError]
    attr_accessor :lsr_order_errors

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :count_of_t_ns

    # TODO: Write general description for this method
    # @return [OrderStatus1Enum]
    attr_accessor :order_status

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['account_id'] = 'accountId'
      @_hash['name'] = 'name'
      @_hash['last_modified_date_in_utc'] = 'lastModifiedDateInUtc'
      @_hash['last_modified_by'] = 'lastModifiedBy'
      @_hash['created_by_user'] = 'createdByUser'
      @_hash['customer_order_id'] = 'customerOrderId'
      @_hash['site_id'] = 'siteId'
      @_hash['peer_id'] = 'peerId'
      @_hash['order_create_date'] = 'orderCreateDate'
      @_hash['override_validation'] = 'overrideValidation'
      @_hash['authorizing_person'] = 'authorizingPerson'
      @_hash['spid'] = 'spid'
      @_hash['billing_telephone_number'] = 'billingTelephoneNumber'
      @_hash['pon'] = 'pon'
      @_hash['pon_version'] = 'ponVersion'
      @_hash['partial_port'] = 'partialPort'
      @_hash['requested_foc_date'] = 'requestedFocDate'
      @_hash['actual_foc_date'] = 'actualFocDate'
      @_hash['subscriber'] = 'subscriber'
      @_hash['telephone_numbers'] = 'telephoneNumbers'
      @_hash['lsr_order_errors'] = 'lsrOrderErrors'
      @_hash['count_of_t_ns'] = 'countOfTNs'
      @_hash['order_status'] = 'orderStatus'
      @_hash
    end

    def initialize(id = nil,
                   account_id = nil,
                   name = nil,
                   last_modified_date_in_utc = nil,
                   last_modified_by = nil,
                   created_by_user = nil,
                   customer_order_id = nil,
                   site_id = nil,
                   peer_id = nil,
                   order_create_date = nil,
                   override_validation = nil,
                   authorizing_person = nil,
                   spid = nil,
                   billing_telephone_number = nil,
                   pon = nil,
                   pon_version = nil,
                   partial_port = nil,
                   requested_foc_date = nil,
                   actual_foc_date = nil,
                   subscriber = nil,
                   telephone_numbers = nil,
                   lsr_order_errors = nil,
                   count_of_t_ns = nil,
                   order_status = nil)
      @id = id
      @account_id = account_id
      @name = name
      @last_modified_date_in_utc = last_modified_date_in_utc
      @last_modified_by = last_modified_by
      @created_by_user = created_by_user
      @customer_order_id = customer_order_id
      @site_id = site_id
      @peer_id = peer_id
      @order_create_date = order_create_date
      @override_validation = override_validation
      @authorizing_person = authorizing_person
      @spid = spid
      @billing_telephone_number = billing_telephone_number
      @pon = pon
      @pon_version = pon_version
      @partial_port = partial_port
      @requested_foc_date = requested_foc_date
      @actual_foc_date = actual_foc_date
      @subscriber = subscriber
      @telephone_numbers = telephone_numbers
      @lsr_order_errors = lsr_order_errors
      @count_of_t_ns = count_of_t_ns
      @order_status = order_status
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash['id']
      account_id = hash['accountId']
      name = hash['name']
      last_modified_date_in_utc = hash['lastModifiedDateInUtc']
      last_modified_by = hash['lastModifiedBy']
      created_by_user = hash['createdByUser']
      customer_order_id = hash['customerOrderId']
      site_id = hash['siteId']
      peer_id = hash['peerId']
      order_create_date = hash['orderCreateDate']
      override_validation = hash['overrideValidation']
      authorizing_person = hash['authorizingPerson']
      spid = hash['spid']
      billing_telephone_number = hash['billingTelephoneNumber']
      pon = hash['pon']
      pon_version = hash['ponVersion']
      partial_port = hash['partialPort']
      requested_foc_date = hash['requestedFocDate']
      actual_foc_date = APIHelper.rfc3339(hash['actualFocDate']) if
        hash['actualFocDate']
      subscriber = Subscriber.from_hash(hash['subscriber']) if
        hash['subscriber']
      telephone_numbers = hash['telephoneNumbers']
      # Parameter is an array, so we need to iterate through it
      lsr_order_errors = nil
      unless hash['lsrOrderErrors'].nil?
        lsr_order_errors = []
        hash['lsrOrderErrors'].each do |structure|
          lsr_order_errors << (LsrOrderError.from_hash(structure) if structure)
        end
      end
      count_of_t_ns = hash['countOfTNs']
      order_status = hash['orderStatus']

      # Create object from extracted values.
      LsrOrderPayload.new(id,
                          account_id,
                          name,
                          last_modified_date_in_utc,
                          last_modified_by,
                          created_by_user,
                          customer_order_id,
                          site_id,
                          peer_id,
                          order_create_date,
                          override_validation,
                          authorizing_person,
                          spid,
                          billing_telephone_number,
                          pon,
                          pon_version,
                          partial_port,
                          requested_foc_date,
                          actual_foc_date,
                          subscriber,
                          telephone_numbers,
                          lsr_order_errors,
                          count_of_t_ns,
                          order_status)
    end

    def self.from_element(root)
      id = XmlUtilities.from_element(root, 'OrderId', String)
      account_id = XmlUtilities.from_element(root, 'AccountId', Integer)
      name = XmlUtilities.from_element(root, 'Name', String)
      last_modified_date_in_utc = XmlUtilities.from_element(root,
                                                            'LastModifiedDate',
                                                            String)
      last_modified_by = XmlUtilities.from_element(root, 'LastModifiedBy',
                                                   String)
      created_by_user = XmlUtilities.from_element(root, 'CreatedByUser', String)
      customer_order_id = XmlUtilities.from_element(root, 'CustomerOrderId',
                                                    String)
      site_id = XmlUtilities.from_element(root, 'SiteId', Integer)
      peer_id = XmlUtilities.from_element(root, 'PeerId', Integer)
      order_create_date = XmlUtilities.from_element(root, 'OrderCreateDate',
                                                    String)
      override_validation = XmlUtilities.from_element(root,
                                                      'OverrideValidation',
                                                      TrueClass)
      authorizing_person = XmlUtilities.from_element(root, 'AuthorizingPerson',
                                                     String)
      spid = XmlUtilities.from_element(root, 'SPID', String)
      billing_telephone_number = XmlUtilities.from_element(
        root, 'BillingTelephoneNumber', String
      )
      pon = XmlUtilities.from_element(root, 'Pon', String)
      pon_version = XmlUtilities.from_element(root, 'PonVersion', Integer)
      partial_port = XmlUtilities.from_element(root, 'PartialPort', TrueClass)
      requested_foc_date = XmlUtilities.from_element(root, 'RequestedFocDate',
                                                     String)
      actual_foc_date = XmlUtilities.from_element(root, 'ActualFocDate', String,
                                                  datetime_format: 'rfc3339')
      subscriber = XmlUtilities.from_element(root, 'Subscriber', Subscriber)
      telephone_numbers = XmlUtilities.from_element_to_array(
        root, 'TelephoneNumber', String,
        wrapping_element_name: 'ListOfTelephoneNumbers'
      )
      lsr_order_errors = XmlUtilities.from_element_to_array(
        root, 'LsrSubmissionOrderError', LsrOrderError,
        wrapping_element_name: 'LsrOrderErrors'
      )
      count_of_t_ns = XmlUtilities.from_element(root, 'CountOfTNs', Integer)
      order_status = XmlUtilities.from_element(root, 'OrderStatus', String)

      new(id,
          account_id,
          name,
          last_modified_date_in_utc,
          last_modified_by,
          created_by_user,
          customer_order_id,
          site_id,
          peer_id,
          order_create_date,
          override_validation,
          authorizing_person,
          spid,
          billing_telephone_number,
          pon,
          pon_version,
          partial_port,
          requested_foc_date,
          actual_foc_date,
          subscriber,
          telephone_numbers,
          lsr_order_errors,
          count_of_t_ns,
          order_status)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'OrderId', id)
      XmlUtilities.add_as_subelement(doc, root, 'AccountId', account_id)
      XmlUtilities.add_as_subelement(doc, root, 'Name', name)
      XmlUtilities.add_as_subelement(doc, root, 'LastModifiedDate',
                                     last_modified_date_in_utc)
      XmlUtilities.add_as_subelement(doc, root, 'LastModifiedBy',
                                     last_modified_by)
      XmlUtilities.add_as_subelement(doc, root, 'CreatedByUser',
                                     created_by_user)
      XmlUtilities.add_as_subelement(doc, root, 'CustomerOrderId',
                                     customer_order_id)
      XmlUtilities.add_as_subelement(doc, root, 'SiteId', site_id)
      XmlUtilities.add_as_subelement(doc, root, 'PeerId', peer_id)
      XmlUtilities.add_as_subelement(doc, root, 'OrderCreateDate',
                                     order_create_date)
      XmlUtilities.add_as_subelement(doc, root, 'OverrideValidation',
                                     override_validation)
      XmlUtilities.add_as_subelement(doc, root, 'AuthorizingPerson',
                                     authorizing_person)
      XmlUtilities.add_as_subelement(doc, root, 'SPID', spid)
      XmlUtilities.add_as_subelement(doc, root, 'BillingTelephoneNumber',
                                     billing_telephone_number)
      XmlUtilities.add_as_subelement(doc, root, 'Pon', pon)
      XmlUtilities.add_as_subelement(doc, root, 'PonVersion', pon_version)
      XmlUtilities.add_as_subelement(doc, root, 'PartialPort', partial_port)
      XmlUtilities.add_as_subelement(doc, root, 'RequestedFocDate',
                                     requested_foc_date)
      XmlUtilities.add_as_subelement(doc, root, 'ActualFocDate',
                                     actual_foc_date,
                                     datetime_format: 'rfc3339')
      XmlUtilities.add_as_subelement(doc, root, 'Subscriber', subscriber)
      XmlUtilities.add_array_as_subelement(
        doc, root, 'TelephoneNumber', telephone_numbers,
        wrapping_element_name: 'ListOfTelephoneNumbers'
      )
      XmlUtilities.add_array_as_subelement(
        doc, root, 'LsrSubmissionOrderError', lsr_order_errors,
        wrapping_element_name: 'LsrOrderErrors'
      )
      XmlUtilities.add_as_subelement(doc, root, 'CountOfTNs', count_of_t_ns)
      XmlUtilities.add_as_subelement(doc, root, 'OrderStatus', order_status)

      root
    end
  end
end
