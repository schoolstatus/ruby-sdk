# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # LnpCarrier Model.
  class LnpCarrier < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :spid

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :name

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :port_out_minimum_days

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :l3_port_out_minimum_days

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :vendor_id

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :on_net_tn_threshold

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['spid'] = 'spid'
      @_hash['name'] = 'name'
      @_hash['port_out_minimum_days'] = 'portOutMinimumDays'
      @_hash['l3_port_out_minimum_days'] = 'l3PortOutMinimumDays'
      @_hash['vendor_id'] = 'vendorId'
      @_hash['on_net_tn_threshold'] = 'onNetTnThreshold'
      @_hash
    end

    def initialize(spid = nil,
                   name = nil,
                   port_out_minimum_days = nil,
                   l3_port_out_minimum_days = nil,
                   vendor_id = nil,
                   on_net_tn_threshold = nil)
      @spid = spid
      @name = name
      @port_out_minimum_days = port_out_minimum_days
      @l3_port_out_minimum_days = l3_port_out_minimum_days
      @vendor_id = vendor_id
      @on_net_tn_threshold = on_net_tn_threshold
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      spid = hash['spid']
      name = hash['name']
      port_out_minimum_days = hash['portOutMinimumDays']
      l3_port_out_minimum_days = hash['l3PortOutMinimumDays']
      vendor_id = hash['vendorId']
      on_net_tn_threshold = hash['onNetTnThreshold']

      # Create object from extracted values.
      LnpCarrier.new(spid,
                     name,
                     port_out_minimum_days,
                     l3_port_out_minimum_days,
                     vendor_id,
                     on_net_tn_threshold)
    end

    def self.from_element(root)
      spid = XmlUtilities.from_element(root, 'Spid', String)
      name = XmlUtilities.from_element(root, 'Name', String)
      port_out_minimum_days = XmlUtilities.from_element(root, 'PortOutMinDays',
                                                        Integer)
      l3_port_out_minimum_days = XmlUtilities.from_element(root,
                                                           'L3PortOutMinDays',
                                                           Integer)
      vendor_id = XmlUtilities.from_element(root, 'VendorId', Integer)
      on_net_tn_threshold = XmlUtilities.from_element(root,
                                                      'MaxTnsPerAutomatedPort',
                                                      Integer)

      new(spid,
          name,
          port_out_minimum_days,
          l3_port_out_minimum_days,
          vendor_id,
          on_net_tn_threshold)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'Spid', spid)
      XmlUtilities.add_as_subelement(doc, root, 'Name', name)
      XmlUtilities.add_as_subelement(doc, root, 'PortOutMinDays',
                                     port_out_minimum_days)
      XmlUtilities.add_as_subelement(doc, root, 'L3PortOutMinDays',
                                     l3_port_out_minimum_days)
      XmlUtilities.add_as_subelement(doc, root, 'VendorId', vendor_id)
      XmlUtilities.add_as_subelement(doc, root, 'MaxTnsPerAutomatedPort',
                                     on_net_tn_threshold)

      root
    end
  end
end
