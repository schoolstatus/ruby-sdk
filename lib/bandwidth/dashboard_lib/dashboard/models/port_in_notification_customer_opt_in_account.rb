# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module Bandwidth
  # PortInNotificationCustomerOptInAccount Model.
  class PortInNotificationCustomerOptInAccount < BaseModel
    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :id

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :version

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :account_id

    # TODO: Write general description for this method
    # @return [DateTime]
    attr_accessor :last_modified_date

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :new

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['version'] = 'version'
      @_hash['account_id'] = 'accountId'
      @_hash['last_modified_date'] = 'lastModifiedDate'
      @_hash['new'] = 'new'
      @_hash
    end

    def initialize(id = nil,
                   version = nil,
                   account_id = nil,
                   last_modified_date = nil,
                   new = nil)
      @id = id
      @version = version
      @account_id = account_id
      @last_modified_date = last_modified_date
      @new = new
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash['id']
      version = hash['version']
      account_id = hash['accountId']
      last_modified_date = APIHelper.rfc3339(hash['lastModifiedDate']) if
        hash['lastModifiedDate']
      new = hash['new']

      # Create object from extracted values.
      PortInNotificationCustomerOptInAccount.new(id,
                                                 version,
                                                 account_id,
                                                 last_modified_date,
                                                 new)
    end

    def self.from_element(root)
      id = XmlUtilities.from_element(root, 'id', Integer)
      version = XmlUtilities.from_element(root, 'version', Integer)
      account_id = XmlUtilities.from_element(root, 'AccountId', Integer)
      last_modified_date = XmlUtilities.from_element(root, 'lastModifiedDate',
                                                     String,
                                                     datetime_format: 'rfc3339')
      new = XmlUtilities.from_element(root, 'new', TrueClass)

      new(id,
          version,
          account_id,
          last_modified_date,
          new)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'id', id)
      XmlUtilities.add_as_subelement(doc, root, 'version', version)
      XmlUtilities.add_as_subelement(doc, root, 'AccountId', account_id)
      XmlUtilities.add_as_subelement(doc, root, 'lastModifiedDate',
                                     last_modified_date,
                                     datetime_format: 'rfc3339')
      XmlUtilities.add_as_subelement(doc, root, 'new', new)

      root
    end
  end
end
