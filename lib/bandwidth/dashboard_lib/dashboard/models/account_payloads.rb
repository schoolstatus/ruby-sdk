# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # AccountPayloads Model.
  class AccountPayloads < BaseModel
    # TODO: Write general description for this method
    # @return [List of AccountPayload]
    attr_accessor :accounts

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['accounts'] = 'accounts'
      @_hash
    end

    def initialize(accounts = nil)
      @accounts = accounts
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      # Parameter is an array, so we need to iterate through it
      accounts = nil
      unless hash['accounts'].nil?
        accounts = []
        hash['accounts'].each do |structure|
          accounts << (AccountPayload.from_hash(structure) if structure)
        end
      end

      # Create object from extracted values.
      AccountPayloads.new(accounts)
    end

    def self.from_element(root)
      accounts = XmlUtilities.from_element_to_array(root, 'Account',
                                                    AccountPayload)

      new(accounts)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_array_as_subelement(doc, root, 'Account', accounts)

      root
    end
  end
end
