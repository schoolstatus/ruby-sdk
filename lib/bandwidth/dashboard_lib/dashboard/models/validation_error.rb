# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # ValidationError Model.
  class ValidationError < BaseModel
    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :id

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :version

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :type

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :type_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :code

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :description

    # TODO: Write general description for this method
    # @return [List of String]
    attr_accessor :telephone_numbers

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :new

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['version'] = 'version'
      @_hash['type'] = 'type'
      @_hash['type_id'] = 'typeId'
      @_hash['code'] = 'code'
      @_hash['description'] = 'description'
      @_hash['telephone_numbers'] = 'telephoneNumbers'
      @_hash['new'] = 'new'
      @_hash
    end

    def initialize(id = nil,
                   version = nil,
                   type = nil,
                   type_id = nil,
                   code = nil,
                   description = nil,
                   telephone_numbers = nil,
                   new = nil)
      @id = id
      @version = version
      @type = type
      @type_id = type_id
      @code = code
      @description = description
      @telephone_numbers = telephone_numbers
      @new = new
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash['id']
      version = hash['version']
      type = hash['type']
      type_id = hash['typeId']
      code = hash['code']
      description = hash['description']
      telephone_numbers = hash['telephoneNumbers']
      new = hash['new']

      # Create object from extracted values.
      ValidationError.new(id,
                          version,
                          type,
                          type_id,
                          code,
                          description,
                          telephone_numbers,
                          new)
    end

    def self.from_element(root)
      id = XmlUtilities.from_element(root, 'id', Integer)
      version = XmlUtilities.from_element(root, 'version', Integer)
      type = XmlUtilities.from_element(root, 'type', String)
      type_id = XmlUtilities.from_element(root, 'typeId', String)
      code = XmlUtilities.from_element(root, 'Code', String)
      description = XmlUtilities.from_element(root, 'Description', String)
      telephone_numbers = XmlUtilities.from_element_to_array(
        root, 'Tn', String, wrapping_element_name: 'TelephoneNumbers'
      )
      new = XmlUtilities.from_element(root, 'new', TrueClass)

      new(id,
          version,
          type,
          type_id,
          code,
          description,
          telephone_numbers,
          new)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'id', id)
      XmlUtilities.add_as_subelement(doc, root, 'version', version)
      XmlUtilities.add_as_subelement(doc, root, 'type', type)
      XmlUtilities.add_as_subelement(doc, root, 'typeId', type_id)
      XmlUtilities.add_as_subelement(doc, root, 'Code', code)
      XmlUtilities.add_as_subelement(doc, root, 'Description', description)
      XmlUtilities.add_array_as_subelement(
        doc, root, 'Tn', telephone_numbers,
        wrapping_element_name: 'TelephoneNumbers'
      )
      XmlUtilities.add_as_subelement(doc, root, 'new', new)

      root
    end
  end
end
