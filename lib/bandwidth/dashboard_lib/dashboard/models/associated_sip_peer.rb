# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # AssociatedSipPeer Model.
  class AssociatedSipPeer < BaseModel
    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :site_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :site_name

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :peer_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :peer_name

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['site_id'] = 'siteId'
      @_hash['site_name'] = 'siteName'
      @_hash['peer_id'] = 'peerId'
      @_hash['peer_name'] = 'peerName'
      @_hash
    end

    def initialize(site_id = nil,
                   site_name = nil,
                   peer_id = nil,
                   peer_name = nil)
      @site_id = site_id
      @site_name = site_name
      @peer_id = peer_id
      @peer_name = peer_name
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      site_id = hash['siteId']
      site_name = hash['siteName']
      peer_id = hash['peerId']
      peer_name = hash['peerName']

      # Create object from extracted values.
      AssociatedSipPeer.new(site_id,
                            site_name,
                            peer_id,
                            peer_name)
    end

    def self.from_element(root)
      site_id = XmlUtilities.from_element(root, 'SiteId', Integer)
      site_name = XmlUtilities.from_element(root, 'SiteName', String)
      peer_id = XmlUtilities.from_element(root, 'PeerId', Integer)
      peer_name = XmlUtilities.from_element(root, 'PeerName', String)

      new(site_id,
          site_name,
          peer_id,
          peer_name)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'SiteId', site_id)
      XmlUtilities.add_as_subelement(doc, root, 'SiteName', site_name)
      XmlUtilities.add_as_subelement(doc, root, 'PeerId', peer_id)
      XmlUtilities.add_as_subelement(doc, root, 'PeerName', peer_name)

      root
    end
  end
end
