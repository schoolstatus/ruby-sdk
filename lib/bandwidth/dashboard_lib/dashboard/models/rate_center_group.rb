# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # RateCenterGroup Model.
  class RateCenterGroup < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :vendor

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :automated_port

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :rate_center

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :city

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :state

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :lata

    # TODO: Write general description for this method
    # @return [List of Integer]
    attr_accessor :tiers

    # TODO: Write general description for this method
    # @return [List of String]
    attr_accessor :telephone_numbers

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['vendor'] = 'vendor'
      @_hash['automated_port'] = 'automatedPort'
      @_hash['rate_center'] = 'rateCenter'
      @_hash['city'] = 'city'
      @_hash['state'] = 'state'
      @_hash['lata'] = 'lata'
      @_hash['tiers'] = 'tiers'
      @_hash['telephone_numbers'] = 'telephoneNumbers'
      @_hash
    end

    def initialize(vendor = nil,
                   automated_port = nil,
                   rate_center = nil,
                   city = nil,
                   state = nil,
                   lata = nil,
                   tiers = nil,
                   telephone_numbers = nil)
      @vendor = vendor
      @automated_port = automated_port
      @rate_center = rate_center
      @city = city
      @state = state
      @lata = lata
      @tiers = tiers
      @telephone_numbers = telephone_numbers
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      vendor = hash['vendor']
      automated_port = hash['automatedPort']
      rate_center = hash['rateCenter']
      city = hash['city']
      state = hash['state']
      lata = hash['lata']
      tiers = hash['tiers']
      telephone_numbers = hash['telephoneNumbers']

      # Create object from extracted values.
      RateCenterGroup.new(vendor,
                          automated_port,
                          rate_center,
                          city,
                          state,
                          lata,
                          tiers,
                          telephone_numbers)
    end

    def self.from_element(root)
      vendor = XmlUtilities.from_element(root, 'Vendor', String)
      automated_port = XmlUtilities.from_element(root, 'AutomatedPort',
                                                 TrueClass)
      rate_center = XmlUtilities.from_element(root, 'RateCenter', String)
      city = XmlUtilities.from_element(root, 'City', String)
      state = XmlUtilities.from_element(root, 'State', String)
      lata = XmlUtilities.from_element(root, 'LATA', String)
      tiers = XmlUtilities.from_element_to_array(root, 'Tier', Integer,
                                                 wrapping_element_name: 'Tiers')
      telephone_numbers = XmlUtilities.from_element_to_array(
        root, 'Tn', String, wrapping_element_name: 'TnList'
      )

      new(vendor,
          automated_port,
          rate_center,
          city,
          state,
          lata,
          tiers,
          telephone_numbers)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'Vendor', vendor)
      XmlUtilities.add_as_subelement(doc, root, 'AutomatedPort', automated_port)
      XmlUtilities.add_as_subelement(doc, root, 'RateCenter', rate_center)
      XmlUtilities.add_as_subelement(doc, root, 'City', city)
      XmlUtilities.add_as_subelement(doc, root, 'State', state)
      XmlUtilities.add_as_subelement(doc, root, 'LATA', lata)
      XmlUtilities.add_array_as_subelement(doc, root, 'Tier', tiers,
                                           wrapping_element_name: 'Tiers')
      XmlUtilities.add_array_as_subelement(doc, root, 'Tn', telephone_numbers,
                                           wrapping_element_name: 'TnList')

      root
    end
  end
end
