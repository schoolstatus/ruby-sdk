# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # LdapRoles Model.
  class LdapRoles < BaseModel
    # TODO: Write general description for this method
    # @return [List of LdapRole]
    attr_accessor :ldap_roles

    # TODO: Write general description for this method
    # @return [List of String]
    attr_accessor :role_names

    # TODO: Write general description for this method
    # @return [List of String]
    attr_accessor :role_ids

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['ldap_roles'] = 'ldapRoles'
      @_hash['role_names'] = 'roleNames'
      @_hash['role_ids'] = 'roleIds'
      @_hash
    end

    def initialize(ldap_roles = nil,
                   role_names = nil,
                   role_ids = nil)
      @ldap_roles = ldap_roles
      @role_names = role_names
      @role_ids = role_ids
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      # Parameter is an array, so we need to iterate through it
      ldap_roles = nil
      unless hash['ldapRoles'].nil?
        ldap_roles = []
        hash['ldapRoles'].each do |structure|
          ldap_roles << (LdapRole.from_hash(structure) if structure)
        end
      end
      role_names = hash['roleNames']
      role_ids = hash['roleIds']

      # Create object from extracted values.
      LdapRoles.new(ldap_roles,
                    role_names,
                    role_ids)
    end

    def self.from_element(root)
      ldap_roles = XmlUtilities.from_element_to_array(root, 'Role', LdapRole)
      role_names = XmlUtilities.from_element_to_array(root, 'roleNames', String)
      role_ids = XmlUtilities.from_element_to_array(root, 'roleIds', String)

      new(ldap_roles,
          role_names,
          role_ids)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_array_as_subelement(doc, root, 'Role', ldap_roles)
      XmlUtilities.add_array_as_subelement(doc, root, 'roleNames', role_names)
      XmlUtilities.add_array_as_subelement(doc, root, 'roleIds', role_ids)

      root
    end
  end
end
