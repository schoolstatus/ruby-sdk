# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # MessagingSettings Model.
  class MessagingSettings < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :sms_enabled

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :campaign_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :message_class

    # TODO: Write general description for this method
    # @return [A2pStateEnum]
    attr_accessor :a2p_state

    # TODO: Write general description for this method
    # @return [TnDetailsNnRoute]
    attr_accessor :assigned_nn_route

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['sms_enabled'] = 'smsEnabled'
      @_hash['campaign_id'] = 'campaignId'
      @_hash['message_class'] = 'messageClass'
      @_hash['a2p_state'] = 'a2pState'
      @_hash['assigned_nn_route'] = 'assignedNNRoute'
      @_hash
    end

    def initialize(sms_enabled = nil,
                   campaign_id = nil,
                   message_class = nil,
                   a2p_state = nil,
                   assigned_nn_route = nil)
      @sms_enabled = sms_enabled
      @campaign_id = campaign_id
      @message_class = message_class
      @a2p_state = a2p_state
      @assigned_nn_route = assigned_nn_route
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      sms_enabled = hash['smsEnabled']
      campaign_id = hash['campaignId']
      message_class = hash['messageClass']
      a2p_state = hash['a2pState']
      assigned_nn_route = TnDetailsNnRoute.from_hash(hash['assignedNNRoute']) if
        hash['assignedNNRoute']

      # Create object from extracted values.
      MessagingSettings.new(sms_enabled,
                            campaign_id,
                            message_class,
                            a2p_state,
                            assigned_nn_route)
    end

    def self.from_element(root)
      sms_enabled = XmlUtilities.from_element(root, 'SmsEnabled', String)
      campaign_id = XmlUtilities.from_element(root, 'CampaignId', String)
      message_class = XmlUtilities.from_element(root, 'MessageClass', String)
      a2p_state = XmlUtilities.from_element(root, 'A2pState', String)
      assigned_nn_route = XmlUtilities.from_element(root, 'AssignedNnRoute',
                                                    TnDetailsNnRoute)

      new(sms_enabled,
          campaign_id,
          message_class,
          a2p_state,
          assigned_nn_route)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'SmsEnabled', sms_enabled)
      XmlUtilities.add_as_subelement(doc, root, 'CampaignId', campaign_id)
      XmlUtilities.add_as_subelement(doc, root, 'MessageClass', message_class)
      XmlUtilities.add_as_subelement(doc, root, 'A2pState', a2p_state)
      XmlUtilities.add_as_subelement(doc, root, 'AssignedNnRoute',
                                     assigned_nn_route)

      root
    end
  end
end
