# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # CsrOrderResponse Model.
  class CsrOrderResponse < BaseModel
    # TODO: Write general description for this method
    # @return [Csr]
    attr_accessor :payload

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :order_id

    # TODO: Write general description for this method
    # @return [Status3Enum]
    attr_accessor :status

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :customer_order_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :last_modified_by

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :order_create_date

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :account_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :last_modified_date

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :account_number

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :account_telephone_number

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :end_user_name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :authorizing_user_name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :customer_code

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :end_user_pin

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :end_user_password

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :address_line_one

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :city

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :state

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :zip_code

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :type_of_service

    # TODO: Write general description for this method
    # @return [List of CsrError]
    attr_accessor :csr_errors

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['payload'] = 'payload'
      @_hash['order_id'] = 'orderId'
      @_hash['status'] = 'status'
      @_hash['customer_order_id'] = 'customerOrderId'
      @_hash['last_modified_by'] = 'lastModifiedBy'
      @_hash['order_create_date'] = 'orderCreateDate'
      @_hash['account_id'] = 'accountId'
      @_hash['last_modified_date'] = 'lastModifiedDate'
      @_hash['account_number'] = 'accountNumber'
      @_hash['account_telephone_number'] = 'accountTelephoneNumber'
      @_hash['end_user_name'] = 'endUserName'
      @_hash['authorizing_user_name'] = 'authorizingUserName'
      @_hash['customer_code'] = 'customerCode'
      @_hash['end_user_pin'] = 'endUserPIN'
      @_hash['end_user_password'] = 'endUserPassword'
      @_hash['address_line_one'] = 'addressLineOne'
      @_hash['city'] = 'city'
      @_hash['state'] = 'state'
      @_hash['zip_code'] = 'zipCode'
      @_hash['type_of_service'] = 'typeOfService'
      @_hash['csr_errors'] = 'csrErrors'
      @_hash
    end

    def initialize(payload = nil,
                   order_id = nil,
                   status = nil,
                   customer_order_id = nil,
                   last_modified_by = nil,
                   order_create_date = nil,
                   account_id = nil,
                   last_modified_date = nil,
                   account_number = nil,
                   account_telephone_number = nil,
                   end_user_name = nil,
                   authorizing_user_name = nil,
                   customer_code = nil,
                   end_user_pin = nil,
                   end_user_password = nil,
                   address_line_one = nil,
                   city = nil,
                   state = nil,
                   zip_code = nil,
                   type_of_service = nil,
                   csr_errors = nil)
      @payload = payload
      @order_id = order_id
      @status = status
      @customer_order_id = customer_order_id
      @last_modified_by = last_modified_by
      @order_create_date = order_create_date
      @account_id = account_id
      @last_modified_date = last_modified_date
      @account_number = account_number
      @account_telephone_number = account_telephone_number
      @end_user_name = end_user_name
      @authorizing_user_name = authorizing_user_name
      @customer_code = customer_code
      @end_user_pin = end_user_pin
      @end_user_password = end_user_password
      @address_line_one = address_line_one
      @city = city
      @state = state
      @zip_code = zip_code
      @type_of_service = type_of_service
      @csr_errors = csr_errors
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      payload = Csr.from_hash(hash['payload']) if hash['payload']
      order_id = hash['orderId']
      status = hash['status']
      customer_order_id = hash['customerOrderId']
      last_modified_by = hash['lastModifiedBy']
      order_create_date = hash['orderCreateDate']
      account_id = hash['accountId']
      last_modified_date = hash['lastModifiedDate']
      account_number = hash['accountNumber']
      account_telephone_number = hash['accountTelephoneNumber']
      end_user_name = hash['endUserName']
      authorizing_user_name = hash['authorizingUserName']
      customer_code = hash['customerCode']
      end_user_pin = hash['endUserPIN']
      end_user_password = hash['endUserPassword']
      address_line_one = hash['addressLineOne']
      city = hash['city']
      state = hash['state']
      zip_code = hash['zipCode']
      type_of_service = hash['typeOfService']
      # Parameter is an array, so we need to iterate through it
      csr_errors = nil
      unless hash['csrErrors'].nil?
        csr_errors = []
        hash['csrErrors'].each do |structure|
          csr_errors << (CsrError.from_hash(structure) if structure)
        end
      end

      # Create object from extracted values.
      CsrOrderResponse.new(payload,
                           order_id,
                           status,
                           customer_order_id,
                           last_modified_by,
                           order_create_date,
                           account_id,
                           last_modified_date,
                           account_number,
                           account_telephone_number,
                           end_user_name,
                           authorizing_user_name,
                           customer_code,
                           end_user_pin,
                           end_user_password,
                           address_line_one,
                           city,
                           state,
                           zip_code,
                           type_of_service,
                           csr_errors)
    end

    def self.from_element(root)
      payload = XmlUtilities.from_element(root, 'CsrData', Csr)
      order_id = XmlUtilities.from_element(root, 'OrderId', String)
      status = XmlUtilities.from_element(root, 'Status', String)
      customer_order_id = XmlUtilities.from_element(root, 'CustomerOrderId',
                                                    String)
      last_modified_by = XmlUtilities.from_element(root, 'LastModifiedBy',
                                                   String)
      order_create_date = XmlUtilities.from_element(root, 'OrderCreateDate',
                                                    String)
      account_id = XmlUtilities.from_element(root, 'AccountId', Integer)
      last_modified_date = XmlUtilities.from_element(root, 'LastModifiedDate',
                                                     String)
      account_number = XmlUtilities.from_element(root, 'AccountNumber', String)
      account_telephone_number = XmlUtilities.from_element(
        root, 'AccountTelephoneNumber', String
      )
      end_user_name = XmlUtilities.from_element(root, 'EndUserName', String)
      authorizing_user_name = XmlUtilities.from_element(root,
                                                        'AuthorizingUserName',
                                                        String)
      customer_code = XmlUtilities.from_element(root, 'CustomerCode', String)
      end_user_pin = XmlUtilities.from_element(root, 'EndUserPIN', String)
      end_user_password = XmlUtilities.from_element(root, 'EndUserPassword',
                                                    String)
      address_line_one = XmlUtilities.from_element(root, 'AddressLine1', String)
      city = XmlUtilities.from_element(root, 'City', String)
      state = XmlUtilities.from_element(root, 'State', String)
      zip_code = XmlUtilities.from_element(root, 'ZIPCode', String)
      type_of_service = XmlUtilities.from_element(root, 'TypeOfService', String)
      csr_errors = XmlUtilities.from_element_to_array(
        root, 'Error', CsrError, wrapping_element_name: 'Errors'
      )

      new(payload,
          order_id,
          status,
          customer_order_id,
          last_modified_by,
          order_create_date,
          account_id,
          last_modified_date,
          account_number,
          account_telephone_number,
          end_user_name,
          authorizing_user_name,
          customer_code,
          end_user_pin,
          end_user_password,
          address_line_one,
          city,
          state,
          zip_code,
          type_of_service,
          csr_errors)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'CsrData', payload)
      XmlUtilities.add_as_subelement(doc, root, 'OrderId', order_id)
      XmlUtilities.add_as_subelement(doc, root, 'Status', status)
      XmlUtilities.add_as_subelement(doc, root, 'CustomerOrderId',
                                     customer_order_id)
      XmlUtilities.add_as_subelement(doc, root, 'LastModifiedBy',
                                     last_modified_by)
      XmlUtilities.add_as_subelement(doc, root, 'OrderCreateDate',
                                     order_create_date)
      XmlUtilities.add_as_subelement(doc, root, 'AccountId', account_id)
      XmlUtilities.add_as_subelement(doc, root, 'LastModifiedDate',
                                     last_modified_date)
      XmlUtilities.add_as_subelement(doc, root, 'AccountNumber', account_number)
      XmlUtilities.add_as_subelement(doc, root, 'AccountTelephoneNumber',
                                     account_telephone_number)
      XmlUtilities.add_as_subelement(doc, root, 'EndUserName', end_user_name)
      XmlUtilities.add_as_subelement(doc, root, 'AuthorizingUserName',
                                     authorizing_user_name)
      XmlUtilities.add_as_subelement(doc, root, 'CustomerCode', customer_code)
      XmlUtilities.add_as_subelement(doc, root, 'EndUserPIN', end_user_pin)
      XmlUtilities.add_as_subelement(doc, root, 'EndUserPassword',
                                     end_user_password)
      XmlUtilities.add_as_subelement(doc, root, 'AddressLine1',
                                     address_line_one)
      XmlUtilities.add_as_subelement(doc, root, 'City', city)
      XmlUtilities.add_as_subelement(doc, root, 'State', state)
      XmlUtilities.add_as_subelement(doc, root, 'ZIPCode', zip_code)
      XmlUtilities.add_as_subelement(doc, root, 'TypeOfService',
                                     type_of_service)
      XmlUtilities.add_array_as_subelement(doc, root, 'Error', csr_errors,
                                           wrapping_element_name: 'Errors')

      root
    end
  end
end
