# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module Bandwidth
  # TerminationAttribute Model.
  class TerminationAttribute < BaseModel
    # TODO: Write general description for this method
    # @return [Long]
    attr_accessor :id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :type

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :value

    # TODO: Write general description for this method
    # @return [Long]
    attr_accessor :profile_id

    # TODO: Write general description for this method
    # @return [DateTime]
    attr_accessor :effective_date

    # TODO: Write general description for this method
    # @return [DateTime]
    attr_accessor :in_effective_date

    # TODO: Write general description for this method
    # @return [Long]
    attr_accessor :external_id

    # TODO: Write general description for this method
    # @return [Long]
    attr_accessor :product_id

    # TODO: Write general description for this method
    # @return [Long]
    attr_accessor :product_attribute_id

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :is_template

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['type'] = 'type'
      @_hash['value'] = 'value'
      @_hash['profile_id'] = 'profileId'
      @_hash['effective_date'] = 'effectiveDate'
      @_hash['in_effective_date'] = 'inEffectiveDate'
      @_hash['external_id'] = 'externalId'
      @_hash['product_id'] = 'productId'
      @_hash['product_attribute_id'] = 'productAttributeId'
      @_hash['is_template'] = 'isTemplate'
      @_hash
    end

    def initialize(id = nil,
                   type = nil,
                   value = nil,
                   profile_id = nil,
                   effective_date = nil,
                   in_effective_date = nil,
                   external_id = nil,
                   product_id = nil,
                   product_attribute_id = nil,
                   is_template = nil)
      @id = id
      @type = type
      @value = value
      @profile_id = profile_id
      @effective_date = effective_date
      @in_effective_date = in_effective_date
      @external_id = external_id
      @product_id = product_id
      @product_attribute_id = product_attribute_id
      @is_template = is_template
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash['id']
      type = hash['type']
      value = hash['value']
      profile_id = hash['profileId']
      effective_date = APIHelper.rfc3339(hash['effectiveDate']) if
        hash['effectiveDate']
      in_effective_date = APIHelper.rfc3339(hash['inEffectiveDate']) if
        hash['inEffectiveDate']
      external_id = hash['externalId']
      product_id = hash['productId']
      product_attribute_id = hash['productAttributeId']
      is_template = hash['isTemplate']

      # Create object from extracted values.
      TerminationAttribute.new(id,
                               type,
                               value,
                               profile_id,
                               effective_date,
                               in_effective_date,
                               external_id,
                               product_id,
                               product_attribute_id,
                               is_template)
    end

    def self.from_element(root)
      id = XmlUtilities.from_element(root, 'id', Integer)
      type = XmlUtilities.from_element(root, 'type', String)
      value = XmlUtilities.from_element(root, 'value', String)
      profile_id = XmlUtilities.from_element(root, 'profileId', Integer)
      effective_date = XmlUtilities.from_element(root, 'effectiveDate', String,
                                                 datetime_format: 'rfc3339')
      in_effective_date = XmlUtilities.from_element(root, 'inEffectiveDate',
                                                    String,
                                                    datetime_format: 'rfc3339')
      external_id = XmlUtilities.from_element(root, 'externalId', Integer)
      product_id = XmlUtilities.from_element(root, 'productId', Integer)
      product_attribute_id = XmlUtilities.from_element(root,
                                                       'productAttributeId',
                                                       Integer)
      is_template = XmlUtilities.from_element(root, 'isTemplate', TrueClass)

      new(id,
          type,
          value,
          profile_id,
          effective_date,
          in_effective_date,
          external_id,
          product_id,
          product_attribute_id,
          is_template)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'id', id)
      XmlUtilities.add_as_subelement(doc, root, 'type', type)
      XmlUtilities.add_as_subelement(doc, root, 'value', value)
      XmlUtilities.add_as_subelement(doc, root, 'profileId', profile_id)
      XmlUtilities.add_as_subelement(doc, root, 'effectiveDate', effective_date,
                                     datetime_format: 'rfc3339')
      XmlUtilities.add_as_subelement(doc, root, 'inEffectiveDate',
                                     in_effective_date,
                                     datetime_format: 'rfc3339')
      XmlUtilities.add_as_subelement(doc, root, 'externalId', external_id)
      XmlUtilities.add_as_subelement(doc, root, 'productId', product_id)
      XmlUtilities.add_as_subelement(doc, root, 'productAttributeId',
                                     product_attribute_id)
      XmlUtilities.add_as_subelement(doc, root, 'isTemplate', is_template)

      root
    end
  end
end
