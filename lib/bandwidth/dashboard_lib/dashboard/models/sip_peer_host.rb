# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # SipPeerHost Model.
  class SipPeerHost < BaseModel
    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :sip_peer_id

    # TODO: Write general description for this method
    # @return [Hosts]
    attr_accessor :sms_hosts

    # TODO: Write general description for this method
    # @return [Hosts]
    attr_accessor :voice_hosts

    # TODO: Write general description for this method
    # @return [Hosts]
    attr_accessor :termination_hosts

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['sip_peer_id'] = 'sipPeerId'
      @_hash['sms_hosts'] = 'smsHosts'
      @_hash['voice_hosts'] = 'voiceHosts'
      @_hash['termination_hosts'] = 'terminationHosts'
      @_hash
    end

    def initialize(sip_peer_id = nil,
                   sms_hosts = nil,
                   voice_hosts = nil,
                   termination_hosts = nil)
      @sip_peer_id = sip_peer_id
      @sms_hosts = sms_hosts
      @voice_hosts = voice_hosts
      @termination_hosts = termination_hosts
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      sip_peer_id = hash['sipPeerId']
      sms_hosts = Hosts.from_hash(hash['smsHosts']) if hash['smsHosts']
      voice_hosts = Hosts.from_hash(hash['voiceHosts']) if hash['voiceHosts']
      termination_hosts = Hosts.from_hash(hash['terminationHosts']) if
        hash['terminationHosts']

      # Create object from extracted values.
      SipPeerHost.new(sip_peer_id,
                      sms_hosts,
                      voice_hosts,
                      termination_hosts)
    end

    def self.from_element(root)
      sip_peer_id = XmlUtilities.from_element(root, 'SipPeerId', Integer)
      sms_hosts = XmlUtilities.from_element(root, 'SmsHosts', Hosts)
      voice_hosts = XmlUtilities.from_element(root, 'VoiceHosts', Hosts)
      termination_hosts = XmlUtilities.from_element(root, 'TerminationHosts',
                                                    Hosts)

      new(sip_peer_id,
          sms_hosts,
          voice_hosts,
          termination_hosts)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'SipPeerId', sip_peer_id)
      XmlUtilities.add_as_subelement(doc, root, 'SmsHosts', sms_hosts)
      XmlUtilities.add_as_subelement(doc, root, 'VoiceHosts', voice_hosts)
      XmlUtilities.add_as_subelement(doc, root, 'TerminationHosts',
                                     termination_hosts)

      root
    end
  end
end
