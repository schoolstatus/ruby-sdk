# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # BulkPortinPatch Model.
  class BulkPortinPatch < BaseModel
    # TODO: Write general description for this method
    # @return [StringPatch]
    attr_accessor :customer_order_id

    # TODO: Write general description for this method
    # @return [DatePatch]
    attr_accessor :requested_foc_date

    # TODO: Write general description for this method
    # @return [StringPatch]
    attr_accessor :alternate_spid

    # TODO: Write general description for this method
    # @return [StringPatch]
    attr_accessor :billing_telephone_number

    # TODO: Write general description for this method
    # @return [SubscriberPatch]
    attr_accessor :subscriber

    # TODO: Write general description for this method
    # @return [StringPatch]
    attr_accessor :loa_authorizing_person

    # TODO: Write general description for this method
    # @return [StringPatch]
    attr_accessor :account_number

    # TODO: Write general description for this method
    # @return [StringPatch]
    attr_accessor :pin_number

    # TODO: Write general description for this method
    # @return [IntPatch]
    attr_accessor :site_id

    # TODO: Write general description for this method
    # @return [IntPatch]
    attr_accessor :peer_id

    # TODO: Write general description for this method
    # @return [ProcessingStatusPatch]
    attr_accessor :processing_status

    # TODO: Write general description for this method
    # @return [TnAttributesPatch]
    attr_accessor :tn_attributes

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['customer_order_id'] = 'customerOrderId'
      @_hash['requested_foc_date'] = 'requestedFocDate'
      @_hash['alternate_spid'] = 'alternateSpid'
      @_hash['billing_telephone_number'] = 'billingTelephoneNumber'
      @_hash['subscriber'] = 'subscriber'
      @_hash['loa_authorizing_person'] = 'loaAuthorizingPerson'
      @_hash['account_number'] = 'accountNumber'
      @_hash['pin_number'] = 'pinNumber'
      @_hash['site_id'] = 'siteId'
      @_hash['peer_id'] = 'peerId'
      @_hash['processing_status'] = 'processingStatus'
      @_hash['tn_attributes'] = 'tnAttributes'
      @_hash
    end

    def initialize(customer_order_id = nil,
                   requested_foc_date = nil,
                   alternate_spid = nil,
                   billing_telephone_number = nil,
                   subscriber = nil,
                   loa_authorizing_person = nil,
                   account_number = nil,
                   pin_number = nil,
                   site_id = nil,
                   peer_id = nil,
                   processing_status = nil,
                   tn_attributes = nil)
      @customer_order_id = customer_order_id
      @requested_foc_date = requested_foc_date
      @alternate_spid = alternate_spid
      @billing_telephone_number = billing_telephone_number
      @subscriber = subscriber
      @loa_authorizing_person = loa_authorizing_person
      @account_number = account_number
      @pin_number = pin_number
      @site_id = site_id
      @peer_id = peer_id
      @processing_status = processing_status
      @tn_attributes = tn_attributes
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      customer_order_id = StringPatch.from_hash(hash['customerOrderId']) if
        hash['customerOrderId']
      requested_foc_date = DatePatch.from_hash(hash['requestedFocDate']) if
        hash['requestedFocDate']
      alternate_spid = StringPatch.from_hash(hash['alternateSpid']) if
        hash['alternateSpid']
      if hash['billingTelephoneNumber']
        billing_telephone_number = StringPatch.from_hash(hash['billingTelephoneNumber'])
      end
      subscriber = SubscriberPatch.from_hash(hash['subscriber']) if
        hash['subscriber']
      if hash['loaAuthorizingPerson']
        loa_authorizing_person = StringPatch.from_hash(hash['loaAuthorizingPerson'])
      end
      account_number = StringPatch.from_hash(hash['accountNumber']) if
        hash['accountNumber']
      pin_number = StringPatch.from_hash(hash['pinNumber']) if
        hash['pinNumber']
      site_id = IntPatch.from_hash(hash['siteId']) if hash['siteId']
      peer_id = IntPatch.from_hash(hash['peerId']) if hash['peerId']
      if hash['processingStatus']
        processing_status = ProcessingStatusPatch.from_hash(hash['processingStatus'])
      end
      tn_attributes = TnAttributesPatch.from_hash(hash['tnAttributes']) if
        hash['tnAttributes']

      # Create object from extracted values.
      BulkPortinPatch.new(customer_order_id,
                          requested_foc_date,
                          alternate_spid,
                          billing_telephone_number,
                          subscriber,
                          loa_authorizing_person,
                          account_number,
                          pin_number,
                          site_id,
                          peer_id,
                          processing_status,
                          tn_attributes)
    end

    def self.from_element(root)
      customer_order_id = XmlUtilities.from_element(root, 'CustomerOrderId',
                                                    StringPatch)
      requested_foc_date = XmlUtilities.from_element(root, 'RequestedFocDate',
                                                     DatePatch)
      alternate_spid = XmlUtilities.from_element(root, 'AlternateSpid',
                                                 StringPatch)
      billing_telephone_number = XmlUtilities.from_element(
        root, 'BillingTelephoneNumber', StringPatch
      )
      subscriber = XmlUtilities.from_element(root, 'Subscriber',
                                             SubscriberPatch)
      loa_authorizing_person = XmlUtilities.from_element(root,
                                                         'LoaAuthorizingPerson',
                                                         StringPatch)
      account_number = XmlUtilities.from_element(root, 'AccountNumber',
                                                 StringPatch)
      pin_number = XmlUtilities.from_element(root, 'PinNumber', StringPatch)
      site_id = XmlUtilities.from_element(root, 'SiteId', IntPatch)
      peer_id = XmlUtilities.from_element(root, 'PeerId', IntPatch)
      processing_status = XmlUtilities.from_element(root, 'ProcessingStatus',
                                                    ProcessingStatusPatch)
      tn_attributes = XmlUtilities.from_element(root, 'TnAttributes',
                                                TnAttributesPatch)

      new(customer_order_id,
          requested_foc_date,
          alternate_spid,
          billing_telephone_number,
          subscriber,
          loa_authorizing_person,
          account_number,
          pin_number,
          site_id,
          peer_id,
          processing_status,
          tn_attributes)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'CustomerOrderId',
                                     customer_order_id)
      XmlUtilities.add_as_subelement(doc, root, 'RequestedFocDate',
                                     requested_foc_date)
      XmlUtilities.add_as_subelement(doc, root, 'AlternateSpid', alternate_spid)
      XmlUtilities.add_as_subelement(doc, root, 'BillingTelephoneNumber',
                                     billing_telephone_number)
      XmlUtilities.add_as_subelement(doc, root, 'Subscriber', subscriber)
      XmlUtilities.add_as_subelement(doc, root, 'LoaAuthorizingPerson',
                                     loa_authorizing_person)
      XmlUtilities.add_as_subelement(doc, root, 'AccountNumber', account_number)
      XmlUtilities.add_as_subelement(doc, root, 'PinNumber', pin_number)
      XmlUtilities.add_as_subelement(doc, root, 'SiteId', site_id)
      XmlUtilities.add_as_subelement(doc, root, 'PeerId', peer_id)
      XmlUtilities.add_as_subelement(doc, root, 'ProcessingStatus',
                                     processing_status)
      XmlUtilities.add_as_subelement(doc, root, 'TnAttributes', tn_attributes)

      root
    end
  end
end
