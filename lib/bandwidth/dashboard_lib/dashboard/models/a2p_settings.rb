# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # A2pSettings Model.
  class A2pSettings < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :message_class

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :campaign_id

    # TODO: Write general description for this method
    # @return [Action1Enum]
    attr_accessor :action

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['message_class'] = 'messageClass'
      @_hash['campaign_id'] = 'campaignId'
      @_hash['action'] = 'action'
      @_hash
    end

    def initialize(message_class = nil,
                   campaign_id = nil,
                   action = nil)
      @message_class = message_class
      @campaign_id = campaign_id
      @action = action
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      message_class = hash['messageClass']
      campaign_id = hash['campaignId']
      action = hash['action']

      # Create object from extracted values.
      A2pSettings.new(message_class,
                      campaign_id,
                      action)
    end

    def self.from_element(root)
      message_class = XmlUtilities.from_element(root, 'MessageClass', String)
      campaign_id = XmlUtilities.from_element(root, 'CampaignId', String)
      action = XmlUtilities.from_element(root, 'Action', String)

      new(message_class,
          campaign_id,
          action)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'MessageClass', message_class)
      XmlUtilities.add_as_subelement(doc, root, 'CampaignId', campaign_id)
      XmlUtilities.add_as_subelement(doc, root, 'Action', action)

      root
    end
  end
end
