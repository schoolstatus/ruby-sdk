# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # Vendor Model.
  class Vendor < BaseModel
    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :legacy_id

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :manual_port_enabled

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :tollfree_manual_port_enabled

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :is_on_net

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['name'] = 'name'
      @_hash['legacy_id'] = 'legacyId'
      @_hash['manual_port_enabled'] = 'manualPortEnabled'
      @_hash['tollfree_manual_port_enabled'] = 'tollfreeManualPortEnabled'
      @_hash['is_on_net'] = 'isOnNet'
      @_hash
    end

    def initialize(id = nil,
                   name = nil,
                   legacy_id = nil,
                   manual_port_enabled = nil,
                   tollfree_manual_port_enabled = nil,
                   is_on_net = nil)
      @id = id
      @name = name
      @legacy_id = legacy_id
      @manual_port_enabled = manual_port_enabled
      @tollfree_manual_port_enabled = tollfree_manual_port_enabled
      @is_on_net = is_on_net
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash['id']
      name = hash['name']
      legacy_id = hash['legacyId']
      manual_port_enabled = hash['manualPortEnabled']
      tollfree_manual_port_enabled = hash['tollfreeManualPortEnabled']
      is_on_net = hash['isOnNet']

      # Create object from extracted values.
      Vendor.new(id,
                 name,
                 legacy_id,
                 manual_port_enabled,
                 tollfree_manual_port_enabled,
                 is_on_net)
    end

    def self.from_element(root)
      id = XmlUtilities.from_element(root, 'VendorId', Integer)
      name = XmlUtilities.from_element(root, 'VendorName', String)
      legacy_id = XmlUtilities.from_element(root, 'LegacyId', String)
      manual_port_enabled = XmlUtilities.from_element(root, 'ManualPortEnabled',
                                                      TrueClass)
      tollfree_manual_port_enabled = XmlUtilities.from_element(
        root, 'TollfreeManualPortEnabled', TrueClass
      )
      is_on_net = XmlUtilities.from_element(root, 'OnNet', TrueClass)

      new(id,
          name,
          legacy_id,
          manual_port_enabled,
          tollfree_manual_port_enabled,
          is_on_net)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'VendorId', id)
      XmlUtilities.add_as_subelement(doc, root, 'VendorName', name)
      XmlUtilities.add_as_subelement(doc, root, 'LegacyId', legacy_id)
      XmlUtilities.add_as_subelement(doc, root, 'ManualPortEnabled',
                                     manual_port_enabled)
      XmlUtilities.add_as_subelement(doc, root, 'TollfreeManualPortEnabled',
                                     tollfree_manual_port_enabled)
      XmlUtilities.add_as_subelement(doc, root, 'OnNet', is_on_net)

      root
    end
  end
end
