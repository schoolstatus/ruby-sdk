# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # GeocodeRequestResponse Model.
  class GeocodeRequestResponse < BaseModel
    # TODO: Write general description for this method
    # @return [GeocodeRequestAddress]
    attr_accessor :payload

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :errors

    # TODO: Write general description for this method
    # @return [E911GeocodeAddress]
    attr_accessor :geocode_address

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['payload'] = 'payload'
      @_hash['errors'] = 'errors'
      @_hash['geocode_address'] = 'geocodeAddress'
      @_hash
    end

    def initialize(payload = nil,
                   errors = nil,
                   geocode_address = nil)
      @payload = payload
      @errors = errors
      @geocode_address = geocode_address
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      payload = GeocodeRequestAddress.from_hash(hash['payload']) if
        hash['payload']
      errors = hash['errors']
      geocode_address = E911GeocodeAddress.from_hash(hash['geocodeAddress']) if
        hash['geocodeAddress']

      # Create object from extracted values.
      GeocodeRequestResponse.new(payload,
                                 errors,
                                 geocode_address)
    end

    def self.from_element(root)
      payload = XmlUtilities.from_element(root, 'RequestAddress',
                                          GeocodeRequestAddress)
      errors = XmlUtilities.from_element(root, 'Errors', String)
      geocode_address = XmlUtilities.from_element(root, 'GeocodedAddress',
                                                  E911GeocodeAddress)

      new(payload,
          errors,
          geocode_address)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'RequestAddress', payload)
      XmlUtilities.add_as_subelement(doc, root, 'Errors', errors)
      XmlUtilities.add_as_subelement(doc, root, 'GeocodedAddress',
                                     geocode_address)

      root
    end
  end
end
