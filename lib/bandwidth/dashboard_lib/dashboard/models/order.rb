# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # Order Model.
  class Order < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :last_modified_by

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :customer_order_id

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :site_id

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :peer_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :order_create_date

    # TODO: Write general description for this method
    # @return [BaseOrderType]
    attr_accessor :order_type

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :partial_allowed

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :back_order_requested

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :close_order

    # TODO: Write general description for this method
    # @return [List of String]
    attr_accessor :tn_attributes

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['name'] = 'name'
      @_hash['last_modified_by'] = 'lastModifiedBy'
      @_hash['customer_order_id'] = 'customerOrderId'
      @_hash['site_id'] = 'siteId'
      @_hash['peer_id'] = 'peerId'
      @_hash['order_create_date'] = 'orderCreateDate'
      @_hash['order_type'] = 'orderType'
      @_hash['partial_allowed'] = 'partialAllowed'
      @_hash['back_order_requested'] = 'backOrderRequested'
      @_hash['close_order'] = 'closeOrder'
      @_hash['tn_attributes'] = 'tnAttributes'
      @_hash
    end

    def initialize(id = nil,
                   name = nil,
                   last_modified_by = nil,
                   customer_order_id = nil,
                   site_id = nil,
                   peer_id = nil,
                   order_create_date = nil,
                   order_type = nil,
                   partial_allowed = nil,
                   back_order_requested = nil,
                   close_order = nil,
                   tn_attributes = nil)
      @id = id
      @name = name
      @last_modified_by = last_modified_by
      @customer_order_id = customer_order_id
      @site_id = site_id
      @peer_id = peer_id
      @order_create_date = order_create_date
      @order_type = order_type
      @partial_allowed = partial_allowed
      @back_order_requested = back_order_requested
      @close_order = close_order
      @tn_attributes = tn_attributes
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash['id']
      name = hash['name']
      last_modified_by = hash['lastModifiedBy']
      customer_order_id = hash['customerOrderId']
      site_id = hash['siteId']
      peer_id = hash['peerId']
      order_create_date = hash['orderCreateDate']
      order_type = BaseOrderType.from_hash(hash['orderType']) if
        hash['orderType']
      partial_allowed = hash['partialAllowed']
      back_order_requested = hash['backOrderRequested']
      close_order = hash['closeOrder']
      tn_attributes = hash['tnAttributes']

      # Create object from extracted values.
      Order.new(id,
                name,
                last_modified_by,
                customer_order_id,
                site_id,
                peer_id,
                order_create_date,
                order_type,
                partial_allowed,
                back_order_requested,
                close_order,
                tn_attributes)
    end

    def self.from_element(root)
      id = XmlUtilities.from_element(root, 'id', String)
      name = XmlUtilities.from_element(root, 'Name', String)
      last_modified_by = XmlUtilities.from_element(root, 'LastModifiedBy',
                                                   String)
      customer_order_id = XmlUtilities.from_element(root, 'CustomerOrderId',
                                                    String)
      site_id = XmlUtilities.from_element(root, 'SiteId', Integer)
      peer_id = XmlUtilities.from_element(root, 'PeerId', Integer)
      order_create_date = XmlUtilities.from_element(root, 'OrderCreateDate',
                                                    String)
      order_type = XmlUtilities.from_element(root, 'BaseOrderType',
                                             BaseOrderType)
      partial_allowed = XmlUtilities.from_element(root, 'PartialAllowed',
                                                  TrueClass)
      back_order_requested = XmlUtilities.from_element(root,
                                                       'BackOrderRequested',
                                                       TrueClass)
      close_order = XmlUtilities.from_element(root, 'CloseOrder', TrueClass)
      tn_attributes = XmlUtilities.from_element_to_array(
        root, 'TnAttribute', String,
        wrapping_element_name: 'TnAttributes'
      )

      new(id,
          name,
          last_modified_by,
          customer_order_id,
          site_id,
          peer_id,
          order_create_date,
          order_type,
          partial_allowed,
          back_order_requested,
          close_order,
          tn_attributes)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'id', id)
      XmlUtilities.add_as_subelement(doc, root, 'Name', name)
      XmlUtilities.add_as_subelement(doc, root, 'LastModifiedBy',
                                     last_modified_by)
      XmlUtilities.add_as_subelement(doc, root, 'CustomerOrderId',
                                     customer_order_id)
      XmlUtilities.add_as_subelement(doc, root, 'SiteId', site_id)
      XmlUtilities.add_as_subelement(doc, root, 'PeerId', peer_id)
      XmlUtilities.add_as_subelement(doc, root, 'OrderCreateDate',
                                     order_create_date)
      XmlUtilities.add_as_subelement(doc, root, 'BaseOrderType', order_type)
      XmlUtilities.add_as_subelement(doc, root, 'PartialAllowed',
                                     partial_allowed)
      XmlUtilities.add_as_subelement(doc, root, 'BackOrderRequested',
                                     back_order_requested)
      XmlUtilities.add_as_subelement(doc, root, 'CloseOrder', close_order)
      XmlUtilities.add_array_as_subelement(
        doc, root, 'TnAttribute', tn_attributes,
        wrapping_element_name: 'TnAttributes'
      )

      root
    end
  end
end
