# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module Bandwidth
  # BulkPortin Model.
  class BulkPortin < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :order_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :customer_order_id

    # TODO: Write general description for this method
    # @return [DateTime]
    attr_accessor :requested_foc_date

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :alternate_spid

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :billing_telephone_number

    # TODO: Write general description for this method
    # @return [Subscriber]
    attr_accessor :subscriber

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :loa_authorizing_person

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :account_number

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :pin_number

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :site_id

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :peer_id

    # TODO: Write general description for this method
    # @return [ProcessingStatus8Enum]
    attr_accessor :processing_status

    # TODO: Write general description for this method
    # @return [List of String]
    attr_accessor :tn_attributes

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :account_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :actual_foc_date

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :created_by_user

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :last_modified_by

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :last_modified_date

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :order_create_date

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['order_id'] = 'orderId'
      @_hash['customer_order_id'] = 'customerOrderId'
      @_hash['requested_foc_date'] = 'requestedFocDate'
      @_hash['alternate_spid'] = 'alternateSpid'
      @_hash['billing_telephone_number'] = 'billingTelephoneNumber'
      @_hash['subscriber'] = 'subscriber'
      @_hash['loa_authorizing_person'] = 'loaAuthorizingPerson'
      @_hash['account_number'] = 'accountNumber'
      @_hash['pin_number'] = 'pinNumber'
      @_hash['site_id'] = 'siteId'
      @_hash['peer_id'] = 'peerId'
      @_hash['processing_status'] = 'processingStatus'
      @_hash['tn_attributes'] = 'tnAttributes'
      @_hash['account_id'] = 'accountId'
      @_hash['actual_foc_date'] = 'actualFocDate'
      @_hash['created_by_user'] = 'createdByUser'
      @_hash['last_modified_by'] = 'lastModifiedBy'
      @_hash['last_modified_date'] = 'lastModifiedDate'
      @_hash['order_create_date'] = 'orderCreateDate'
      @_hash
    end

    def initialize(order_id = nil,
                   customer_order_id = nil,
                   requested_foc_date = nil,
                   alternate_spid = nil,
                   billing_telephone_number = nil,
                   subscriber = nil,
                   loa_authorizing_person = nil,
                   account_number = nil,
                   pin_number = nil,
                   site_id = nil,
                   peer_id = nil,
                   processing_status = nil,
                   tn_attributes = nil,
                   account_id = nil,
                   actual_foc_date = nil,
                   created_by_user = nil,
                   last_modified_by = nil,
                   last_modified_date = nil,
                   order_create_date = nil)
      @order_id = order_id
      @customer_order_id = customer_order_id
      @requested_foc_date = requested_foc_date
      @alternate_spid = alternate_spid
      @billing_telephone_number = billing_telephone_number
      @subscriber = subscriber
      @loa_authorizing_person = loa_authorizing_person
      @account_number = account_number
      @pin_number = pin_number
      @site_id = site_id
      @peer_id = peer_id
      @processing_status = processing_status
      @tn_attributes = tn_attributes
      @account_id = account_id
      @actual_foc_date = actual_foc_date
      @created_by_user = created_by_user
      @last_modified_by = last_modified_by
      @last_modified_date = last_modified_date
      @order_create_date = order_create_date
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      order_id = hash['orderId']
      customer_order_id = hash['customerOrderId']
      requested_foc_date = APIHelper.rfc3339(hash['requestedFocDate']) if
        hash['requestedFocDate']
      alternate_spid = hash['alternateSpid']
      billing_telephone_number = hash['billingTelephoneNumber']
      subscriber = Subscriber.from_hash(hash['subscriber']) if
        hash['subscriber']
      loa_authorizing_person = hash['loaAuthorizingPerson']
      account_number = hash['accountNumber']
      pin_number = hash['pinNumber']
      site_id = hash['siteId']
      peer_id = hash['peerId']
      processing_status = hash['processingStatus']
      tn_attributes = hash['tnAttributes']
      account_id = hash['accountId']
      actual_foc_date = hash['actualFocDate']
      created_by_user = hash['createdByUser']
      last_modified_by = hash['lastModifiedBy']
      last_modified_date = hash['lastModifiedDate']
      order_create_date = hash['orderCreateDate']

      # Create object from extracted values.
      BulkPortin.new(order_id,
                     customer_order_id,
                     requested_foc_date,
                     alternate_spid,
                     billing_telephone_number,
                     subscriber,
                     loa_authorizing_person,
                     account_number,
                     pin_number,
                     site_id,
                     peer_id,
                     processing_status,
                     tn_attributes,
                     account_id,
                     actual_foc_date,
                     created_by_user,
                     last_modified_by,
                     last_modified_date,
                     order_create_date)
    end

    def self.from_element(root)
      order_id = XmlUtilities.from_element(root, 'OrderId', String)
      customer_order_id = XmlUtilities.from_element(root, 'CustomerOrderId',
                                                    String)
      requested_foc_date = XmlUtilities.from_element(root, 'RequestedFocDate',
                                                     String,
                                                     datetime_format: 'rfc3339')
      alternate_spid = XmlUtilities.from_element(root, 'AlternateSpid', String)
      billing_telephone_number = XmlUtilities.from_element(
        root, 'BillingTelephoneNumber', String
      )
      subscriber = XmlUtilities.from_element(root, 'Subscriber', Subscriber)
      loa_authorizing_person = XmlUtilities.from_element(root,
                                                         'LoaAuthorizingPerson',
                                                         String)
      account_number = XmlUtilities.from_element(root, 'AccountNumber', String)
      pin_number = XmlUtilities.from_element(root, 'PinNumber', String)
      site_id = XmlUtilities.from_element(root, 'SiteId', Integer)
      peer_id = XmlUtilities.from_element(root, 'PeerId', Integer)
      processing_status = XmlUtilities.from_element(root, 'ProcessingStatus',
                                                    String)
      tn_attributes = XmlUtilities.from_element_to_array(
        root, 'TnAttribute', String,
        wrapping_element_name: 'TnAttributes'
      )
      account_id = XmlUtilities.from_element(root, 'AccountId', Integer)
      actual_foc_date = XmlUtilities.from_element(root, 'ActualFocDate', String)
      created_by_user = XmlUtilities.from_element(root, 'CreatedByUser', String)
      last_modified_by = XmlUtilities.from_element(root, 'LastModifiedBy',
                                                   String)
      last_modified_date = XmlUtilities.from_element(root, 'LastModifiedDate',
                                                     String)
      order_create_date = XmlUtilities.from_element(root, 'OrderCreateDate',
                                                    String)

      new(order_id,
          customer_order_id,
          requested_foc_date,
          alternate_spid,
          billing_telephone_number,
          subscriber,
          loa_authorizing_person,
          account_number,
          pin_number,
          site_id,
          peer_id,
          processing_status,
          tn_attributes,
          account_id,
          actual_foc_date,
          created_by_user,
          last_modified_by,
          last_modified_date,
          order_create_date)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'OrderId', order_id)
      XmlUtilities.add_as_subelement(doc, root, 'CustomerOrderId',
                                     customer_order_id)
      XmlUtilities.add_as_subelement(doc, root, 'RequestedFocDate',
                                     requested_foc_date,
                                     datetime_format: 'rfc3339')
      XmlUtilities.add_as_subelement(doc, root, 'AlternateSpid', alternate_spid)
      XmlUtilities.add_as_subelement(doc, root, 'BillingTelephoneNumber',
                                     billing_telephone_number)
      XmlUtilities.add_as_subelement(doc, root, 'Subscriber', subscriber)
      XmlUtilities.add_as_subelement(doc, root, 'LoaAuthorizingPerson',
                                     loa_authorizing_person)
      XmlUtilities.add_as_subelement(doc, root, 'AccountNumber', account_number)
      XmlUtilities.add_as_subelement(doc, root, 'PinNumber', pin_number)
      XmlUtilities.add_as_subelement(doc, root, 'SiteId', site_id)
      XmlUtilities.add_as_subelement(doc, root, 'PeerId', peer_id)
      XmlUtilities.add_as_subelement(doc, root, 'ProcessingStatus',
                                     processing_status)
      XmlUtilities.add_array_as_subelement(
        doc, root, 'TnAttribute', tn_attributes,
        wrapping_element_name: 'TnAttributes'
      )
      XmlUtilities.add_as_subelement(doc, root, 'AccountId', account_id)
      XmlUtilities.add_as_subelement(doc, root, 'ActualFocDate',
                                     actual_foc_date)
      XmlUtilities.add_as_subelement(doc, root, 'CreatedByUser',
                                     created_by_user)
      XmlUtilities.add_as_subelement(doc, root, 'LastModifiedBy',
                                     last_modified_by)
      XmlUtilities.add_as_subelement(doc, root, 'LastModifiedDate',
                                     last_modified_date)
      XmlUtilities.add_as_subelement(doc, root, 'OrderCreateDate',
                                     order_create_date)

      root
    end
  end
end
