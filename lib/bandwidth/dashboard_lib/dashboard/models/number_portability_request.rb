# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # NumberPortabilityRequest Model.
  class NumberPortabilityRequest < BaseModel
    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :account_id

    # TODO: Write general description for this method
    # @return [CheckingModeEnum]
    attr_accessor :checking_mode

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :typed_order_id_to_ignore_check

    # TODO: Write general description for this method
    # @return [List of String]
    attr_accessor :telephone_numbers

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['account_id'] = 'accountId'
      @_hash['checking_mode'] = 'checkingMode'
      @_hash['typed_order_id_to_ignore_check'] = 'typedOrderIdToIgnoreCheck'
      @_hash['telephone_numbers'] = 'telephoneNumbers'
      @_hash
    end

    def initialize(account_id = nil,
                   checking_mode = nil,
                   typed_order_id_to_ignore_check = nil,
                   telephone_numbers = nil)
      @account_id = account_id
      @checking_mode = checking_mode
      @typed_order_id_to_ignore_check = typed_order_id_to_ignore_check
      @telephone_numbers = telephone_numbers
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      account_id = hash['accountId']
      checking_mode = hash['checkingMode']
      typed_order_id_to_ignore_check = hash['typedOrderIdToIgnoreCheck']
      telephone_numbers = hash['telephoneNumbers']

      # Create object from extracted values.
      NumberPortabilityRequest.new(account_id,
                                   checking_mode,
                                   typed_order_id_to_ignore_check,
                                   telephone_numbers)
    end

    def self.from_element(root)
      account_id = XmlUtilities.from_element(root, 'accountId', Integer)
      checking_mode = XmlUtilities.from_element(root, 'checkingMode', String)
      typed_order_id_to_ignore_check = XmlUtilities.from_element(
        root, 'typedOrderIdToIgnoreCheck', Integer
      )
      telephone_numbers = XmlUtilities.from_element_to_array(
        root, 'Tn', String, wrapping_element_name: 'TnList'
      )

      new(account_id,
          checking_mode,
          typed_order_id_to_ignore_check,
          telephone_numbers)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'accountId', account_id)
      XmlUtilities.add_as_subelement(doc, root, 'checkingMode', checking_mode)
      XmlUtilities.add_as_subelement(doc, root, 'typedOrderIdToIgnoreCheck',
                                     typed_order_id_to_ignore_check)
      XmlUtilities.add_array_as_subelement(doc, root, 'Tn', telephone_numbers,
                                           wrapping_element_name: 'TnList')

      root
    end
  end
end
