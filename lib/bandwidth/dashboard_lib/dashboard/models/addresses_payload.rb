# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # AddressesPayload Model.
  class AddressesPayload < BaseModel
    # TODO: Write general description for this method
    # @return [List of E911Address]
    attr_accessor :addresses

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :total_count

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['addresses'] = 'addresses'
      @_hash['total_count'] = 'totalCount'
      @_hash
    end

    def initialize(addresses = nil,
                   total_count = nil)
      @addresses = addresses
      @total_count = total_count
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      # Parameter is an array, so we need to iterate through it
      addresses = nil
      unless hash['addresses'].nil?
        addresses = []
        hash['addresses'].each do |structure|
          addresses << (E911Address.from_hash(structure) if structure)
        end
      end
      total_count = hash['totalCount']

      # Create object from extracted values.
      AddressesPayload.new(addresses,
                           total_count)
    end

    def self.from_element(root)
      addresses = XmlUtilities.from_element_to_array(root, 'Address',
                                                     E911Address)
      total_count = XmlUtilities.from_element(root, 'TotalCount', Integer)

      new(addresses,
          total_count)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_array_as_subelement(doc, root, 'Address', addresses)
      XmlUtilities.add_as_subelement(doc, root, 'TotalCount', total_count)

      root
    end
  end
end
