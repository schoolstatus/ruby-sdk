# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # AccountSmsFeatureSettings Model.
  class AccountSmsFeatureSettings < BaseModel
    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :zone1

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :zone2

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :zone3

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :zone4

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :zone5

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :smpp_enabled

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :default_provider

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['zone1'] = 'zone1'
      @_hash['zone2'] = 'zone2'
      @_hash['zone3'] = 'zone3'
      @_hash['zone4'] = 'zone4'
      @_hash['zone5'] = 'zone5'
      @_hash['smpp_enabled'] = 'smppEnabled'
      @_hash['default_provider'] = 'defaultProvider'
      @_hash
    end

    def initialize(zone1 = nil,
                   zone2 = nil,
                   zone3 = nil,
                   zone4 = nil,
                   zone5 = nil,
                   smpp_enabled = nil,
                   default_provider = nil)
      @zone1 = zone1
      @zone2 = zone2
      @zone3 = zone3
      @zone4 = zone4
      @zone5 = zone5
      @smpp_enabled = smpp_enabled
      @default_provider = default_provider
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      zone1 = hash['zone1']
      zone2 = hash['zone2']
      zone3 = hash['zone3']
      zone4 = hash['zone4']
      zone5 = hash['zone5']
      smpp_enabled = hash['smppEnabled']
      default_provider = hash['defaultProvider']

      # Create object from extracted values.
      AccountSmsFeatureSettings.new(zone1,
                                    zone2,
                                    zone3,
                                    zone4,
                                    zone5,
                                    smpp_enabled,
                                    default_provider)
    end

    def self.from_element(root)
      zone1 = XmlUtilities.from_element(root, 'Zone1', TrueClass)
      zone2 = XmlUtilities.from_element(root, 'Zone2', TrueClass)
      zone3 = XmlUtilities.from_element(root, 'Zone3', TrueClass)
      zone4 = XmlUtilities.from_element(root, 'Zone4', TrueClass)
      zone5 = XmlUtilities.from_element(root, 'Zone5', TrueClass)
      smpp_enabled = XmlUtilities.from_element(root, 'SmppEnabled', TrueClass)
      default_provider = XmlUtilities.from_element(root, 'DefaultProvider',
                                                   Integer)

      new(zone1,
          zone2,
          zone3,
          zone4,
          zone5,
          smpp_enabled,
          default_provider)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'Zone1', zone1)
      XmlUtilities.add_as_subelement(doc, root, 'Zone2', zone2)
      XmlUtilities.add_as_subelement(doc, root, 'Zone3', zone3)
      XmlUtilities.add_as_subelement(doc, root, 'Zone4', zone4)
      XmlUtilities.add_as_subelement(doc, root, 'Zone5', zone5)
      XmlUtilities.add_as_subelement(doc, root, 'SmppEnabled', smpp_enabled)
      XmlUtilities.add_as_subelement(doc, root, 'DefaultProvider',
                                     default_provider)

      root
    end
  end
end
