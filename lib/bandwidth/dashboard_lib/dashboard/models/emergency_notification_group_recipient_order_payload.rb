# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # EmergencyNotificationGroupRecipientOrderPayload Model.
  class EmergencyNotificationGroupRecipientOrderPayload < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :order_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :order_created_date

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :created_by

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :processing_status

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :customer_order_id

    # TODO: Write general description for this method
    # @return [EmergencyNotificationGroupOrderPayload]
    attr_accessor :added_emergency_notification_group

    # TODO: Write general description for this method
    # @return [EmergencyNotificationGroupOrderPayload]
    attr_accessor :modified_emergency_notification_group

    # TODO: Write general description for this method
    # @return [EmergencyNotificationGroupOrderPayload]
    attr_accessor :delete_emergency_notification_group

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['order_id'] = 'orderId'
      @_hash['order_created_date'] = 'orderCreatedDate'
      @_hash['created_by'] = 'createdBy'
      @_hash['processing_status'] = 'processingStatus'
      @_hash['customer_order_id'] = 'customerOrderId'
      @_hash['added_emergency_notification_group'] =
        'addedEmergencyNotificationGroup'
      @_hash['modified_emergency_notification_group'] =
        'modifiedEmergencyNotificationGroup'
      @_hash['delete_emergency_notification_group'] =
        'deleteEmergencyNotificationGroup'
      @_hash
    end

    def initialize(order_id = nil,
                   order_created_date = nil,
                   created_by = nil,
                   processing_status = nil,
                   customer_order_id = nil,
                   added_emergency_notification_group = nil,
                   modified_emergency_notification_group = nil,
                   delete_emergency_notification_group = nil)
      @order_id = order_id
      @order_created_date = order_created_date
      @created_by = created_by
      @processing_status = processing_status
      @customer_order_id = customer_order_id
      @added_emergency_notification_group = added_emergency_notification_group
      @modified_emergency_notification_group =
        modified_emergency_notification_group
      @delete_emergency_notification_group =
        delete_emergency_notification_group
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      order_id = hash['orderId']
      order_created_date = hash['orderCreatedDate']
      created_by = hash['createdBy']
      processing_status = hash['processingStatus']
      customer_order_id = hash['customerOrderId']
      if hash['addedEmergencyNotificationGroup']
        added_emergency_notification_group = EmergencyNotificationGroupOrderPayload.from_hash(hash['addedEmergencyNotificationGroup'])
      end
      if hash['modifiedEmergencyNotificationGroup']
        modified_emergency_notification_group = EmergencyNotificationGroupOrderPayload.from_hash(hash['modifiedEmergencyNotificationGroup'])
      end
      if hash['deleteEmergencyNotificationGroup']
        delete_emergency_notification_group = EmergencyNotificationGroupOrderPayload.from_hash(hash['deleteEmergencyNotificationGroup'])
      end

      # Create object from extracted values.
      EmergencyNotificationGroupRecipientOrderPayload.new(order_id,
                                                          order_created_date,
                                                          created_by,
                                                          processing_status,
                                                          customer_order_id,
                                                          added_emergency_notification_group,
                                                          modified_emergency_notification_group,
                                                          delete_emergency_notification_group)
    end

    def self.from_element(root)
      order_id = XmlUtilities.from_element(root, 'OrderId', String)
      order_created_date = XmlUtilities.from_element(root, 'OrderCreatedDate',
                                                     String)
      created_by = XmlUtilities.from_element(root, 'CreatedBy', String)
      processing_status = XmlUtilities.from_element(root, 'ProcessingStatus',
                                                    String)
      customer_order_id = XmlUtilities.from_element(root, 'CustomerOrderId',
                                                    String)
      added_emergency_notification_group = XmlUtilities.from_element(
        root, 'AddedEmergencyNotificationGroup',
        EmergencyNotificationGroupOrderPayload
      )
      modified_emergency_notification_group = XmlUtilities.from_element(
        root, 'ModifiedEmergencyNotificationGroup',
        EmergencyNotificationGroupOrderPayload
      )
      delete_emergency_notification_group = XmlUtilities.from_element(
        root, 'DeletedEmergencyNotificationGroup',
        EmergencyNotificationGroupOrderPayload
      )

      new(order_id,
          order_created_date,
          created_by,
          processing_status,
          customer_order_id,
          added_emergency_notification_group,
          modified_emergency_notification_group,
          delete_emergency_notification_group)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'OrderId', order_id)
      XmlUtilities.add_as_subelement(doc, root, 'OrderCreatedDate',
                                     order_created_date)
      XmlUtilities.add_as_subelement(doc, root, 'CreatedBy', created_by)
      XmlUtilities.add_as_subelement(doc, root, 'ProcessingStatus',
                                     processing_status)
      XmlUtilities.add_as_subelement(doc, root, 'CustomerOrderId',
                                     customer_order_id)
      XmlUtilities.add_as_subelement(doc, root,
                                     'AddedEmergencyNotificationGroup',
                                     added_emergency_notification_group)
      XmlUtilities.add_as_subelement(doc, root,
                                     'ModifiedEmergencyNotificationGroup',
                                     modified_emergency_notification_group)
      XmlUtilities.add_as_subelement(doc, root,
                                     'DeletedEmergencyNotificationGroup',
                                     delete_emergency_notification_group)

      root
    end
  end
end
