# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # CoveredRateCenter Model.
  class CoveredRateCenter < BaseModel
    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :abbreviation

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :state

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :lata

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :available_number_count

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :limited_available_number_count

    # TODO: Write general description for this method
    # @return [List of String]
    attr_accessor :zip_codes

    # TODO: Write general description for this method
    # @return [List of String]
    attr_accessor :cities

    # TODO: Write general description for this method
    # @return [List of String]
    attr_accessor :vendors

    # TODO: Write general description for this method
    # @return [List of String]
    attr_accessor :tiers

    # TODO: Write general description for this method
    # @return [List of String]
    attr_accessor :npa_nxx_xs

    # TODO: Write general description for this method
    # @return [List of String]
    attr_accessor :npas

    # TODO: Write general description for this method
    # @return [List of Integer]
    attr_accessor :local_rate_center_ids

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['name'] = 'name'
      @_hash['abbreviation'] = 'abbreviation'
      @_hash['state'] = 'state'
      @_hash['lata'] = 'lata'
      @_hash['available_number_count'] = 'availableNumberCount'
      @_hash['limited_available_number_count'] = 'limitedAvailableNumberCount'
      @_hash['zip_codes'] = 'ZipCodes'
      @_hash['cities'] = 'Cities'
      @_hash['vendors'] = 'Vendors'
      @_hash['tiers'] = 'Tiers'
      @_hash['npa_nxx_xs'] = 'NpaNxxXs'
      @_hash['npas'] = 'Npas'
      @_hash['local_rate_center_ids'] = 'LocalRateCenterIds'
      @_hash
    end

    def initialize(id = nil,
                   name = nil,
                   abbreviation = nil,
                   state = nil,
                   lata = nil,
                   available_number_count = nil,
                   limited_available_number_count = nil,
                   zip_codes = nil,
                   cities = nil,
                   vendors = nil,
                   tiers = nil,
                   npa_nxx_xs = nil,
                   npas = nil,
                   local_rate_center_ids = nil)
      @id = id
      @name = name
      @abbreviation = abbreviation
      @state = state
      @lata = lata
      @available_number_count = available_number_count
      @limited_available_number_count = limited_available_number_count
      @zip_codes = zip_codes
      @cities = cities
      @vendors = vendors
      @tiers = tiers
      @npa_nxx_xs = npa_nxx_xs
      @npas = npas
      @local_rate_center_ids = local_rate_center_ids
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash['id']
      name = hash['name']
      abbreviation = hash['abbreviation']
      state = hash['state']
      lata = hash['lata']
      available_number_count = hash['availableNumberCount']
      limited_available_number_count = hash['limitedAvailableNumberCount']
      zip_codes = hash['ZipCodes']
      cities = hash['Cities']
      vendors = hash['Vendors']
      tiers = hash['Tiers']
      npa_nxx_xs = hash['NpaNxxXs']
      npas = hash['Npas']
      local_rate_center_ids = hash['LocalRateCenterIds']

      # Create object from extracted values.
      CoveredRateCenter.new(id,
                            name,
                            abbreviation,
                            state,
                            lata,
                            available_number_count,
                            limited_available_number_count,
                            zip_codes,
                            cities,
                            vendors,
                            tiers,
                            npa_nxx_xs,
                            npas,
                            local_rate_center_ids)
    end

    def self.from_element(root)
      id = XmlUtilities.from_element(root, 'Id', Integer)
      name = XmlUtilities.from_element(root, 'Name', String)
      abbreviation = XmlUtilities.from_element(root, 'Abbreviation', String)
      state = XmlUtilities.from_element(root, 'State', String)
      lata = XmlUtilities.from_element(root, 'Lata', Integer)
      available_number_count = XmlUtilities.from_element(root,
                                                         'AvailableNumberCount',
                                                         Integer)
      limited_available_number_count = XmlUtilities.from_element(
        root, 'LimitedAvailableNumberCount', Integer
      )
      zip_codes = XmlUtilities.from_element_to_array(
        root, 'ZipCode', String, wrapping_element_name: 'ZipCodes'
      )
      cities = XmlUtilities.from_element_to_array(
        root, 'City', String, wrapping_element_name: 'Cities'
      )
      vendors = XmlUtilities.from_element_to_array(
        root, 'Vendor', String, wrapping_element_name: 'Vendors'
      )
      tiers = XmlUtilities.from_element_to_array(root, 'Tier', String,
                                                 wrapping_element_name: 'Tiers')
      npa_nxx_xs = XmlUtilities.from_element_to_array(
        root, 'NpaNxxX', String, wrapping_element_name: 'NpaNxxXs'
      )
      npas = XmlUtilities.from_element_to_array(root, 'Npa', String,
                                                wrapping_element_name: 'Npas')
      local_rate_center_ids = XmlUtilities.from_element_to_array(
        root, 'RateCenterId', Integer,
        wrapping_element_name: 'LocalRateCenters'
      )

      new(id,
          name,
          abbreviation,
          state,
          lata,
          available_number_count,
          limited_available_number_count,
          zip_codes,
          cities,
          vendors,
          tiers,
          npa_nxx_xs,
          npas,
          local_rate_center_ids)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'Id', id)
      XmlUtilities.add_as_subelement(doc, root, 'Name', name)
      XmlUtilities.add_as_subelement(doc, root, 'Abbreviation', abbreviation)
      XmlUtilities.add_as_subelement(doc, root, 'State', state)
      XmlUtilities.add_as_subelement(doc, root, 'Lata', lata)
      XmlUtilities.add_as_subelement(doc, root, 'AvailableNumberCount',
                                     available_number_count)
      XmlUtilities.add_as_subelement(doc, root, 'LimitedAvailableNumberCount',
                                     limited_available_number_count)
      XmlUtilities.add_array_as_subelement(doc, root, 'ZipCode', zip_codes,
                                           wrapping_element_name: 'ZipCodes')
      XmlUtilities.add_array_as_subelement(doc, root, 'City', cities,
                                           wrapping_element_name: 'Cities')
      XmlUtilities.add_array_as_subelement(doc, root, 'Vendor', vendors,
                                           wrapping_element_name: 'Vendors')
      XmlUtilities.add_array_as_subelement(doc, root, 'Tier', tiers,
                                           wrapping_element_name: 'Tiers')
      XmlUtilities.add_array_as_subelement(doc, root, 'NpaNxxX', npa_nxx_xs,
                                           wrapping_element_name: 'NpaNxxXs')
      XmlUtilities.add_array_as_subelement(doc, root, 'Npa', npas,
                                           wrapping_element_name: 'Npas')
      XmlUtilities.add_array_as_subelement(
        doc, root, 'RateCenterId', local_rate_center_ids,
        wrapping_element_name: 'LocalRateCenters'
      )

      root
    end
  end
end
