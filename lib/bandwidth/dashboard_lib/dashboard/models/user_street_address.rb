# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # UserStreetAddress Model.
  class UserStreetAddress < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :house_number

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :street_name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :city

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :state

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :postal_code

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :empty

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['house_number'] = 'houseNumber'
      @_hash['street_name'] = 'streetName'
      @_hash['city'] = 'city'
      @_hash['state'] = 'state'
      @_hash['postal_code'] = 'postalCode'
      @_hash['empty'] = 'empty'
      @_hash
    end

    def initialize(house_number = nil,
                   street_name = nil,
                   city = nil,
                   state = nil,
                   postal_code = nil,
                   empty = nil)
      @house_number = house_number
      @street_name = street_name
      @city = city
      @state = state
      @postal_code = postal_code
      @empty = empty
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      house_number = hash['houseNumber']
      street_name = hash['streetName']
      city = hash['city']
      state = hash['state']
      postal_code = hash['postalCode']
      empty = hash['empty']

      # Create object from extracted values.
      UserStreetAddress.new(house_number,
                            street_name,
                            city,
                            state,
                            postal_code,
                            empty)
    end

    def self.from_element(root)
      house_number = XmlUtilities.from_element(root, 'HouseNumber', String)
      street_name = XmlUtilities.from_element(root, 'StreetName', String)
      city = XmlUtilities.from_element(root, 'City', String)
      state = XmlUtilities.from_element(root, 'State', String)
      postal_code = XmlUtilities.from_element(root, 'PostalCode', String)
      empty = XmlUtilities.from_element(root, 'empty', TrueClass)

      new(house_number,
          street_name,
          city,
          state,
          postal_code,
          empty)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'HouseNumber', house_number)
      XmlUtilities.add_as_subelement(doc, root, 'StreetName', street_name)
      XmlUtilities.add_as_subelement(doc, root, 'City', city)
      XmlUtilities.add_as_subelement(doc, root, 'State', state)
      XmlUtilities.add_as_subelement(doc, root, 'PostalCode', postal_code)
      XmlUtilities.add_as_subelement(doc, root, 'empty', empty)

      root
    end
  end
end
