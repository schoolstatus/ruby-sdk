# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # Endpoint Model.
  class Endpoint < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :path

    # TODO: Write general description for this method
    # @return [List of EndpointResource]
    attr_accessor :resources

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['name'] = 'name'
      @_hash['path'] = 'path'
      @_hash['resources'] = 'resources'
      @_hash
    end

    def initialize(name = nil,
                   path = nil,
                   resources = nil)
      @name = name
      @path = path
      @resources = resources
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      name = hash['name']
      path = hash['path']
      # Parameter is an array, so we need to iterate through it
      resources = nil
      unless hash['resources'].nil?
        resources = []
        hash['resources'].each do |structure|
          resources << (EndpointResource.from_hash(structure) if structure)
        end
      end

      # Create object from extracted values.
      Endpoint.new(name,
                   path,
                   resources)
    end

    def self.from_element(root)
      name = XmlUtilities.from_element(root, 'ServerName', String)
      path = XmlUtilities.from_element(root, 'ServerPath', String)
      resources = XmlUtilities.from_element_to_array(
        root, 'Resources', EndpointResource,
        wrapping_element_name: 'Resources'
      )

      new(name,
          path,
          resources)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'ServerName', name)
      XmlUtilities.add_as_subelement(doc, root, 'ServerPath', path)
      XmlUtilities.add_array_as_subelement(doc, root, 'Resources', resources,
                                           wrapping_element_name: 'Resources')

      root
    end
  end
end
