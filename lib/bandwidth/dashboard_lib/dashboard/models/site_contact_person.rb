# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # SiteContactPerson Model.
  class SiteContactPerson < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :first_name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :last_name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :email

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :phone_number

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['first_name'] = 'firstName'
      @_hash['last_name'] = 'lastName'
      @_hash['email'] = 'email'
      @_hash['phone_number'] = 'phoneNumber'
      @_hash
    end

    def initialize(first_name = nil,
                   last_name = nil,
                   email = nil,
                   phone_number = nil)
      @first_name = first_name
      @last_name = last_name
      @email = email
      @phone_number = phone_number
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      first_name = hash['firstName']
      last_name = hash['lastName']
      email = hash['email']
      phone_number = hash['phoneNumber']

      # Create object from extracted values.
      SiteContactPerson.new(first_name,
                            last_name,
                            email,
                            phone_number)
    end

    def self.from_element(root)
      first_name = XmlUtilities.from_element(root, 'FirstName', String)
      last_name = XmlUtilities.from_element(root, 'LastName', String)
      email = XmlUtilities.from_element(root, 'Email', String)
      phone_number = XmlUtilities.from_element(root, 'PhoneNumber', String)

      new(first_name,
          last_name,
          email,
          phone_number)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'FirstName', first_name)
      XmlUtilities.add_as_subelement(doc, root, 'LastName', last_name)
      XmlUtilities.add_as_subelement(doc, root, 'Email', email)
      XmlUtilities.add_as_subelement(doc, root, 'PhoneNumber', phone_number)

      root
    end
  end
end
