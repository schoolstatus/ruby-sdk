# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # ProductFeature Model.
  class ProductFeature < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :feature_name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :description

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['feature_name'] = 'featureName'
      @_hash['description'] = 'description'
      @_hash
    end

    def initialize(feature_name = nil,
                   description = nil)
      @feature_name = feature_name
      @description = description
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      feature_name = hash['featureName']
      description = hash['description']

      # Create object from extracted values.
      ProductFeature.new(feature_name,
                         description)
    end

    def self.from_element(root)
      feature_name = XmlUtilities.from_element(root, 'Name', String)
      description = XmlUtilities.from_element(root, 'Description', String)

      new(feature_name,
          description)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'Name', feature_name)
      XmlUtilities.add_as_subelement(doc, root, 'Description', description)

      root
    end
  end
end
