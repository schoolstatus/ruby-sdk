# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # SbcNodeGroups Model.
  class SbcNodeGroups < BaseModel
    # TODO: Write general description for this method
    # @return [List of SbcNodeGroup]
    attr_accessor :sbc_node_groups

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['sbc_node_groups'] = 'sbcNodeGroups'
      @_hash
    end

    def initialize(sbc_node_groups = nil)
      @sbc_node_groups = sbc_node_groups
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      # Parameter is an array, so we need to iterate through it
      sbc_node_groups = nil
      unless hash['sbcNodeGroups'].nil?
        sbc_node_groups = []
        hash['sbcNodeGroups'].each do |structure|
          sbc_node_groups << (SbcNodeGroup.from_hash(structure) if structure)
        end
      end

      # Create object from extracted values.
      SbcNodeGroups.new(sbc_node_groups)
    end

    def self.from_element(root)
      sbc_node_groups = XmlUtilities.from_element_to_array(root, 'SbcNodeGroup',
                                                           SbcNodeGroup)

      new(sbc_node_groups)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_array_as_subelement(doc, root, 'SbcNodeGroup',
                                           sbc_node_groups)

      root
    end
  end
end
