# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # EmergencyNotificationRecipientPayload Model.
  class EmergencyNotificationRecipientPayload < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :identifier

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :description

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :type

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :email

    # TODO: Write general description for this method
    # @return [List of String]
    attr_accessor :sms

    # TODO: Write general description for this method
    # @return [List of String]
    attr_accessor :tts

    # TODO: Write general description for this method
    # @return [CallbackPayload]
    attr_accessor :callback

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['identifier'] = 'identifier'
      @_hash['description'] = 'description'
      @_hash['type'] = 'type'
      @_hash['email'] = 'email'
      @_hash['sms'] = 'sms'
      @_hash['tts'] = 'tts'
      @_hash['callback'] = 'callback'
      @_hash
    end

    def initialize(identifier = nil,
                   description = nil,
                   type = nil,
                   email = nil,
                   sms = nil,
                   tts = nil,
                   callback = nil)
      @identifier = identifier
      @description = description
      @type = type
      @email = email
      @sms = sms
      @tts = tts
      @callback = callback
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      identifier = hash['identifier']
      description = hash['description']
      type = hash['type']
      email = hash['email']
      sms = hash['sms']
      tts = hash['tts']
      callback = CallbackPayload.from_hash(hash['callback']) if
        hash['callback']

      # Create object from extracted values.
      EmergencyNotificationRecipientPayload.new(identifier,
                                                description,
                                                type,
                                                email,
                                                sms,
                                                tts,
                                                callback)
    end

    def self.from_element(root)
      identifier = XmlUtilities.from_element(root, 'Identifier', String)
      description = XmlUtilities.from_element(root, 'Description', String)
      type = XmlUtilities.from_element(root, 'Type', String)
      email = XmlUtilities.from_element(root, 'EmailAddress', String)
      sms = XmlUtilities.from_element_to_array(root, 'TelephoneNumber', String,
                                               wrapping_element_name: 'Sms')
      tts = XmlUtilities.from_element_to_array(root, 'TelephoneNumber', String,
                                               wrapping_element_name: 'Tts')
      callback = XmlUtilities.from_element(root, 'Callback', CallbackPayload)

      new(identifier,
          description,
          type,
          email,
          sms,
          tts,
          callback)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'Identifier', identifier)
      XmlUtilities.add_as_subelement(doc, root, 'Description', description)
      XmlUtilities.add_as_subelement(doc, root, 'Type', type)
      XmlUtilities.add_as_subelement(doc, root, 'EmailAddress', email)
      XmlUtilities.add_array_as_subelement(doc, root, 'TelephoneNumber', sms,
                                           wrapping_element_name: 'Sms')
      XmlUtilities.add_array_as_subelement(doc, root, 'TelephoneNumber', tts,
                                           wrapping_element_name: 'Tts')
      XmlUtilities.add_as_subelement(doc, root, 'Callback', callback)

      root
    end
  end
end
