# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # TnE911Address Model.
  class TnE911Address < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :house_no

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :street_name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :address_line2

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :city

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :state_code

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :zip

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :zip4

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['name'] = 'name'
      @_hash['house_no'] = 'houseNo'
      @_hash['street_name'] = 'streetName'
      @_hash['address_line2'] = 'addressLine2'
      @_hash['city'] = 'city'
      @_hash['state_code'] = 'stateCode'
      @_hash['zip'] = 'zip'
      @_hash['zip4'] = 'zip4'
      @_hash
    end

    def initialize(name = nil,
                   house_no = nil,
                   street_name = nil,
                   address_line2 = nil,
                   city = nil,
                   state_code = nil,
                   zip = nil,
                   zip4 = nil)
      @name = name
      @house_no = house_no
      @street_name = street_name
      @address_line2 = address_line2
      @city = city
      @state_code = state_code
      @zip = zip
      @zip4 = zip4
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      name = hash['name']
      house_no = hash['houseNo']
      street_name = hash['streetName']
      address_line2 = hash['addressLine2']
      city = hash['city']
      state_code = hash['stateCode']
      zip = hash['zip']
      zip4 = hash['zip4']

      # Create object from extracted values.
      TnE911Address.new(name,
                        house_no,
                        street_name,
                        address_line2,
                        city,
                        state_code,
                        zip,
                        zip4)
    end

    def self.from_element(root)
      name = XmlUtilities.from_element(root, 'Name', String)
      house_no = XmlUtilities.from_element(root, 'HouseNumber', String)
      street_name = XmlUtilities.from_element(root, 'StreetName', String)
      address_line2 = XmlUtilities.from_element(root, 'AddressLine2', String)
      city = XmlUtilities.from_element(root, 'City', String)
      state_code = XmlUtilities.from_element(root, 'StateCode', String)
      zip = XmlUtilities.from_element(root, 'Zip', String)
      zip4 = XmlUtilities.from_element(root, 'PlusFour', String)

      new(name,
          house_no,
          street_name,
          address_line2,
          city,
          state_code,
          zip,
          zip4)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'Name', name)
      XmlUtilities.add_as_subelement(doc, root, 'HouseNumber', house_no)
      XmlUtilities.add_as_subelement(doc, root, 'StreetName', street_name)
      XmlUtilities.add_as_subelement(doc, root, 'AddressLine2', address_line2)
      XmlUtilities.add_as_subelement(doc, root, 'City', city)
      XmlUtilities.add_as_subelement(doc, root, 'StateCode', state_code)
      XmlUtilities.add_as_subelement(doc, root, 'Zip', zip)
      XmlUtilities.add_as_subelement(doc, root, 'PlusFour', zip4)

      root
    end
  end
end
