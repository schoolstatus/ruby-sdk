# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # SipPeerTerminationHosts Model.
  class SipPeerTerminationHosts < BaseModel
    # TODO: Write general description for this method
    # @return [List of SipPeerTerminationHost]
    attr_accessor :termination_hosts

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['termination_hosts'] = 'terminationHosts'
      @_hash
    end

    def initialize(termination_hosts = nil)
      @termination_hosts = termination_hosts
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      # Parameter is an array, so we need to iterate through it
      termination_hosts = nil
      unless hash['terminationHosts'].nil?
        termination_hosts = []
        hash['terminationHosts'].each do |structure|
          termination_hosts << (SipPeerTerminationHost.from_hash(structure) if structure)
        end
      end

      # Create object from extracted values.
      SipPeerTerminationHosts.new(termination_hosts)
    end

    def self.from_element(root)
      termination_hosts = XmlUtilities.from_element_to_array(
        root, 'TerminationHost', SipPeerTerminationHost
      )

      new(termination_hosts)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_array_as_subelement(doc, root, 'TerminationHost',
                                           termination_hosts)

      root
    end
  end
end
