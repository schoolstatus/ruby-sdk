# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # AddressPatch Model.
  class AddressPatch < BaseModel
    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :delete

    # TODO: Write general description for this method
    # @return [StringPatch]
    attr_accessor :house_prefix

    # TODO: Write general description for this method
    # @return [StringPatch]
    attr_accessor :house_no

    # TODO: Write general description for this method
    # @return [StringPatch]
    attr_accessor :house_suffix

    # TODO: Write general description for this method
    # @return [StringPatch]
    attr_accessor :pre_directional

    # TODO: Write general description for this method
    # @return [StringPatch]
    attr_accessor :street_name

    # TODO: Write general description for this method
    # @return [StringPatch]
    attr_accessor :street_suffix

    # TODO: Write general description for this method
    # @return [StringPatch]
    attr_accessor :post_directional

    # TODO: Write general description for this method
    # @return [StringPatch]
    attr_accessor :address_line2

    # TODO: Write general description for this method
    # @return [StringPatch]
    attr_accessor :city

    # TODO: Write general description for this method
    # @return [StringPatch]
    attr_accessor :state_code

    # TODO: Write general description for this method
    # @return [StringPatch]
    attr_accessor :zip

    # TODO: Write general description for this method
    # @return [StringPatch]
    attr_accessor :zip4

    # TODO: Write general description for this method
    # @return [StringPatch]
    attr_accessor :country

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['delete'] = 'delete'
      @_hash['house_prefix'] = 'housePrefix'
      @_hash['house_no'] = 'houseNo'
      @_hash['house_suffix'] = 'houseSuffix'
      @_hash['pre_directional'] = 'preDirectional'
      @_hash['street_name'] = 'streetName'
      @_hash['street_suffix'] = 'streetSuffix'
      @_hash['post_directional'] = 'postDirectional'
      @_hash['address_line2'] = 'addressLine2'
      @_hash['city'] = 'city'
      @_hash['state_code'] = 'stateCode'
      @_hash['zip'] = 'zip'
      @_hash['zip4'] = 'zip4'
      @_hash['country'] = 'country'
      @_hash
    end

    def initialize(delete = nil,
                   house_prefix = nil,
                   house_no = nil,
                   house_suffix = nil,
                   pre_directional = nil,
                   street_name = nil,
                   street_suffix = nil,
                   post_directional = nil,
                   address_line2 = nil,
                   city = nil,
                   state_code = nil,
                   zip = nil,
                   zip4 = nil,
                   country = nil)
      @delete = delete
      @house_prefix = house_prefix
      @house_no = house_no
      @house_suffix = house_suffix
      @pre_directional = pre_directional
      @street_name = street_name
      @street_suffix = street_suffix
      @post_directional = post_directional
      @address_line2 = address_line2
      @city = city
      @state_code = state_code
      @zip = zip
      @zip4 = zip4
      @country = country
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      delete = hash['delete']
      house_prefix = StringPatch.from_hash(hash['housePrefix']) if
        hash['housePrefix']
      house_no = StringPatch.from_hash(hash['houseNo']) if hash['houseNo']
      house_suffix = StringPatch.from_hash(hash['houseSuffix']) if
        hash['houseSuffix']
      pre_directional = StringPatch.from_hash(hash['preDirectional']) if
        hash['preDirectional']
      street_name = StringPatch.from_hash(hash['streetName']) if
        hash['streetName']
      street_suffix = StringPatch.from_hash(hash['streetSuffix']) if
        hash['streetSuffix']
      post_directional = StringPatch.from_hash(hash['postDirectional']) if
        hash['postDirectional']
      address_line2 = StringPatch.from_hash(hash['addressLine2']) if
        hash['addressLine2']
      city = StringPatch.from_hash(hash['city']) if hash['city']
      state_code = StringPatch.from_hash(hash['stateCode']) if
        hash['stateCode']
      zip = StringPatch.from_hash(hash['zip']) if hash['zip']
      zip4 = StringPatch.from_hash(hash['zip4']) if hash['zip4']
      country = StringPatch.from_hash(hash['country']) if hash['country']

      # Create object from extracted values.
      AddressPatch.new(delete,
                       house_prefix,
                       house_no,
                       house_suffix,
                       pre_directional,
                       street_name,
                       street_suffix,
                       post_directional,
                       address_line2,
                       city,
                       state_code,
                       zip,
                       zip4,
                       country)
    end

    def self.from_element(root)
      delete = XmlUtilities.from_attribute(root, 'delete', TrueClass)
      house_prefix = XmlUtilities.from_element(root, 'HousePrefix', StringPatch)
      house_no = XmlUtilities.from_element(root, 'HouseNumber', StringPatch)
      house_suffix = XmlUtilities.from_element(root, 'HouseSuffix', StringPatch)
      pre_directional = XmlUtilities.from_element(root, 'PreDirectional',
                                                  StringPatch)
      street_name = XmlUtilities.from_element(root, 'StreetName', StringPatch)
      street_suffix = XmlUtilities.from_element(root, 'StreetSuffix',
                                                StringPatch)
      post_directional = XmlUtilities.from_element(root, 'PostDirectional',
                                                   StringPatch)
      address_line2 = XmlUtilities.from_element(root, 'AddressLine2',
                                                StringPatch)
      city = XmlUtilities.from_element(root, 'City', StringPatch)
      state_code = XmlUtilities.from_element(root, 'StateCode', StringPatch)
      zip = XmlUtilities.from_element(root, 'Zip', StringPatch)
      zip4 = XmlUtilities.from_element(root, 'PlusFour', StringPatch)
      country = XmlUtilities.from_element(root, 'County', StringPatch)

      new(delete,
          house_prefix,
          house_no,
          house_suffix,
          pre_directional,
          street_name,
          street_suffix,
          post_directional,
          address_line2,
          city,
          state_code,
          zip,
          zip4,
          country)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_attribute(root, 'delete', delete)
      XmlUtilities.add_as_subelement(doc, root, 'HousePrefix', house_prefix)
      XmlUtilities.add_as_subelement(doc, root, 'HouseNumber', house_no)
      XmlUtilities.add_as_subelement(doc, root, 'HouseSuffix', house_suffix)
      XmlUtilities.add_as_subelement(doc, root, 'PreDirectional',
                                     pre_directional)
      XmlUtilities.add_as_subelement(doc, root, 'StreetName', street_name)
      XmlUtilities.add_as_subelement(doc, root, 'StreetSuffix', street_suffix)
      XmlUtilities.add_as_subelement(doc, root, 'PostDirectional',
                                     post_directional)
      XmlUtilities.add_as_subelement(doc, root, 'AddressLine2', address_line2)
      XmlUtilities.add_as_subelement(doc, root, 'City', city)
      XmlUtilities.add_as_subelement(doc, root, 'StateCode', state_code)
      XmlUtilities.add_as_subelement(doc, root, 'Zip', zip)
      XmlUtilities.add_as_subelement(doc, root, 'PlusFour', zip4)
      XmlUtilities.add_as_subelement(doc, root, 'County', country)

      root
    end
  end
end
