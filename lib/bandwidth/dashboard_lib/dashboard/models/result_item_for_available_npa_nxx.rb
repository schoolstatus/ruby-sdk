# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # ResultItemForAvailableNpaNxx Model.
  class ResultItemForAvailableNpaNxx < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :npa

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :nxx

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :quantity

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :city

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :state

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['npa'] = 'npa'
      @_hash['nxx'] = 'nxx'
      @_hash['quantity'] = 'quantity'
      @_hash['city'] = 'city'
      @_hash['state'] = 'state'
      @_hash
    end

    def initialize(npa = nil,
                   nxx = nil,
                   quantity = nil,
                   city = nil,
                   state = nil)
      @npa = npa
      @nxx = nxx
      @quantity = quantity
      @city = city
      @state = state
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      npa = hash['npa']
      nxx = hash['nxx']
      quantity = hash['quantity']
      city = hash['city']
      state = hash['state']

      # Create object from extracted values.
      ResultItemForAvailableNpaNxx.new(npa,
                                       nxx,
                                       quantity,
                                       city,
                                       state)
    end

    def self.from_element(root)
      npa = XmlUtilities.from_element(root, 'Npa', String)
      nxx = XmlUtilities.from_element(root, 'Nxx', String)
      quantity = XmlUtilities.from_element(root, 'Quantity', Integer)
      city = XmlUtilities.from_element(root, 'City', String)
      state = XmlUtilities.from_element(root, 'State', String)

      new(npa,
          nxx,
          quantity,
          city,
          state)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'Npa', npa)
      XmlUtilities.add_as_subelement(doc, root, 'Nxx', nxx)
      XmlUtilities.add_as_subelement(doc, root, 'Quantity', quantity)
      XmlUtilities.add_as_subelement(doc, root, 'City', city)
      XmlUtilities.add_as_subelement(doc, root, 'State', state)

      root
    end
  end
end
