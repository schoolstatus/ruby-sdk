# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # RateDeckFailedEntry Model.
  class RateDeckFailedEntry < BaseModel
    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :entry_row

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :entry_string_value

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :message

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['entry_row'] = 'entryRow'
      @_hash['entry_string_value'] = 'entryStringValue'
      @_hash['message'] = 'message'
      @_hash
    end

    def initialize(entry_row = nil,
                   entry_string_value = nil,
                   message = nil)
      @entry_row = entry_row
      @entry_string_value = entry_string_value
      @message = message
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      entry_row = hash['entryRow']
      entry_string_value = hash['entryStringValue']
      message = hash['message']

      # Create object from extracted values.
      RateDeckFailedEntry.new(entry_row,
                              entry_string_value,
                              message)
    end

    def self.from_element(root)
      entry_row = XmlUtilities.from_element(root, 'entryRow', Integer)
      entry_string_value = XmlUtilities.from_element(root, 'entryStringValue',
                                                     String)
      message = XmlUtilities.from_element(root, 'message', String)

      new(entry_row,
          entry_string_value,
          message)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'entryRow', entry_row)
      XmlUtilities.add_as_subelement(doc, root, 'entryStringValue',
                                     entry_string_value)
      XmlUtilities.add_as_subelement(doc, root, 'message', message)

      root
    end
  end
end
