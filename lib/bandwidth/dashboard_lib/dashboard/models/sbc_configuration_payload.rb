# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # SbcConfigurationPayload Model.
  class SbcConfigurationPayload < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :trunk_group_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :node_group_name

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['trunk_group_id'] = 'trunkGroupId'
      @_hash['node_group_name'] = 'nodeGroupName'
      @_hash
    end

    def initialize(trunk_group_id = nil,
                   node_group_name = nil)
      @trunk_group_id = trunk_group_id
      @node_group_name = node_group_name
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      trunk_group_id = hash['trunkGroupId']
      node_group_name = hash['nodeGroupName']

      # Create object from extracted values.
      SbcConfigurationPayload.new(trunk_group_id,
                                  node_group_name)
    end

    def self.from_element(root)
      trunk_group_id = XmlUtilities.from_element(root, 'TrunkGroupId', String)
      node_group_name = XmlUtilities.from_element(root, 'NodeGroupName', String)

      new(trunk_group_id,
          node_group_name)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'TrunkGroupId', trunk_group_id)
      XmlUtilities.add_as_subelement(doc, root, 'NodeGroupName',
                                     node_group_name)

      root
    end
  end
end
