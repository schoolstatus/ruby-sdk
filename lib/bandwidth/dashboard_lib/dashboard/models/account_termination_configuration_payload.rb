# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # AccountTerminationConfigurationPayload Model.
  class AccountTerminationConfigurationPayload < BaseModel
    # TODO: Write general description for this method
    # @return [RogerUsedForTerminationSettingsEnum]
    attr_accessor :roger_used_for_termination_settings

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :http_voice_proxy_term_host

    # TODO: Write general description for this method
    # @return [LegacyTerminationConfigurationPayload]
    attr_accessor :legacy_termination_configuration

    # TODO: Write general description for this method
    # @return [RogerTerminationConfigurationPayload]
    attr_accessor :roger_termination_configuration

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['roger_used_for_termination_settings'] =
        'rogerUsedForTerminationSettings'
      @_hash['http_voice_proxy_term_host'] = 'httpVoiceProxyTermHost'
      @_hash['legacy_termination_configuration'] =
        'legacyTerminationConfiguration'
      @_hash['roger_termination_configuration'] =
        'rogerTerminationConfiguration'
      @_hash
    end

    def initialize(roger_used_for_termination_settings = nil,
                   http_voice_proxy_term_host = nil,
                   legacy_termination_configuration = nil,
                   roger_termination_configuration = nil)
      @roger_used_for_termination_settings =
        roger_used_for_termination_settings
      @http_voice_proxy_term_host = http_voice_proxy_term_host
      @legacy_termination_configuration = legacy_termination_configuration
      @roger_termination_configuration = roger_termination_configuration
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      roger_used_for_termination_settings =
        hash['rogerUsedForTerminationSettings']
      http_voice_proxy_term_host = hash['httpVoiceProxyTermHost']
      if hash['legacyTerminationConfiguration']
        legacy_termination_configuration = LegacyTerminationConfigurationPayload.from_hash(hash['legacyTerminationConfiguration'])
      end
      if hash['rogerTerminationConfiguration']
        roger_termination_configuration = RogerTerminationConfigurationPayload.from_hash(hash['rogerTerminationConfiguration'])
      end

      # Create object from extracted values.
      AccountTerminationConfigurationPayload.new(roger_used_for_termination_settings,
                                                 http_voice_proxy_term_host,
                                                 legacy_termination_configuration,
                                                 roger_termination_configuration)
    end

    def self.from_element(root)
      roger_used_for_termination_settings = XmlUtilities.from_element(
        root, 'RogerUsedForTerminationSettings', String
      )
      http_voice_proxy_term_host = XmlUtilities.from_element(
        root, 'HttpVoiceProxyTermHost', String
      )
      legacy_termination_configuration = XmlUtilities.from_element(
        root, 'LegacyTerminationSettings',
        LegacyTerminationConfigurationPayload
      )
      roger_termination_configuration = XmlUtilities.from_element(
        root, 'RogerTerminationSettings',
        RogerTerminationConfigurationPayload
      )

      new(roger_used_for_termination_settings,
          http_voice_proxy_term_host,
          legacy_termination_configuration,
          roger_termination_configuration)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root,
                                     'RogerUsedForTerminationSettings',
                                     roger_used_for_termination_settings)
      XmlUtilities.add_as_subelement(doc, root, 'HttpVoiceProxyTermHost',
                                     http_voice_proxy_term_host)
      XmlUtilities.add_as_subelement(doc, root, 'LegacyTerminationSettings',
                                     legacy_termination_configuration)
      XmlUtilities.add_as_subelement(doc, root, 'RogerTerminationSettings',
                                     roger_termination_configuration)

      root
    end
  end
end
