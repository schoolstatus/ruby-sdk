# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # SbcNodeGroup Model.
  class SbcNodeGroup < BaseModel
    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :link

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :name

    # TODO: Write general description for this method
    # @return [List of String]
    attr_accessor :nodes

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['link'] = 'link'
      @_hash['name'] = 'name'
      @_hash['nodes'] = 'nodes'
      @_hash
    end

    def initialize(id = nil,
                   link = nil,
                   name = nil,
                   nodes = nil)
      @id = id
      @link = link
      @name = name
      @nodes = nodes
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash['id']
      link = hash['link']
      name = hash['name']
      nodes = hash['nodes']

      # Create object from extracted values.
      SbcNodeGroup.new(id,
                       link,
                       name,
                       nodes)
    end

    def self.from_element(root)
      id = XmlUtilities.from_element(root, 'Id', Integer)
      link = XmlUtilities.from_element(root, 'Link', String)
      name = XmlUtilities.from_element(root, 'Name', String)
      nodes = XmlUtilities.from_element_to_array(root, 'Node', String,
                                                 wrapping_element_name: 'Nodes')

      new(id,
          link,
          name,
          nodes)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'Id', id)
      XmlUtilities.add_as_subelement(doc, root, 'Link', link)
      XmlUtilities.add_as_subelement(doc, root, 'Name', name)
      XmlUtilities.add_array_as_subelement(doc, root, 'Node', nodes,
                                           wrapping_element_name: 'Nodes')

      root
    end
  end
end
