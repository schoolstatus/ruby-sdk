# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # TerminationRateDeck Model.
  class TerminationRateDeck < BaseModel
    # TODO: Write general description for this method
    # @return [List of String]
    attr_accessor :deck_byte_buffer

    # TODO: Write general description for this method
    # @return [DeckFileTypeEnum]
    attr_accessor :deck_file_type

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['deck_byte_buffer'] = 'deckByteBuffer'
      @_hash['deck_file_type'] = 'deckFileType'
      @_hash
    end

    def initialize(deck_byte_buffer = nil,
                   deck_file_type = nil)
      @deck_byte_buffer = deck_byte_buffer
      @deck_file_type = deck_file_type
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      deck_byte_buffer = hash['deckByteBuffer']
      deck_file_type = hash['deckFileType']

      # Create object from extracted values.
      TerminationRateDeck.new(deck_byte_buffer,
                              deck_file_type)
    end

    def self.from_element(root)
      deck_byte_buffer = XmlUtilities.from_element_to_array(root,
                                                            'deckByteBuffer',
                                                            String)
      deck_file_type = XmlUtilities.from_element(root, 'deckFileType', String)

      new(deck_byte_buffer,
          deck_file_type)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_array_as_subelement(doc, root, 'deckByteBuffer',
                                           deck_byte_buffer)
      XmlUtilities.add_as_subelement(doc, root, 'deckFileType', deck_file_type)

      root
    end
  end
end
