# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # DisconnectTelephoneNumberOrderType Model.
  class DisconnectTelephoneNumberOrderType < BaseModel
    # TODO: Write general description for this method
    # @return [TelephoneNumbers1]
    attr_accessor :telephone_numbers

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :disconnect_mode

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :protected_attribute

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['telephone_numbers'] = 'telephoneNumbers'
      @_hash['disconnect_mode'] = 'disconnectMode'
      @_hash['protected_attribute'] = 'protectedAttribute'
      @_hash
    end

    def initialize(telephone_numbers = nil,
                   disconnect_mode = nil,
                   protected_attribute = nil)
      @telephone_numbers = telephone_numbers
      @disconnect_mode = disconnect_mode
      @protected_attribute = protected_attribute
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      if hash['telephoneNumbers']
        telephone_numbers = TelephoneNumbers1.from_hash(hash['telephoneNumbers'])
      end
      disconnect_mode = hash['disconnectMode']
      protected_attribute = hash['protectedAttribute']

      # Create object from extracted values.
      DisconnectTelephoneNumberOrderType.new(telephone_numbers,
                                             disconnect_mode,
                                             protected_attribute)
    end

    def self.from_element(root)
      telephone_numbers = XmlUtilities.from_element(root, 'TelephoneNumberList',
                                                    TelephoneNumbers1)
      disconnect_mode = XmlUtilities.from_element(root, 'DisconnectMode',
                                                  String)
      protected_attribute = XmlUtilities.from_element(root, 'Protected', String)

      new(telephone_numbers,
          disconnect_mode,
          protected_attribute)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'TelephoneNumberList',
                                     telephone_numbers)
      XmlUtilities.add_as_subelement(doc, root, 'DisconnectMode',
                                     disconnect_mode)
      XmlUtilities.add_as_subelement(doc, root, 'Protected',
                                     protected_attribute)

      root
    end
  end
end
