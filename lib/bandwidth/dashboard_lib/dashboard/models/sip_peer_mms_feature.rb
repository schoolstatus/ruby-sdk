# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # SipPeerMmsFeature Model.
  class SipPeerMmsFeature < BaseModel
    # TODO: Write general description for this method
    # @return [MmsSettings]
    attr_accessor :mms_settings

    # TODO: Write general description for this method
    # @return [MmsProtocols]
    attr_accessor :protocols

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['mms_settings'] = 'mmsSettings'
      @_hash['protocols'] = 'protocols'
      @_hash
    end

    def initialize(mms_settings = nil,
                   protocols = nil)
      @mms_settings = mms_settings
      @protocols = protocols
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      mms_settings = MmsSettings.from_hash(hash['mmsSettings']) if
        hash['mmsSettings']
      protocols = MmsProtocols.from_hash(hash['protocols']) if
        hash['protocols']

      # Create object from extracted values.
      SipPeerMmsFeature.new(mms_settings,
                            protocols)
    end

    def self.from_element(root)
      mms_settings = XmlUtilities.from_element(root, 'MmsSettings', MmsSettings)
      protocols = XmlUtilities.from_element(root, 'Protocols', MmsProtocols)

      new(mms_settings,
          protocols)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'MmsSettings', mms_settings)
      XmlUtilities.add_as_subelement(doc, root, 'Protocols', protocols)

      root
    end
  end
end
