# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # TnHistoryCleanup Model.
  class TnHistoryCleanup < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :tag

    # TODO: Write general description for this method
    # @return [List of Integer]
    attr_accessor :account_ids

    # TODO: Write general description for this method
    # @return [List of String]
    attr_accessor :fullnumbers

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['tag'] = 'tag'
      @_hash['account_ids'] = 'accountIds'
      @_hash['fullnumbers'] = 'fullnumbers'
      @_hash
    end

    def initialize(tag = nil,
                   account_ids = nil,
                   fullnumbers = nil)
      @tag = tag
      @account_ids = account_ids
      @fullnumbers = fullnumbers
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      tag = hash['tag']
      account_ids = hash['accountIds']
      fullnumbers = hash['fullnumbers']

      # Create object from extracted values.
      TnHistoryCleanup.new(tag,
                           account_ids,
                           fullnumbers)
    end

    def self.from_element(root)
      tag = XmlUtilities.from_element(root, 'Tag', String)
      account_ids = XmlUtilities.from_element_to_array(
        root, 'AccountId', Integer,
        wrapping_element_name: 'AccountIds'
      )
      fullnumbers = XmlUtilities.from_element_to_array(
        root, 'TelephoneNumber', String,
        wrapping_element_name: 'TelephoneNumbers'
      )

      new(tag,
          account_ids,
          fullnumbers)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'Tag', tag)
      XmlUtilities.add_array_as_subelement(doc, root, 'AccountId', account_ids,
                                           wrapping_element_name: 'AccountIds')
      XmlUtilities.add_array_as_subelement(
        doc, root, 'TelephoneNumber', fullnumbers,
        wrapping_element_name: 'TelephoneNumbers'
      )

      root
    end
  end
end
