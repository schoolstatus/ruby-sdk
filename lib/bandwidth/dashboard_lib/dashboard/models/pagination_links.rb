# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # PaginationLinks Model.
  class PaginationLinks < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :first

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :mnext

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :previous

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :last

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['first'] = 'first'
      @_hash['mnext'] = 'next'
      @_hash['previous'] = 'previous'
      @_hash['last'] = 'last'
      @_hash
    end

    def initialize(first = nil,
                   mnext = nil,
                   previous = nil,
                   last = nil)
      @first = first
      @mnext = mnext
      @previous = previous
      @last = last
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      first = hash['first']
      mnext = hash['next']
      previous = hash['previous']
      last = hash['last']

      # Create object from extracted values.
      PaginationLinks.new(first,
                          mnext,
                          previous,
                          last)
    end

    def self.from_element(root)
      first = XmlUtilities.from_element(root, 'first', String)
      mnext = XmlUtilities.from_element(root, 'next', String)
      previous = XmlUtilities.from_element(root, 'previous', String)
      last = XmlUtilities.from_element(root, 'last', String)

      new(first,
          mnext,
          previous,
          last)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'first', first)
      XmlUtilities.add_as_subelement(doc, root, 'next', mnext)
      XmlUtilities.add_as_subelement(doc, root, 'previous', previous)
      XmlUtilities.add_as_subelement(doc, root, 'last', last)

      root
    end
  end
end
