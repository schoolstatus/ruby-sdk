# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # UserActivityEvent Model.
  class UserActivityEvent < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :invoking_username

    # TODO: Write general description for this method
    # @return [UserActivityEventTypeEnum]
    attr_accessor :user_activity_event_type

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :success

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :event_date

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :contain_details

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :event_id

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['invoking_username'] = 'invokingUsername'
      @_hash['user_activity_event_type'] = 'userActivityEventType'
      @_hash['success'] = 'success'
      @_hash['event_date'] = 'eventDate'
      @_hash['contain_details'] = 'containDetails'
      @_hash['event_id'] = 'eventId'
      @_hash
    end

    def initialize(invoking_username = nil,
                   user_activity_event_type = nil,
                   success = nil,
                   event_date = nil,
                   contain_details = nil,
                   event_id = nil)
      @invoking_username = invoking_username
      @user_activity_event_type = user_activity_event_type
      @success = success
      @event_date = event_date
      @contain_details = contain_details
      @event_id = event_id
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      invoking_username = hash['invokingUsername']
      user_activity_event_type = hash['userActivityEventType']
      success = hash['success']
      event_date = hash['eventDate']
      contain_details = hash['containDetails']
      event_id = hash['eventId']

      # Create object from extracted values.
      UserActivityEvent.new(invoking_username,
                            user_activity_event_type,
                            success,
                            event_date,
                            contain_details,
                            event_id)
    end

    def self.from_element(root)
      invoking_username = XmlUtilities.from_element(root, 'InvokingUser',
                                                    String)
      user_activity_event_type = XmlUtilities.from_element(root, 'Event',
                                                           String)
      success = XmlUtilities.from_element(root, 'Success', TrueClass)
      event_date = XmlUtilities.from_element(root, 'EventDate', String)
      contain_details = XmlUtilities.from_element(root, 'ContainDetails',
                                                  TrueClass)
      event_id = XmlUtilities.from_element(root, 'EventId', Integer)

      new(invoking_username,
          user_activity_event_type,
          success,
          event_date,
          contain_details,
          event_id)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'InvokingUser',
                                     invoking_username)
      XmlUtilities.add_as_subelement(doc, root, 'Event',
                                     user_activity_event_type)
      XmlUtilities.add_as_subelement(doc, root, 'Success', success)
      XmlUtilities.add_as_subelement(doc, root, 'EventDate', event_date)
      XmlUtilities.add_as_subelement(doc, root, 'ContainDetails',
                                     contain_details)
      XmlUtilities.add_as_subelement(doc, root, 'EventId', event_id)

      root
    end
  end
end
