# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # UserTelephoneNumbers Model.
  class UserTelephoneNumbers < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :home_phone

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :cell_phone

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :work_phone

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :other_phone

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :empty

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['home_phone'] = 'homePhone'
      @_hash['cell_phone'] = 'cellPhone'
      @_hash['work_phone'] = 'workPhone'
      @_hash['other_phone'] = 'otherPhone'
      @_hash['empty'] = 'empty'
      @_hash
    end

    def initialize(home_phone = nil,
                   cell_phone = nil,
                   work_phone = nil,
                   other_phone = nil,
                   empty = nil)
      @home_phone = home_phone
      @cell_phone = cell_phone
      @work_phone = work_phone
      @other_phone = other_phone
      @empty = empty
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      home_phone = hash['homePhone']
      cell_phone = hash['cellPhone']
      work_phone = hash['workPhone']
      other_phone = hash['otherPhone']
      empty = hash['empty']

      # Create object from extracted values.
      UserTelephoneNumbers.new(home_phone,
                               cell_phone,
                               work_phone,
                               other_phone,
                               empty)
    end

    def self.from_element(root)
      home_phone = XmlUtilities.from_element(root, 'HomePhone', String)
      cell_phone = XmlUtilities.from_element(root, 'CellPhone', String)
      work_phone = XmlUtilities.from_element(root, 'WorkPhone', String)
      other_phone = XmlUtilities.from_element(root, 'OtherPhone', String)
      empty = XmlUtilities.from_element(root, 'empty', TrueClass)

      new(home_phone,
          cell_phone,
          work_phone,
          other_phone,
          empty)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'HomePhone', home_phone)
      XmlUtilities.add_as_subelement(doc, root, 'CellPhone', cell_phone)
      XmlUtilities.add_as_subelement(doc, root, 'WorkPhone', work_phone)
      XmlUtilities.add_as_subelement(doc, root, 'OtherPhone', other_phone)
      XmlUtilities.add_as_subelement(doc, root, 'empty', empty)

      root
    end
  end
end
