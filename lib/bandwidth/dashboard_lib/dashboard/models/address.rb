# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # Address Model.
  class Address < BaseModel
    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :id

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :version

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :house_prefix

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :house_no

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :house_suffix

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :pre_directional

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :street_name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :street_suffix

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :post_directional

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :address_line2

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :city

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :region_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :state_code

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :zip

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :zip4

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :county

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :country

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :address_type

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :legacy_address_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :legacy_entity_id

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :reset_address_fields

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :latitude

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :longitude

    # TODO: Write general description for this method
    # @return [AddressTypeEnum]
    attr_accessor :address_type_enum

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :country_without_default

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :new

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['version'] = 'version'
      @_hash['house_prefix'] = 'housePrefix'
      @_hash['house_no'] = 'houseNo'
      @_hash['house_suffix'] = 'houseSuffix'
      @_hash['pre_directional'] = 'preDirectional'
      @_hash['street_name'] = 'streetName'
      @_hash['street_suffix'] = 'streetSuffix'
      @_hash['post_directional'] = 'postDirectional'
      @_hash['address_line2'] = 'addressLine2'
      @_hash['city'] = 'city'
      @_hash['region_id'] = 'regionId'
      @_hash['state_code'] = 'stateCode'
      @_hash['zip'] = 'zip'
      @_hash['zip4'] = 'zip4'
      @_hash['county'] = 'county'
      @_hash['country'] = 'country'
      @_hash['address_type'] = 'addressType'
      @_hash['legacy_address_id'] = 'legacyAddressId'
      @_hash['legacy_entity_id'] = 'legacyEntityId'
      @_hash['reset_address_fields'] = 'resetAddressFields'
      @_hash['latitude'] = 'latitude'
      @_hash['longitude'] = 'longitude'
      @_hash['address_type_enum'] = 'addressTypeEnum'
      @_hash['country_without_default'] = 'countryWithoutDefault'
      @_hash['new'] = 'new'
      @_hash
    end

    def initialize(id = nil,
                   version = nil,
                   house_prefix = nil,
                   house_no = nil,
                   house_suffix = nil,
                   pre_directional = nil,
                   street_name = nil,
                   street_suffix = nil,
                   post_directional = nil,
                   address_line2 = nil,
                   city = nil,
                   region_id = nil,
                   state_code = nil,
                   zip = nil,
                   zip4 = nil,
                   county = nil,
                   country = nil,
                   address_type = nil,
                   legacy_address_id = nil,
                   legacy_entity_id = nil,
                   reset_address_fields = nil,
                   latitude = nil,
                   longitude = nil,
                   address_type_enum = nil,
                   country_without_default = nil,
                   new = nil)
      @id = id
      @version = version
      @house_prefix = house_prefix
      @house_no = house_no
      @house_suffix = house_suffix
      @pre_directional = pre_directional
      @street_name = street_name
      @street_suffix = street_suffix
      @post_directional = post_directional
      @address_line2 = address_line2
      @city = city
      @region_id = region_id
      @state_code = state_code
      @zip = zip
      @zip4 = zip4
      @county = county
      @country = country
      @address_type = address_type
      @legacy_address_id = legacy_address_id
      @legacy_entity_id = legacy_entity_id
      @reset_address_fields = reset_address_fields
      @latitude = latitude
      @longitude = longitude
      @address_type_enum = address_type_enum
      @country_without_default = country_without_default
      @new = new
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash['id']
      version = hash['version']
      house_prefix = hash['housePrefix']
      house_no = hash['houseNo']
      house_suffix = hash['houseSuffix']
      pre_directional = hash['preDirectional']
      street_name = hash['streetName']
      street_suffix = hash['streetSuffix']
      post_directional = hash['postDirectional']
      address_line2 = hash['addressLine2']
      city = hash['city']
      region_id = hash['regionId']
      state_code = hash['stateCode']
      zip = hash['zip']
      zip4 = hash['zip4']
      county = hash['county']
      country = hash['country']
      address_type = hash['addressType']
      legacy_address_id = hash['legacyAddressId']
      legacy_entity_id = hash['legacyEntityId']
      reset_address_fields = hash['resetAddressFields']
      latitude = hash['latitude']
      longitude = hash['longitude']
      address_type_enum = hash['addressTypeEnum']
      country_without_default = hash['countryWithoutDefault']
      new = hash['new']

      # Create object from extracted values.
      Address.new(id,
                  version,
                  house_prefix,
                  house_no,
                  house_suffix,
                  pre_directional,
                  street_name,
                  street_suffix,
                  post_directional,
                  address_line2,
                  city,
                  region_id,
                  state_code,
                  zip,
                  zip4,
                  county,
                  country,
                  address_type,
                  legacy_address_id,
                  legacy_entity_id,
                  reset_address_fields,
                  latitude,
                  longitude,
                  address_type_enum,
                  country_without_default,
                  new)
    end

    def self.from_element(root)
      id = XmlUtilities.from_element(root, 'id', Integer)
      version = XmlUtilities.from_element(root, 'version', Integer)
      house_prefix = XmlUtilities.from_element(root, 'HousePrefix', String)
      house_no = XmlUtilities.from_element(root, 'HouseNumber', String)
      house_suffix = XmlUtilities.from_element(root, 'HouseSuffix', String)
      pre_directional = XmlUtilities.from_element(root, 'PreDirectional',
                                                  String)
      street_name = XmlUtilities.from_element(root, 'StreetName', String)
      street_suffix = XmlUtilities.from_element(root, 'StreetSuffix', String)
      post_directional = XmlUtilities.from_element(root, 'PostDirectional',
                                                   String)
      address_line2 = XmlUtilities.from_element(root, 'AddressLine2', String)
      city = XmlUtilities.from_element(root, 'City', String)
      region_id = XmlUtilities.from_element(root, 'regionId', Integer)
      state_code = XmlUtilities.from_element(root, 'StateCode', String)
      zip = XmlUtilities.from_element(root, 'Zip', String)
      zip4 = XmlUtilities.from_element(root, 'PlusFour', String)
      county = XmlUtilities.from_element(root, 'County', String)
      country = XmlUtilities.from_element(root, 'Country', String)
      address_type = XmlUtilities.from_element(root, 'AddressType', String)
      legacy_address_id = XmlUtilities.from_element(root, 'legacyAddressId',
                                                    String)
      legacy_entity_id = XmlUtilities.from_element(root, 'legacyEntityId',
                                                   String)
      reset_address_fields = XmlUtilities.from_element(root,
                                                       'ResetAddressFields',
                                                       TrueClass)
      latitude = XmlUtilities.from_element(root, 'Latitude', String)
      longitude = XmlUtilities.from_element(root, 'Longitude', String)
      address_type_enum = XmlUtilities.from_element(root, 'addressTypeEnum',
                                                    String)
      country_without_default = XmlUtilities.from_element(
        root, 'countryWithoutDefault', String
      )
      new = XmlUtilities.from_element(root, 'new', TrueClass)

      new(id,
          version,
          house_prefix,
          house_no,
          house_suffix,
          pre_directional,
          street_name,
          street_suffix,
          post_directional,
          address_line2,
          city,
          region_id,
          state_code,
          zip,
          zip4,
          county,
          country,
          address_type,
          legacy_address_id,
          legacy_entity_id,
          reset_address_fields,
          latitude,
          longitude,
          address_type_enum,
          country_without_default,
          new)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'id', id)
      XmlUtilities.add_as_subelement(doc, root, 'version', version)
      XmlUtilities.add_as_subelement(doc, root, 'HousePrefix', house_prefix)
      XmlUtilities.add_as_subelement(doc, root, 'HouseNumber', house_no)
      XmlUtilities.add_as_subelement(doc, root, 'HouseSuffix', house_suffix)
      XmlUtilities.add_as_subelement(doc, root, 'PreDirectional',
                                     pre_directional)
      XmlUtilities.add_as_subelement(doc, root, 'StreetName', street_name)
      XmlUtilities.add_as_subelement(doc, root, 'StreetSuffix', street_suffix)
      XmlUtilities.add_as_subelement(doc, root, 'PostDirectional',
                                     post_directional)
      XmlUtilities.add_as_subelement(doc, root, 'AddressLine2', address_line2)
      XmlUtilities.add_as_subelement(doc, root, 'City', city)
      XmlUtilities.add_as_subelement(doc, root, 'regionId', region_id)
      XmlUtilities.add_as_subelement(doc, root, 'StateCode', state_code)
      XmlUtilities.add_as_subelement(doc, root, 'Zip', zip)
      XmlUtilities.add_as_subelement(doc, root, 'PlusFour', zip4)
      XmlUtilities.add_as_subelement(doc, root, 'County', county)
      XmlUtilities.add_as_subelement(doc, root, 'Country', country)
      XmlUtilities.add_as_subelement(doc, root, 'AddressType', address_type)
      XmlUtilities.add_as_subelement(doc, root, 'legacyAddressId',
                                     legacy_address_id)
      XmlUtilities.add_as_subelement(doc, root, 'legacyEntityId',
                                     legacy_entity_id)
      XmlUtilities.add_as_subelement(doc, root, 'ResetAddressFields',
                                     reset_address_fields)
      XmlUtilities.add_as_subelement(doc, root, 'Latitude', latitude)
      XmlUtilities.add_as_subelement(doc, root, 'Longitude', longitude)
      XmlUtilities.add_as_subelement(doc, root, 'addressTypeEnum',
                                     address_type_enum)
      XmlUtilities.add_as_subelement(doc, root, 'countryWithoutDefault',
                                     country_without_default)
      XmlUtilities.add_as_subelement(doc, root, 'new', new)

      root
    end
  end
end
