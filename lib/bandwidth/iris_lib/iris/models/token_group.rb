# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # TokenGroup Model.
  class TokenGroup < BaseModel
    # TODO: Write general description for this method
    # @return [List of String]
    attr_accessor :tokens

    # TODO: Write general description for this method
    # @return [TokenScope]
    attr_accessor :token_scope

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['tokens'] = 'tokens'
      @_hash['token_scope'] = 'tokenScope'
      @_hash
    end

    def initialize(tokens = nil,
                   token_scope = nil)
      @tokens = tokens
      @token_scope = token_scope
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      tokens = hash['tokens']
      token_scope = TokenScope.from_hash(hash['tokenScope']) if
        hash['tokenScope']

      # Create object from extracted values.
      TokenGroup.new(tokens,
                     token_scope)
    end

    def self.from_element(root)
      tokens = XmlUtilities.from_element_to_array(
        root, 'Token', String, wrapping_element_name: 'TokenList'
      )
      token_scope = XmlUtilities.from_element(root, 'TokenScope', TokenScope)

      new(tokens,
          token_scope)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_array_as_subelement(doc, root, 'Token', tokens,
                                           wrapping_element_name: 'TokenList')
      XmlUtilities.add_as_subelement(doc, root, 'TokenScope', token_scope)

      root
    end
  end
end
