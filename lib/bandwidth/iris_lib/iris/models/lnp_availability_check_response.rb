# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # LnpAvailabilityCheckResponse Model.
  class LnpAvailabilityCheckResponse < BaseModel
    # TODO: Write general description for this method
    # @return [IrisStatus]
    attr_accessor :status

    # TODO: Write general description for this method
    # @return [List of LnpError]
    attr_accessor :errors

    # TODO: Write general description for this method
    # @return [PhoneNumber]
    attr_accessor :phone_number

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :available

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['status'] = 'status'
      @_hash['errors'] = 'errors'
      @_hash['phone_number'] = 'phoneNumber'
      @_hash['available'] = 'available'
      @_hash
    end

    def initialize(status = nil,
                   errors = nil,
                   phone_number = nil,
                   available = nil)
      @status = status
      @errors = errors
      @phone_number = phone_number
      @available = available
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      status = IrisStatus.from_hash(hash['status']) if hash['status']
      # Parameter is an array, so we need to iterate through it
      errors = nil
      unless hash['errors'].nil?
        errors = []
        hash['errors'].each do |structure|
          errors << (LnpError.from_hash(structure) if structure)
        end
      end
      phone_number = PhoneNumber.from_hash(hash['phoneNumber']) if
        hash['phoneNumber']
      available = hash['available']

      # Create object from extracted values.
      LnpAvailabilityCheckResponse.new(status,
                                       errors,
                                       phone_number,
                                       available)
    end

    def self.from_element(root)
      status = XmlUtilities.from_element(root, 'Status', IrisStatus)
      errors = XmlUtilities.from_element_to_array(root, 'Errors', LnpError)
      phone_number = XmlUtilities.from_element(root, 'PhoneNumber', PhoneNumber)
      available = XmlUtilities.from_element(root, 'Available', TrueClass)

      new(status,
          errors,
          phone_number,
          available)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'Status', status)
      XmlUtilities.add_array_as_subelement(doc, root, 'Errors', errors)
      XmlUtilities.add_as_subelement(doc, root, 'PhoneNumber', phone_number)
      XmlUtilities.add_as_subelement(doc, root, 'Available', available)

      root
    end
  end
end
