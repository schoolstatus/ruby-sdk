# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # MmsProtocols Model.
  class MmsProtocols < BaseModel
    # TODO: Write general description for this method
    # @return [MmsMM4Protocol]
    attr_accessor :mm4_protocol

    # TODO: Write general description for this method
    # @return [MmsHttpProtocol]
    attr_accessor :http_protocol

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['mm4_protocol'] = 'mm4Protocol'
      @_hash['http_protocol'] = 'httpProtocol'
      @_hash
    end

    def initialize(mm4_protocol = nil,
                   http_protocol = nil)
      @mm4_protocol = mm4_protocol
      @http_protocol = http_protocol
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      mm4_protocol = MmsMM4Protocol.from_hash(hash['mm4Protocol']) if
        hash['mm4Protocol']
      http_protocol = MmsHttpProtocol.from_hash(hash['httpProtocol']) if
        hash['httpProtocol']

      # Create object from extracted values.
      MmsProtocols.new(mm4_protocol,
                       http_protocol)
    end

    def self.from_element(root)
      mm4_protocol = XmlUtilities.from_element(root, 'MM4', MmsMM4Protocol)
      http_protocol = XmlUtilities.from_element(root, 'HTTP', MmsHttpProtocol)

      new(mm4_protocol,
          http_protocol)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'MM4', mm4_protocol)
      XmlUtilities.add_as_subelement(doc, root, 'HTTP', http_protocol)

      root
    end
  end
end
