# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # LdapUserPreference Model.
  class LdapUserPreference < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :value

    # TODO: Write general description for this method
    # @return [List of String]
    attr_accessor :options

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['name'] = 'name'
      @_hash['value'] = 'value'
      @_hash['options'] = 'options'
      @_hash
    end

    def initialize(name = nil,
                   value = nil,
                   options = nil)
      @name = name
      @value = value
      @options = options
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      name = hash['name']
      value = hash['value']
      options = hash['options']

      # Create object from extracted values.
      LdapUserPreference.new(name,
                             value,
                             options)
    end

    def self.from_element(root)
      name = XmlUtilities.from_element(root, 'PreferenceName', String)
      value = XmlUtilities.from_element(root, 'PreferenceValue', String)
      options = XmlUtilities.from_element_to_array(
        root, 'OptionalValue', String,
        wrapping_element_name: 'OptionalValues'
      )

      new(name,
          value,
          options)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'PreferenceName', name)
      XmlUtilities.add_as_subelement(doc, root, 'PreferenceValue', value)
      XmlUtilities.add_array_as_subelement(
        doc, root, 'OptionalValue', options,
        wrapping_element_name: 'OptionalValues'
      )

      root
    end
  end
end
