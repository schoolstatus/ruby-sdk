# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # ImportAvailableNumberOrderType Model.
  class ImportAvailableNumberOrderType < BaseModel
    # TODO: Write general description for this method
    # @return [List of String]
    attr_accessor :telephone_numbers

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :vendor_name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :account_profile_name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :gateway_profile_name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :element_profile_name

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['telephone_numbers'] = 'telephoneNumbers'
      @_hash['vendor_name'] = 'vendorName'
      @_hash['account_profile_name'] = 'accountProfileName'
      @_hash['gateway_profile_name'] = 'gatewayProfileName'
      @_hash['element_profile_name'] = 'elementProfileName'
      @_hash
    end

    def initialize(telephone_numbers = nil,
                   vendor_name = nil,
                   account_profile_name = nil,
                   gateway_profile_name = nil,
                   element_profile_name = nil)
      @telephone_numbers = telephone_numbers
      @vendor_name = vendor_name
      @account_profile_name = account_profile_name
      @gateway_profile_name = gateway_profile_name
      @element_profile_name = element_profile_name
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      telephone_numbers = hash['telephoneNumbers']
      vendor_name = hash['vendorName']
      account_profile_name = hash['accountProfileName']
      gateway_profile_name = hash['gatewayProfileName']
      element_profile_name = hash['elementProfileName']

      # Create object from extracted values.
      ImportAvailableNumberOrderType.new(telephone_numbers,
                                         vendor_name,
                                         account_profile_name,
                                         gateway_profile_name,
                                         element_profile_name)
    end

    def self.from_element(root)
      telephone_numbers = XmlUtilities.from_element_to_array(
        root, 'TelephoneNumber', String,
        wrapping_element_name: 'TelephoneNumberList'
      )
      vendor_name = XmlUtilities.from_element(root, 'VendorName', String)
      account_profile_name = XmlUtilities.from_element(root, 'AccountProfile',
                                                       String)
      gateway_profile_name = XmlUtilities.from_element(root, 'GatewayProfile',
                                                       String)
      element_profile_name = XmlUtilities.from_element(root, 'ElementProfile',
                                                       String)

      new(telephone_numbers,
          vendor_name,
          account_profile_name,
          gateway_profile_name,
          element_profile_name)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_array_as_subelement(
        doc, root, 'TelephoneNumber', telephone_numbers,
        wrapping_element_name: 'TelephoneNumberList'
      )
      XmlUtilities.add_as_subelement(doc, root, 'VendorName', vendor_name)
      XmlUtilities.add_as_subelement(doc, root, 'AccountProfile',
                                     account_profile_name)
      XmlUtilities.add_as_subelement(doc, root, 'GatewayProfile',
                                     gateway_profile_name)
      XmlUtilities.add_as_subelement(doc, root, 'ElementProfile',
                                     element_profile_name)

      root
    end
  end
end
