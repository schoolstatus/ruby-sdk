# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # SipPeerSmsFeatureSettings Model.
  class SipPeerSmsFeatureSettings < BaseModel
    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :toll_free

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :short_code

    # TODO: Write general description for this method
    # @return [A2pLongCodeEnum]
    attr_accessor :a2p_long_code

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :a2p_message_class

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :a2p_campaign_id

    # TODO: Write general description for this method
    # @return [ProtocolEnum]
    attr_accessor :protocol

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :zone1

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :zone2

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :zone3

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :zone4

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :zone5

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['toll_free'] = 'tollFree'
      @_hash['short_code'] = 'shortCode'
      @_hash['a2p_long_code'] = 'a2pLongCode'
      @_hash['a2p_message_class'] = 'a2pMessageClass'
      @_hash['a2p_campaign_id'] = 'a2pCampaignId'
      @_hash['protocol'] = 'protocol'
      @_hash['zone1'] = 'zone1'
      @_hash['zone2'] = 'zone2'
      @_hash['zone3'] = 'zone3'
      @_hash['zone4'] = 'zone4'
      @_hash['zone5'] = 'zone5'
      @_hash
    end

    def initialize(toll_free = nil,
                   short_code = nil,
                   a2p_long_code = nil,
                   a2p_message_class = nil,
                   a2p_campaign_id = nil,
                   protocol = nil,
                   zone1 = nil,
                   zone2 = nil,
                   zone3 = nil,
                   zone4 = nil,
                   zone5 = nil)
      @toll_free = toll_free
      @short_code = short_code
      @a2p_long_code = a2p_long_code
      @a2p_message_class = a2p_message_class
      @a2p_campaign_id = a2p_campaign_id
      @protocol = protocol
      @zone1 = zone1
      @zone2 = zone2
      @zone3 = zone3
      @zone4 = zone4
      @zone5 = zone5
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      toll_free = hash['tollFree']
      short_code = hash['shortCode']
      a2p_long_code = hash['a2pLongCode']
      a2p_message_class = hash['a2pMessageClass']
      a2p_campaign_id = hash['a2pCampaignId']
      protocol = hash['protocol']
      zone1 = hash['zone1']
      zone2 = hash['zone2']
      zone3 = hash['zone3']
      zone4 = hash['zone4']
      zone5 = hash['zone5']

      # Create object from extracted values.
      SipPeerSmsFeatureSettings.new(toll_free,
                                    short_code,
                                    a2p_long_code,
                                    a2p_message_class,
                                    a2p_campaign_id,
                                    protocol,
                                    zone1,
                                    zone2,
                                    zone3,
                                    zone4,
                                    zone5)
    end

    def self.from_element(root)
      toll_free = XmlUtilities.from_element(root, 'TollFree', TrueClass)
      short_code = XmlUtilities.from_element(root, 'ShortCode', TrueClass)
      a2p_long_code = XmlUtilities.from_element(root, 'A2pLongCode', String)
      a2p_message_class = XmlUtilities.from_element(root, 'A2pMessageClass',
                                                    String)
      a2p_campaign_id = XmlUtilities.from_element(root, 'A2pCampaignId', String)
      protocol = XmlUtilities.from_element(root, 'Protocol', String)
      zone1 = XmlUtilities.from_element(root, 'Zone1', TrueClass)
      zone2 = XmlUtilities.from_element(root, 'Zone2', TrueClass)
      zone3 = XmlUtilities.from_element(root, 'Zone3', TrueClass)
      zone4 = XmlUtilities.from_element(root, 'Zone4', TrueClass)
      zone5 = XmlUtilities.from_element(root, 'Zone5', TrueClass)

      new(toll_free,
          short_code,
          a2p_long_code,
          a2p_message_class,
          a2p_campaign_id,
          protocol,
          zone1,
          zone2,
          zone3,
          zone4,
          zone5)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'TollFree', toll_free)
      XmlUtilities.add_as_subelement(doc, root, 'ShortCode', short_code)
      XmlUtilities.add_as_subelement(doc, root, 'A2pLongCode', a2p_long_code)
      XmlUtilities.add_as_subelement(doc, root, 'A2pMessageClass',
                                     a2p_message_class)
      XmlUtilities.add_as_subelement(doc, root, 'A2pCampaignId',
                                     a2p_campaign_id)
      XmlUtilities.add_as_subelement(doc, root, 'Protocol', protocol)
      XmlUtilities.add_as_subelement(doc, root, 'Zone1', zone1)
      XmlUtilities.add_as_subelement(doc, root, 'Zone2', zone2)
      XmlUtilities.add_as_subelement(doc, root, 'Zone3', zone3)
      XmlUtilities.add_as_subelement(doc, root, 'Zone4', zone4)
      XmlUtilities.add_as_subelement(doc, root, 'Zone5', zone5)

      root
    end
  end
end
