# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # ReportParameter Model.
  class ReportParameter < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :type

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :list_type

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :multi_select_allowed

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :required

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :value_filter

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :jasper_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :description

    # TODO: Write general description for this method
    # @return [List of EnumParameterAllowedValue]
    attr_accessor :enum_parameter_allowed_values

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :recommended_value

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :help_information

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['name'] = 'name'
      @_hash['type'] = 'type'
      @_hash['list_type'] = 'listType'
      @_hash['multi_select_allowed'] = 'multiSelectAllowed'
      @_hash['required'] = 'required'
      @_hash['value_filter'] = 'valueFilter'
      @_hash['jasper_id'] = 'jasperId'
      @_hash['description'] = 'description'
      @_hash['enum_parameter_allowed_values'] = 'enumParameterAllowedValues'
      @_hash['recommended_value'] = 'recommendedValue'
      @_hash['help_information'] = 'helpInformation'
      @_hash
    end

    def initialize(name = nil,
                   type = nil,
                   list_type = nil,
                   multi_select_allowed = nil,
                   required = nil,
                   value_filter = nil,
                   jasper_id = nil,
                   description = nil,
                   enum_parameter_allowed_values = nil,
                   recommended_value = nil,
                   help_information = nil)
      @name = name
      @type = type
      @list_type = list_type
      @multi_select_allowed = multi_select_allowed
      @required = required
      @value_filter = value_filter
      @jasper_id = jasper_id
      @description = description
      @enum_parameter_allowed_values = enum_parameter_allowed_values
      @recommended_value = recommended_value
      @help_information = help_information
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      name = hash['name']
      type = hash['type']
      list_type = hash['listType']
      multi_select_allowed = hash['multiSelectAllowed']
      required = hash['required']
      value_filter = hash['valueFilter']
      jasper_id = hash['jasperId']
      description = hash['description']
      # Parameter is an array, so we need to iterate through it
      enum_parameter_allowed_values = nil
      unless hash['enumParameterAllowedValues'].nil?
        enum_parameter_allowed_values = []
        hash['enumParameterAllowedValues'].each do |structure|
          enum_parameter_allowed_values << (EnumParameterAllowedValue.from_hash(structure) if structure)
        end
      end
      recommended_value = hash['recommendedValue']
      help_information = hash['helpInformation']

      # Create object from extracted values.
      ReportParameter.new(name,
                          type,
                          list_type,
                          multi_select_allowed,
                          required,
                          value_filter,
                          jasper_id,
                          description,
                          enum_parameter_allowed_values,
                          recommended_value,
                          help_information)
    end

    def self.from_element(root)
      name = XmlUtilities.from_element(root, 'Name', String)
      type = XmlUtilities.from_element(root, 'Type', String)
      list_type = XmlUtilities.from_element(root, 'ListType', String)
      multi_select_allowed = XmlUtilities.from_element(root,
                                                       'MultiSelectAllowed',
                                                       String)
      required = XmlUtilities.from_element(root, 'Required', TrueClass)
      value_filter = XmlUtilities.from_element(root, 'ValueFilter', String)
      jasper_id = XmlUtilities.from_element(root, 'JasperId', String)
      description = XmlUtilities.from_element(root, 'Description', String)
      enum_parameter_allowed_values = XmlUtilities.from_element_to_array(
        root, 'Value', EnumParameterAllowedValue,
        wrapping_element_name: 'Values'
      )
      recommended_value = XmlUtilities.from_element(root, 'RecommendedValue',
                                                    String)
      help_information = XmlUtilities.from_element(root, 'HelpInformation',
                                                   String)

      new(name,
          type,
          list_type,
          multi_select_allowed,
          required,
          value_filter,
          jasper_id,
          description,
          enum_parameter_allowed_values,
          recommended_value,
          help_information)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'Name', name)
      XmlUtilities.add_as_subelement(doc, root, 'Type', type)
      XmlUtilities.add_as_subelement(doc, root, 'ListType', list_type)
      XmlUtilities.add_as_subelement(doc, root, 'MultiSelectAllowed',
                                     multi_select_allowed)
      XmlUtilities.add_as_subelement(doc, root, 'Required', required)
      XmlUtilities.add_as_subelement(doc, root, 'ValueFilter', value_filter)
      XmlUtilities.add_as_subelement(doc, root, 'JasperId', jasper_id)
      XmlUtilities.add_as_subelement(doc, root, 'Description', description)
      XmlUtilities.add_array_as_subelement(doc, root, 'Value',
                                           enum_parameter_allowed_values,
                                           wrapping_element_name: 'Values')
      XmlUtilities.add_as_subelement(doc, root, 'RecommendedValue',
                                     recommended_value)
      XmlUtilities.add_as_subelement(doc, root, 'HelpInformation',
                                     help_information)

      root
    end
  end
end
