# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # Reservation Model.
  class Reservation < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :reservation_id

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :account_id

    # TODO: Write general description for this method
    # @return [Long]
    attr_accessor :reservation_expires

    # TODO: Write general description for this method
    # @return [TelephoneNumber]
    attr_accessor :reserved_tn

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['reservation_id'] = 'reservationId'
      @_hash['account_id'] = 'accountId'
      @_hash['reservation_expires'] = 'reservationExpires'
      @_hash['reserved_tn'] = 'reservedTn'
      @_hash
    end

    def initialize(reservation_id = nil,
                   account_id = nil,
                   reservation_expires = nil,
                   reserved_tn = nil)
      @reservation_id = reservation_id
      @account_id = account_id
      @reservation_expires = reservation_expires
      @reserved_tn = reserved_tn
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      reservation_id = hash['reservationId']
      account_id = hash['accountId']
      reservation_expires = hash['reservationExpires']
      reserved_tn = TelephoneNumber.from_hash(hash['reservedTn']) if
        hash['reservedTn']

      # Create object from extracted values.
      Reservation.new(reservation_id,
                      account_id,
                      reservation_expires,
                      reserved_tn)
    end

    def self.from_element(root)
      reservation_id = XmlUtilities.from_element(root, 'ReservationId', String)
      account_id = XmlUtilities.from_element(root, 'AccountId', Integer)
      reservation_expires = XmlUtilities.from_element(root,
                                                      'ReservationExpires',
                                                      Integer)
      reserved_tn = XmlUtilities.from_element(root, 'ReservedTn',
                                              TelephoneNumber)

      new(reservation_id,
          account_id,
          reservation_expires,
          reserved_tn)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'ReservationId', reservation_id)
      XmlUtilities.add_as_subelement(doc, root, 'AccountId', account_id)
      XmlUtilities.add_as_subelement(doc, root, 'ReservationExpires',
                                     reservation_expires)
      XmlUtilities.add_as_subelement(doc, root, 'ReservedTn', reserved_tn)

      root
    end
  end
end
