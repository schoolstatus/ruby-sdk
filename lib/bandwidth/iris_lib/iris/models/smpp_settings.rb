# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # SmppSettings Model.
  class SmppSettings < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :username

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :password

    # TODO: Write general description for this method
    # @return [DlrEnum]
    attr_accessor :dlr

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :dlr_carrier

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :max_pending_submits

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :force_ton

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :allow_third_party_tn

    # TODO: Write general description for this method
    # @return [ConnectionTypeDefaultEnum]
    attr_accessor :connection_type_default

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :max_connections

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :reset_password

    # TODO: Write general description for this method
    # @return [SrcTonEnum]
    attr_accessor :src_ton

    # TODO: Write general description for this method
    # @return [SrcNpiEnum]
    attr_accessor :src_npi

    # TODO: Write general description for this method
    # @return [DstTonEnum]
    attr_accessor :dst_ton

    # TODO: Write general description for this method
    # @return [DstNpiEnum]
    attr_accessor :dst_npi

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['username'] = 'username'
      @_hash['password'] = 'password'
      @_hash['dlr'] = 'dlr'
      @_hash['dlr_carrier'] = 'dlrCarrier'
      @_hash['max_pending_submits'] = 'maxPendingSubmits'
      @_hash['force_ton'] = 'forceTon'
      @_hash['allow_third_party_tn'] = 'allowThirdPartyTN'
      @_hash['connection_type_default'] = 'connectionTypeDefault'
      @_hash['max_connections'] = 'maxConnections'
      @_hash['reset_password'] = 'resetPassword'
      @_hash['src_ton'] = 'srcTon'
      @_hash['src_npi'] = 'srcNpi'
      @_hash['dst_ton'] = 'dstTon'
      @_hash['dst_npi'] = 'dstNpi'
      @_hash
    end

    def initialize(username = nil,
                   password = nil,
                   dlr = nil,
                   dlr_carrier = nil,
                   max_pending_submits = nil,
                   force_ton = nil,
                   allow_third_party_tn = nil,
                   connection_type_default = nil,
                   max_connections = nil,
                   reset_password = nil,
                   src_ton = nil,
                   src_npi = nil,
                   dst_ton = nil,
                   dst_npi = nil)
      @username = username
      @password = password
      @dlr = dlr
      @dlr_carrier = dlr_carrier
      @max_pending_submits = max_pending_submits
      @force_ton = force_ton
      @allow_third_party_tn = allow_third_party_tn
      @connection_type_default = connection_type_default
      @max_connections = max_connections
      @reset_password = reset_password
      @src_ton = src_ton
      @src_npi = src_npi
      @dst_ton = dst_ton
      @dst_npi = dst_npi
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      username = hash['username']
      password = hash['password']
      dlr = hash['dlr']
      dlr_carrier = hash['dlrCarrier']
      max_pending_submits = hash['maxPendingSubmits']
      force_ton = hash['forceTon']
      allow_third_party_tn = hash['allowThirdPartyTN']
      connection_type_default = hash['connectionTypeDefault']
      max_connections = hash['maxConnections']
      reset_password = hash['resetPassword']
      src_ton = hash['srcTon']
      src_npi = hash['srcNpi']
      dst_ton = hash['dstTon']
      dst_npi = hash['dstNpi']

      # Create object from extracted values.
      SmppSettings.new(username,
                       password,
                       dlr,
                       dlr_carrier,
                       max_pending_submits,
                       force_ton,
                       allow_third_party_tn,
                       connection_type_default,
                       max_connections,
                       reset_password,
                       src_ton,
                       src_npi,
                       dst_ton,
                       dst_npi)
    end

    def self.from_element(root)
      username = XmlUtilities.from_element(root, 'SmppUsername', String)
      password = XmlUtilities.from_element(root, 'Password', String)
      dlr = XmlUtilities.from_element(root, 'Dlr', String)
      dlr_carrier = XmlUtilities.from_element(root, 'DlrCarrier', TrueClass)
      max_pending_submits = XmlUtilities.from_element(root, 'MaxPendingSubmits',
                                                      Integer)
      force_ton = XmlUtilities.from_element(root, 'ForceTon', TrueClass)
      allow_third_party_tn = XmlUtilities.from_element(root,
                                                       'AllowThirdPartyTN',
                                                       TrueClass)
      connection_type_default = XmlUtilities.from_element(
        root, 'ConnectionTypeDefault', String
      )
      max_connections = XmlUtilities.from_element(root, 'MaxConnections',
                                                  Integer)
      reset_password = XmlUtilities.from_element(root, 'ResetPassword',
                                                 TrueClass)
      src_ton = XmlUtilities.from_element(root, 'SrcTon', String)
      src_npi = XmlUtilities.from_element(root, 'SrcNpi', String)
      dst_ton = XmlUtilities.from_element(root, 'DstTon', String)
      dst_npi = XmlUtilities.from_element(root, 'DstNpi', String)

      new(username,
          password,
          dlr,
          dlr_carrier,
          max_pending_submits,
          force_ton,
          allow_third_party_tn,
          connection_type_default,
          max_connections,
          reset_password,
          src_ton,
          src_npi,
          dst_ton,
          dst_npi)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'SmppUsername', username)
      XmlUtilities.add_as_subelement(doc, root, 'Password', password)
      XmlUtilities.add_as_subelement(doc, root, 'Dlr', dlr)
      XmlUtilities.add_as_subelement(doc, root, 'DlrCarrier', dlr_carrier)
      XmlUtilities.add_as_subelement(doc, root, 'MaxPendingSubmits',
                                     max_pending_submits)
      XmlUtilities.add_as_subelement(doc, root, 'ForceTon', force_ton)
      XmlUtilities.add_as_subelement(doc, root, 'AllowThirdPartyTN',
                                     allow_third_party_tn)
      XmlUtilities.add_as_subelement(doc, root, 'ConnectionTypeDefault',
                                     connection_type_default)
      XmlUtilities.add_as_subelement(doc, root, 'MaxConnections',
                                     max_connections)
      XmlUtilities.add_as_subelement(doc, root, 'ResetPassword', reset_password)
      XmlUtilities.add_as_subelement(doc, root, 'SrcTon', src_ton)
      XmlUtilities.add_as_subelement(doc, root, 'SrcNpi', src_npi)
      XmlUtilities.add_as_subelement(doc, root, 'DstTon', dst_ton)
      XmlUtilities.add_as_subelement(doc, root, 'DstNpi', dst_npi)

      root
    end
  end
end
