# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # AllNanpNumbers Model.
  class AllNanpNumbers < BaseModel
    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :all_short_code

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :any_nanp

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :any_short_code

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :all_nanp

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :all_international

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :any_international

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :empty

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['all_short_code'] = 'allShortCode'
      @_hash['any_nanp'] = 'anyNanp'
      @_hash['any_short_code'] = 'anyShortCode'
      @_hash['all_nanp'] = 'allNanp'
      @_hash['all_international'] = 'allInternational'
      @_hash['any_international'] = 'anyInternational'
      @_hash['empty'] = 'empty'
      @_hash
    end

    def initialize(all_short_code = nil,
                   any_nanp = nil,
                   any_short_code = nil,
                   all_nanp = nil,
                   all_international = nil,
                   any_international = nil,
                   empty = nil)
      @all_short_code = all_short_code
      @any_nanp = any_nanp
      @any_short_code = any_short_code
      @all_nanp = all_nanp
      @all_international = all_international
      @any_international = any_international
      @empty = empty
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      all_short_code = hash['allShortCode']
      any_nanp = hash['anyNanp']
      any_short_code = hash['anyShortCode']
      all_nanp = hash['allNanp']
      all_international = hash['allInternational']
      any_international = hash['anyInternational']
      empty = hash['empty']

      # Create object from extracted values.
      AllNanpNumbers.new(all_short_code,
                         any_nanp,
                         any_short_code,
                         all_nanp,
                         all_international,
                         any_international,
                         empty)
    end

    def self.from_element(root)
      all_short_code = XmlUtilities.from_element(root, 'allShortCode',
                                                 TrueClass)
      any_nanp = XmlUtilities.from_element(root, 'anyNanp', TrueClass)
      any_short_code = XmlUtilities.from_element(root, 'anyShortCode',
                                                 TrueClass)
      all_nanp = XmlUtilities.from_element(root, 'allNanp', TrueClass)
      all_international = XmlUtilities.from_element(root, 'allInternational',
                                                    TrueClass)
      any_international = XmlUtilities.from_element(root, 'anyInternational',
                                                    TrueClass)
      empty = XmlUtilities.from_element(root, 'empty', TrueClass)

      new(all_short_code,
          any_nanp,
          any_short_code,
          all_nanp,
          all_international,
          any_international,
          empty)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'allShortCode', all_short_code)
      XmlUtilities.add_as_subelement(doc, root, 'anyNanp', any_nanp)
      XmlUtilities.add_as_subelement(doc, root, 'anyShortCode', any_short_code)
      XmlUtilities.add_as_subelement(doc, root, 'allNanp', all_nanp)
      XmlUtilities.add_as_subelement(doc, root, 'allInternational',
                                     all_international)
      XmlUtilities.add_as_subelement(doc, root, 'anyInternational',
                                     any_international)
      XmlUtilities.add_as_subelement(doc, root, 'empty', empty)

      root
    end
  end
end
