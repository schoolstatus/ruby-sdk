# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # SmsHost Model.
  class SmsHost < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :host_name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :port

    # TODO: Write general description for this method
    # @return [Long]
    attr_accessor :host_id

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :priority

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :username

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :password

    # TODO: Write general description for this method
    # @return [ConnectionTypeEnum]
    attr_accessor :connection_type

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['host_name'] = 'hostName'
      @_hash['port'] = 'port'
      @_hash['host_id'] = 'hostId'
      @_hash['priority'] = 'priority'
      @_hash['username'] = 'username'
      @_hash['password'] = 'password'
      @_hash['connection_type'] = 'connectionType'
      @_hash
    end

    def initialize(host_name = nil,
                   port = nil,
                   host_id = nil,
                   priority = nil,
                   username = nil,
                   password = nil,
                   connection_type = nil)
      @host_name = host_name
      @port = port
      @host_id = host_id
      @priority = priority
      @username = username
      @password = password
      @connection_type = connection_type
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      host_name = hash['hostName']
      port = hash['port']
      host_id = hash['hostId']
      priority = hash['priority']
      username = hash['username']
      password = hash['password']
      connection_type = hash['connectionType']

      # Create object from extracted values.
      SmsHost.new(host_name,
                  port,
                  host_id,
                  priority,
                  username,
                  password,
                  connection_type)
    end

    def self.from_element(root)
      host_name = XmlUtilities.from_element(root, 'HostName', String)
      port = XmlUtilities.from_element(root, 'Port', String)
      host_id = XmlUtilities.from_element(root, 'HostId', Integer)
      priority = XmlUtilities.from_element(root, 'Priority', Integer)
      username = XmlUtilities.from_element(root, 'Username', String)
      password = XmlUtilities.from_element(root, 'Password', String)
      connection_type = XmlUtilities.from_element(root, 'ConnectionType',
                                                  String)

      new(host_name,
          port,
          host_id,
          priority,
          username,
          password,
          connection_type)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'HostName', host_name)
      XmlUtilities.add_as_subelement(doc, root, 'Port', port)
      XmlUtilities.add_as_subelement(doc, root, 'HostId', host_id)
      XmlUtilities.add_as_subelement(doc, root, 'Priority', priority)
      XmlUtilities.add_as_subelement(doc, root, 'Username', username)
      XmlUtilities.add_as_subelement(doc, root, 'Password', password)
      XmlUtilities.add_as_subelement(doc, root, 'ConnectionType',
                                     connection_type)

      root
    end
  end
end
