# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # TerminationCarrier Model.
  class TerminationCarrier < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :carriername

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :description

    # TODO: Write general description for this method
    # @return [Long]
    attr_accessor :profile_id

    # TODO: Write general description for this method
    # @return [Long]
    attr_accessor :gateway_id

    # TODO: Write general description for this method
    # @return [Long]
    attr_accessor :carrier_id

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :mask_position

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['carriername'] = 'carriername'
      @_hash['description'] = 'description'
      @_hash['profile_id'] = 'profileId'
      @_hash['gateway_id'] = 'gatewayId'
      @_hash['carrier_id'] = 'carrierId'
      @_hash['mask_position'] = 'maskPosition'
      @_hash
    end

    def initialize(carriername = nil,
                   description = nil,
                   profile_id = nil,
                   gateway_id = nil,
                   carrier_id = nil,
                   mask_position = nil)
      @carriername = carriername
      @description = description
      @profile_id = profile_id
      @gateway_id = gateway_id
      @carrier_id = carrier_id
      @mask_position = mask_position
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      carriername = hash['carriername']
      description = hash['description']
      profile_id = hash['profileId']
      gateway_id = hash['gatewayId']
      carrier_id = hash['carrierId']
      mask_position = hash['maskPosition']

      # Create object from extracted values.
      TerminationCarrier.new(carriername,
                             description,
                             profile_id,
                             gateway_id,
                             carrier_id,
                             mask_position)
    end

    def self.from_element(root)
      carriername = XmlUtilities.from_element(root, 'carriername', String)
      description = XmlUtilities.from_element(root, 'description', String)
      profile_id = XmlUtilities.from_element(root, 'profileId', Integer)
      gateway_id = XmlUtilities.from_element(root, 'gatewayId', Integer)
      carrier_id = XmlUtilities.from_element(root, 'carrierId', Integer)
      mask_position = XmlUtilities.from_element(root, 'maskPosition', Integer)

      new(carriername,
          description,
          profile_id,
          gateway_id,
          carrier_id,
          mask_position)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'carriername', carriername)
      XmlUtilities.add_as_subelement(doc, root, 'description', description)
      XmlUtilities.add_as_subelement(doc, root, 'profileId', profile_id)
      XmlUtilities.add_as_subelement(doc, root, 'gatewayId', gateway_id)
      XmlUtilities.add_as_subelement(doc, root, 'carrierId', carrier_id)
      XmlUtilities.add_as_subelement(doc, root, 'maskPosition', mask_position)

      root
    end
  end
end
