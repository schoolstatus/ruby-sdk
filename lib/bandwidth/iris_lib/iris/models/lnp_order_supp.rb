# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module Bandwidth
  # LnpOrderSupp Model.
  class LnpOrderSupp < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :customer_order_id

    # TODO: Write general description for this method
    # @return [ProcessingStatus4Enum]
    attr_accessor :processing_status

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :billing_telephone_number

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :new_billing_telephone_number

    # TODO: Write general description for this method
    # @return [WirelessInfo]
    attr_accessor :wireless_info

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :requested_foc_date_str

    # TODO: Write general description for this method
    # @return [Subscriber]
    attr_accessor :subscriber

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :peer_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :partial_port

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :loa_authorizing_person

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :immediately

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :triggered

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :billing_type

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :auto_activation_type

    # TODO: Write general description for this method
    # @return [List of String]
    attr_accessor :tn_attributes

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :override_validation

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :alternate_spid

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :site_id

    # TODO: Write general description for this method
    # @return [DateTime]
    attr_accessor :actual_foc_date

    # TODO: Write general description for this method
    # @return [PhoneNumberList]
    attr_accessor :numbers_to_port

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['customer_order_id'] = 'customerOrderId'
      @_hash['processing_status'] = 'processingStatus'
      @_hash['billing_telephone_number'] = 'billingTelephoneNumber'
      @_hash['new_billing_telephone_number'] = 'newBillingTelephoneNumber'
      @_hash['wireless_info'] = 'wirelessInfo'
      @_hash['requested_foc_date_str'] = 'requestedFocDateStr'
      @_hash['subscriber'] = 'subscriber'
      @_hash['peer_id'] = 'peerId'
      @_hash['partial_port'] = 'partialPort'
      @_hash['loa_authorizing_person'] = 'loaAuthorizingPerson'
      @_hash['immediately'] = 'immediately'
      @_hash['triggered'] = 'triggered'
      @_hash['billing_type'] = 'billingType'
      @_hash['auto_activation_type'] = 'autoActivationType'
      @_hash['tn_attributes'] = 'tnAttributes'
      @_hash['override_validation'] = 'overrideValidation'
      @_hash['alternate_spid'] = 'alternateSpid'
      @_hash['site_id'] = 'siteId'
      @_hash['actual_foc_date'] = 'actualFocDate'
      @_hash['numbers_to_port'] = 'numbersToPort'
      @_hash
    end

    def initialize(customer_order_id = nil,
                   processing_status = nil,
                   billing_telephone_number = nil,
                   new_billing_telephone_number = nil,
                   wireless_info = nil,
                   requested_foc_date_str = nil,
                   subscriber = nil,
                   peer_id = nil,
                   partial_port = nil,
                   loa_authorizing_person = nil,
                   immediately = nil,
                   triggered = nil,
                   billing_type = nil,
                   auto_activation_type = nil,
                   tn_attributes = nil,
                   override_validation = nil,
                   alternate_spid = nil,
                   site_id = nil,
                   actual_foc_date = nil,
                   numbers_to_port = nil)
      @customer_order_id = customer_order_id
      @processing_status = processing_status
      @billing_telephone_number = billing_telephone_number
      @new_billing_telephone_number = new_billing_telephone_number
      @wireless_info = wireless_info
      @requested_foc_date_str = requested_foc_date_str
      @subscriber = subscriber
      @peer_id = peer_id
      @partial_port = partial_port
      @loa_authorizing_person = loa_authorizing_person
      @immediately = immediately
      @triggered = triggered
      @billing_type = billing_type
      @auto_activation_type = auto_activation_type
      @tn_attributes = tn_attributes
      @override_validation = override_validation
      @alternate_spid = alternate_spid
      @site_id = site_id
      @actual_foc_date = actual_foc_date
      @numbers_to_port = numbers_to_port
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      customer_order_id = hash['customerOrderId']
      processing_status = hash['processingStatus']
      billing_telephone_number = hash['billingTelephoneNumber']
      new_billing_telephone_number = hash['newBillingTelephoneNumber']
      wireless_info = WirelessInfo.from_hash(hash['wirelessInfo']) if
        hash['wirelessInfo']
      requested_foc_date_str = hash['requestedFocDateStr']
      subscriber = Subscriber.from_hash(hash['subscriber']) if
        hash['subscriber']
      peer_id = hash['peerId']
      partial_port = hash['partialPort']
      loa_authorizing_person = hash['loaAuthorizingPerson']
      immediately = hash['immediately']
      triggered = hash['triggered']
      billing_type = hash['billingType']
      auto_activation_type = hash['autoActivationType']
      tn_attributes = hash['tnAttributes']
      override_validation = hash['overrideValidation']
      alternate_spid = hash['alternateSpid']
      site_id = hash['siteId']
      actual_foc_date = APIHelper.rfc3339(hash['actualFocDate']) if
        hash['actualFocDate']
      numbers_to_port = PhoneNumberList.from_hash(hash['numbersToPort']) if
        hash['numbersToPort']

      # Create object from extracted values.
      LnpOrderSupp.new(customer_order_id,
                       processing_status,
                       billing_telephone_number,
                       new_billing_telephone_number,
                       wireless_info,
                       requested_foc_date_str,
                       subscriber,
                       peer_id,
                       partial_port,
                       loa_authorizing_person,
                       immediately,
                       triggered,
                       billing_type,
                       auto_activation_type,
                       tn_attributes,
                       override_validation,
                       alternate_spid,
                       site_id,
                       actual_foc_date,
                       numbers_to_port)
    end

    def self.from_element(root)
      customer_order_id = XmlUtilities.from_element(root, 'CustomerOrderId',
                                                    String)
      processing_status = XmlUtilities.from_element(root, 'ProcessingStatus',
                                                    String)
      billing_telephone_number = XmlUtilities.from_element(
        root, 'BillingTelephoneNumber', String
      )
      new_billing_telephone_number = XmlUtilities.from_element(
        root, 'NewBillingTelephoneNumber', String
      )
      wireless_info = XmlUtilities.from_element(root, 'WirelessInfo',
                                                WirelessInfo)
      requested_foc_date_str = XmlUtilities.from_element(root,
                                                         'RequestedFocDate',
                                                         String)
      subscriber = XmlUtilities.from_element(root, 'Subscriber', Subscriber)
      peer_id = XmlUtilities.from_element(root, 'PeerId', String)
      partial_port = XmlUtilities.from_element(root, 'PartialPort', String)
      loa_authorizing_person = XmlUtilities.from_element(root,
                                                         'LoaAuthorizingPerson',
                                                         String)
      immediately = XmlUtilities.from_element(root, 'Immediately', TrueClass)
      triggered = XmlUtilities.from_element(root, 'Triggered', TrueClass)
      billing_type = XmlUtilities.from_element(root, 'BillingType', String)
      auto_activation_type = XmlUtilities.from_element(root, 'AutoActivation',
                                                       String)
      tn_attributes = XmlUtilities.from_element_to_array(
        root, 'TnAttribute', String,
        wrapping_element_name: 'TnAttributes'
      )
      override_validation = XmlUtilities.from_element(root,
                                                      'OverrideValidation',
                                                      TrueClass)
      alternate_spid = XmlUtilities.from_element(root, 'AlternateSpid', String)
      site_id = XmlUtilities.from_element(root, 'SiteId', Integer)
      actual_foc_date = XmlUtilities.from_element(root, 'ActualFocDate', String,
                                                  datetime_format: 'rfc3339')
      numbers_to_port = XmlUtilities.from_element(root, 'ListOfPhoneNumbers',
                                                  PhoneNumberList)

      new(customer_order_id,
          processing_status,
          billing_telephone_number,
          new_billing_telephone_number,
          wireless_info,
          requested_foc_date_str,
          subscriber,
          peer_id,
          partial_port,
          loa_authorizing_person,
          immediately,
          triggered,
          billing_type,
          auto_activation_type,
          tn_attributes,
          override_validation,
          alternate_spid,
          site_id,
          actual_foc_date,
          numbers_to_port)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'CustomerOrderId',
                                     customer_order_id)
      XmlUtilities.add_as_subelement(doc, root, 'ProcessingStatus',
                                     processing_status)
      XmlUtilities.add_as_subelement(doc, root, 'BillingTelephoneNumber',
                                     billing_telephone_number)
      XmlUtilities.add_as_subelement(doc, root, 'NewBillingTelephoneNumber',
                                     new_billing_telephone_number)
      XmlUtilities.add_as_subelement(doc, root, 'WirelessInfo', wireless_info)
      XmlUtilities.add_as_subelement(doc, root, 'RequestedFocDate',
                                     requested_foc_date_str)
      XmlUtilities.add_as_subelement(doc, root, 'Subscriber', subscriber)
      XmlUtilities.add_as_subelement(doc, root, 'PeerId', peer_id)
      XmlUtilities.add_as_subelement(doc, root, 'PartialPort', partial_port)
      XmlUtilities.add_as_subelement(doc, root, 'LoaAuthorizingPerson',
                                     loa_authorizing_person)
      XmlUtilities.add_as_subelement(doc, root, 'Immediately', immediately)
      XmlUtilities.add_as_subelement(doc, root, 'Triggered', triggered)
      XmlUtilities.add_as_subelement(doc, root, 'BillingType', billing_type)
      XmlUtilities.add_as_subelement(doc, root, 'AutoActivation',
                                     auto_activation_type)
      XmlUtilities.add_array_as_subelement(
        doc, root, 'TnAttribute', tn_attributes,
        wrapping_element_name: 'TnAttributes'
      )
      XmlUtilities.add_as_subelement(doc, root, 'OverrideValidation',
                                     override_validation)
      XmlUtilities.add_as_subelement(doc, root, 'AlternateSpid', alternate_spid)
      XmlUtilities.add_as_subelement(doc, root, 'SiteId', site_id)
      XmlUtilities.add_as_subelement(doc, root, 'ActualFocDate',
                                     actual_foc_date,
                                     datetime_format: 'rfc3339')
      XmlUtilities.add_as_subelement(doc, root, 'ListOfPhoneNumbers',
                                     numbers_to_port)

      root
    end
  end
end
