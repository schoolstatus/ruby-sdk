# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # Report Model.
  class Report < BaseModel
    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :jasper_uri

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :scope

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :display_priority

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :description

    # TODO: Write general description for this method
    # @return [List of ReportParameter]
    attr_accessor :parameters

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['name'] = 'name'
      @_hash['jasper_uri'] = 'jasperUri'
      @_hash['scope'] = 'scope'
      @_hash['display_priority'] = 'displayPriority'
      @_hash['description'] = 'description'
      @_hash['parameters'] = 'parameters'
      @_hash
    end

    def initialize(id = nil,
                   name = nil,
                   jasper_uri = nil,
                   scope = nil,
                   display_priority = nil,
                   description = nil,
                   parameters = nil)
      @id = id
      @name = name
      @jasper_uri = jasper_uri
      @scope = scope
      @display_priority = display_priority
      @description = description
      @parameters = parameters
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash['id']
      name = hash['name']
      jasper_uri = hash['jasperUri']
      scope = hash['scope']
      display_priority = hash['displayPriority']
      description = hash['description']
      # Parameter is an array, so we need to iterate through it
      parameters = nil
      unless hash['parameters'].nil?
        parameters = []
        hash['parameters'].each do |structure|
          parameters << (ReportParameter.from_hash(structure) if structure)
        end
      end

      # Create object from extracted values.
      Report.new(id,
                 name,
                 jasper_uri,
                 scope,
                 display_priority,
                 description,
                 parameters)
    end

    def self.from_element(root)
      id = XmlUtilities.from_element(root, 'Id', Integer)
      name = XmlUtilities.from_element(root, 'Name', String)
      jasper_uri = XmlUtilities.from_element(root, 'JasperUri', String)
      scope = XmlUtilities.from_element(root, 'Scope', String)
      display_priority = XmlUtilities.from_element(root, 'DisplayPriority',
                                                   String)
      description = XmlUtilities.from_element(root, 'Description', String)
      parameters = XmlUtilities.from_element_to_array(
        root, 'Parameter', ReportParameter,
        wrapping_element_name: 'Parameters'
      )

      new(id,
          name,
          jasper_uri,
          scope,
          display_priority,
          description,
          parameters)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'Id', id)
      XmlUtilities.add_as_subelement(doc, root, 'Name', name)
      XmlUtilities.add_as_subelement(doc, root, 'JasperUri', jasper_uri)
      XmlUtilities.add_as_subelement(doc, root, 'Scope', scope)
      XmlUtilities.add_as_subelement(doc, root, 'DisplayPriority',
                                     display_priority)
      XmlUtilities.add_as_subelement(doc, root, 'Description', description)
      XmlUtilities.add_array_as_subelement(doc, root, 'Parameter', parameters,
                                           wrapping_element_name: 'Parameters')

      root
    end
  end
end
