# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # NumberManagementSettings Model.
  class NumberManagementSettings < BaseModel
    # TODO: Write general description for this method
    # @return [CnamDipSettings]
    attr_accessor :cnam_dip_settings

    # TODO: Write general description for this method
    # @return [LnpSettings]
    attr_accessor :lnp_settings

    # TODO: Write general description for this method
    # @return [List of Integer]
    attr_accessor :vendor_ids

    # TODO: Write general description for this method
    # @return [List of String]
    attr_accessor :countries

    # TODO: Write general description for this method
    # @return [List of Integer]
    attr_accessor :tn_type_ids

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['cnam_dip_settings'] = 'cnamDipSettings'
      @_hash['lnp_settings'] = 'lnpSettings'
      @_hash['vendor_ids'] = 'vendorIds'
      @_hash['countries'] = 'countries'
      @_hash['tn_type_ids'] = 'tnTypeIds'
      @_hash
    end

    def initialize(cnam_dip_settings = nil,
                   lnp_settings = nil,
                   vendor_ids = nil,
                   countries = nil,
                   tn_type_ids = nil)
      @cnam_dip_settings = cnam_dip_settings
      @lnp_settings = lnp_settings
      @vendor_ids = vendor_ids
      @countries = countries
      @tn_type_ids = tn_type_ids
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      cnam_dip_settings = CnamDipSettings.from_hash(hash['cnamDipSettings']) if
        hash['cnamDipSettings']
      lnp_settings = LnpSettings.from_hash(hash['lnpSettings']) if
        hash['lnpSettings']
      vendor_ids = hash['vendorIds']
      countries = hash['countries']
      tn_type_ids = hash['tnTypeIds']

      # Create object from extracted values.
      NumberManagementSettings.new(cnam_dip_settings,
                                   lnp_settings,
                                   vendor_ids,
                                   countries,
                                   tn_type_ids)
    end

    def self.from_element(root)
      cnam_dip_settings = XmlUtilities.from_element(root, 'CnamDip',
                                                    CnamDipSettings)
      lnp_settings = XmlUtilities.from_element(root, 'LNP', LnpSettings)
      vendor_ids = XmlUtilities.from_element_to_array(
        root, 'VendorId', Integer, wrapping_element_name: 'VendorIds'
      )
      countries = XmlUtilities.from_element_to_array(
        root, 'CountryTwoLetterCode', String,
        wrapping_element_name: 'Countries'
      )
      tn_type_ids = XmlUtilities.from_element_to_array(
        root, 'TnTypeId', Integer, wrapping_element_name: 'TnTypeIds'
      )

      new(cnam_dip_settings,
          lnp_settings,
          vendor_ids,
          countries,
          tn_type_ids)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'CnamDip', cnam_dip_settings)
      XmlUtilities.add_as_subelement(doc, root, 'LNP', lnp_settings)
      XmlUtilities.add_array_as_subelement(doc, root, 'VendorId', vendor_ids,
                                           wrapping_element_name: 'VendorIds')
      XmlUtilities.add_array_as_subelement(doc, root, 'CountryTwoLetterCode',
                                           countries,
                                           wrapping_element_name: 'Countries')
      XmlUtilities.add_array_as_subelement(doc, root, 'TnTypeId', tn_type_ids,
                                           wrapping_element_name: 'TnTypeIds')

      root
    end
  end
end
