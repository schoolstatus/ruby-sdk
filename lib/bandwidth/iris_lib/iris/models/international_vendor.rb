# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # InternationalVendor Model.
  class InternationalVendor < BaseModel
    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :vendor_id

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :supported

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['vendor_id'] = 'vendorId'
      @_hash['supported'] = 'supported'
      @_hash
    end

    def initialize(vendor_id = nil,
                   supported = nil)
      @vendor_id = vendor_id
      @supported = supported
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      vendor_id = hash['vendorId']
      supported = hash['supported']

      # Create object from extracted values.
      InternationalVendor.new(vendor_id,
                              supported)
    end

    def self.from_element(root)
      vendor_id = XmlUtilities.from_element(root, 'VendorId', Integer)
      supported = XmlUtilities.from_element(root, 'Supported', TrueClass)

      new(vendor_id,
          supported)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'VendorId', vendor_id)
      XmlUtilities.add_as_subelement(doc, root, 'Supported', supported)

      root
    end
  end
end
