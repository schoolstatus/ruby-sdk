# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # LegacyTerminationConfigurationPayload Model.
  class LegacyTerminationConfigurationPayload < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :customer_traffic

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :cps_queue

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :concurrent_outbound_calls

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :concurrent_bidirectional_calls

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :billing_type

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :rate_type

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :discount_percentage

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :guaranteed_termination

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['customer_traffic'] = 'customerTraffic'
      @_hash['cps_queue'] = 'cpsQueue'
      @_hash['concurrent_outbound_calls'] = 'concurrentOutboundCalls'
      @_hash['concurrent_bidirectional_calls'] =
        'concurrentBidirectionalCalls'
      @_hash['billing_type'] = 'billingType'
      @_hash['rate_type'] = 'rateType'
      @_hash['discount_percentage'] = 'discountPercentage'
      @_hash['guaranteed_termination'] = 'guaranteedTermination'
      @_hash
    end

    def initialize(customer_traffic = nil,
                   cps_queue = nil,
                   concurrent_outbound_calls = nil,
                   concurrent_bidirectional_calls = nil,
                   billing_type = nil,
                   rate_type = nil,
                   discount_percentage = nil,
                   guaranteed_termination = nil)
      @customer_traffic = customer_traffic
      @cps_queue = cps_queue
      @concurrent_outbound_calls = concurrent_outbound_calls
      @concurrent_bidirectional_calls = concurrent_bidirectional_calls
      @billing_type = billing_type
      @rate_type = rate_type
      @discount_percentage = discount_percentage
      @guaranteed_termination = guaranteed_termination
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      customer_traffic = hash['customerTraffic']
      cps_queue = hash['cpsQueue']
      concurrent_outbound_calls = hash['concurrentOutboundCalls']
      concurrent_bidirectional_calls = hash['concurrentBidirectionalCalls']
      billing_type = hash['billingType']
      rate_type = hash['rateType']
      discount_percentage = hash['discountPercentage']
      guaranteed_termination = hash['guaranteedTermination']

      # Create object from extracted values.
      LegacyTerminationConfigurationPayload.new(customer_traffic,
                                                cps_queue,
                                                concurrent_outbound_calls,
                                                concurrent_bidirectional_calls,
                                                billing_type,
                                                rate_type,
                                                discount_percentage,
                                                guaranteed_termination)
    end

    def self.from_element(root)
      customer_traffic = XmlUtilities.from_element(root,
                                                   'CustomerTrafficAllowed',
                                                   String)
      cps_queue = XmlUtilities.from_element(root, 'CpsQueue', Integer)
      concurrent_outbound_calls = XmlUtilities.from_element(
        root, 'ConcurrentOutboundCalls', Integer
      )
      concurrent_bidirectional_calls = XmlUtilities.from_element(
        root, 'ConcurrentBidirectionalCalls', Integer
      )
      billing_type = XmlUtilities.from_element(root, 'BillingType', String)
      rate_type = XmlUtilities.from_element(root, 'RateType', String)
      discount_percentage = XmlUtilities.from_element(root,
                                                      'DiscountPercentage',
                                                      Integer)
      guaranteed_termination = XmlUtilities.from_element(
        root, 'GuaranteedTermination', TrueClass
      )

      new(customer_traffic,
          cps_queue,
          concurrent_outbound_calls,
          concurrent_bidirectional_calls,
          billing_type,
          rate_type,
          discount_percentage,
          guaranteed_termination)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'CustomerTrafficAllowed',
                                     customer_traffic)
      XmlUtilities.add_as_subelement(doc, root, 'CpsQueue', cps_queue)
      XmlUtilities.add_as_subelement(doc, root, 'ConcurrentOutboundCalls',
                                     concurrent_outbound_calls)
      XmlUtilities.add_as_subelement(doc, root, 'ConcurrentBidirectionalCalls',
                                     concurrent_bidirectional_calls)
      XmlUtilities.add_as_subelement(doc, root, 'BillingType', billing_type)
      XmlUtilities.add_as_subelement(doc, root, 'RateType', rate_type)
      XmlUtilities.add_as_subelement(doc, root, 'DiscountPercentage',
                                     discount_percentage)
      XmlUtilities.add_as_subelement(doc, root, 'GuaranteedTermination',
                                     guaranteed_termination)

      root
    end
  end
end
