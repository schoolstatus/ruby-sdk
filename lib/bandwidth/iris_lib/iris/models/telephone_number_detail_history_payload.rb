# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # TelephoneNumberDetailHistoryPayload Model.
  class TelephoneNumberDetailHistoryPayload < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :city

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :lata

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :state

    # TODO: Write general description for this method
    # @return [TelephoneNumber]
    attr_accessor :telephone_number

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :country

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :tn_type

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :tier

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :vendor_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :vendor_name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :rate_center

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :status

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :account_id

    # TODO: Write general description for this method
    # @return [Site]
    attr_accessor :site

    # TODO: Write general description for this method
    # @return [SipPeer]
    attr_accessor :sip_peer

    # TODO: Write general description for this method
    # @return [List of String]
    attr_accessor :service_types_owned

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :last_modified

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :in_service_date

    # TODO: Write general description for this method
    # @return [List of String]
    attr_accessor :tn_attributes

    # TODO: Write general description for this method
    # @return [MessagingSettings]
    attr_accessor :messaging_settings

    # TODO: Write general description for this method
    # @return [TnOptions]
    attr_accessor :tn_options

    # TODO: Write general description for this method
    # @return [OriginationRoutePlan]
    attr_accessor :origination_route_plan

    # TODO: Write general description for this method
    # @return [List of HostedTelephoneNumberDetailHistory]
    attr_accessor :hosted_telephone_number_detail_histories

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['city'] = 'city'
      @_hash['lata'] = 'lata'
      @_hash['state'] = 'state'
      @_hash['telephone_number'] = 'telephoneNumber'
      @_hash['country'] = 'country'
      @_hash['tn_type'] = 'tnType'
      @_hash['tier'] = 'tier'
      @_hash['vendor_id'] = 'vendorId'
      @_hash['vendor_name'] = 'vendorName'
      @_hash['rate_center'] = 'rateCenter'
      @_hash['status'] = 'status'
      @_hash['account_id'] = 'accountId'
      @_hash['site'] = 'site'
      @_hash['sip_peer'] = 'sipPeer'
      @_hash['service_types_owned'] = 'serviceTypesOwned'
      @_hash['last_modified'] = 'lastModified'
      @_hash['in_service_date'] = 'inServiceDate'
      @_hash['tn_attributes'] = 'tnAttributes'
      @_hash['messaging_settings'] = 'messagingSettings'
      @_hash['tn_options'] = 'tnOptions'
      @_hash['origination_route_plan'] = 'originationRoutePlan'
      @_hash['hosted_telephone_number_detail_histories'] =
        'hostedTelephoneNumberDetailHistories'
      @_hash
    end

    def initialize(city = nil,
                   lata = nil,
                   state = nil,
                   telephone_number = nil,
                   country = nil,
                   tn_type = nil,
                   tier = nil,
                   vendor_id = nil,
                   vendor_name = nil,
                   rate_center = nil,
                   status = nil,
                   account_id = nil,
                   site = nil,
                   sip_peer = nil,
                   service_types_owned = nil,
                   last_modified = nil,
                   in_service_date = nil,
                   tn_attributes = nil,
                   messaging_settings = nil,
                   tn_options = nil,
                   origination_route_plan = nil,
                   hosted_telephone_number_detail_histories = nil)
      @city = city
      @lata = lata
      @state = state
      @telephone_number = telephone_number
      @country = country
      @tn_type = tn_type
      @tier = tier
      @vendor_id = vendor_id
      @vendor_name = vendor_name
      @rate_center = rate_center
      @status = status
      @account_id = account_id
      @site = site
      @sip_peer = sip_peer
      @service_types_owned = service_types_owned
      @last_modified = last_modified
      @in_service_date = in_service_date
      @tn_attributes = tn_attributes
      @messaging_settings = messaging_settings
      @tn_options = tn_options
      @origination_route_plan = origination_route_plan
      @hosted_telephone_number_detail_histories =
        hosted_telephone_number_detail_histories
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      city = hash['city']
      lata = hash['lata']
      state = hash['state']
      telephone_number = TelephoneNumber.from_hash(hash['telephoneNumber']) if
        hash['telephoneNumber']
      country = hash['country']
      tn_type = hash['tnType']
      tier = hash['tier']
      vendor_id = hash['vendorId']
      vendor_name = hash['vendorName']
      rate_center = hash['rateCenter']
      status = hash['status']
      account_id = hash['accountId']
      site = Site.from_hash(hash['site']) if hash['site']
      sip_peer = SipPeer.from_hash(hash['sipPeer']) if hash['sipPeer']
      service_types_owned = hash['serviceTypesOwned']
      last_modified = hash['lastModified']
      in_service_date = hash['inServiceDate']
      tn_attributes = hash['tnAttributes']
      if hash['messagingSettings']
        messaging_settings = MessagingSettings.from_hash(hash['messagingSettings'])
      end
      tn_options = TnOptions.from_hash(hash['tnOptions']) if hash['tnOptions']
      if hash['originationRoutePlan']
        origination_route_plan = OriginationRoutePlan.from_hash(hash['originationRoutePlan'])
      end
      # Parameter is an array, so we need to iterate through it
      hosted_telephone_number_detail_histories = nil
      unless hash['hostedTelephoneNumberDetailHistories'].nil?
        hosted_telephone_number_detail_histories = []
        hash['hostedTelephoneNumberDetailHistories'].each do |structure|
          hosted_telephone_number_detail_histories << (HostedTelephoneNumberDetailHistory.from_hash(structure) if structure)
        end
      end

      # Create object from extracted values.
      TelephoneNumberDetailHistoryPayload.new(city,
                                              lata,
                                              state,
                                              telephone_number,
                                              country,
                                              tn_type,
                                              tier,
                                              vendor_id,
                                              vendor_name,
                                              rate_center,
                                              status,
                                              account_id,
                                              site,
                                              sip_peer,
                                              service_types_owned,
                                              last_modified,
                                              in_service_date,
                                              tn_attributes,
                                              messaging_settings,
                                              tn_options,
                                              origination_route_plan,
                                              hosted_telephone_number_detail_histories)
    end

    def self.from_element(root)
      city = XmlUtilities.from_element(root, 'City', String)
      lata = XmlUtilities.from_element(root, 'Lata', Integer)
      state = XmlUtilities.from_element(root, 'State', String)
      telephone_number = XmlUtilities.from_element(root, 'FullNumber',
                                                   TelephoneNumber)
      country = XmlUtilities.from_element(root, 'Country', String)
      tn_type = XmlUtilities.from_element(root, 'TnType', String)
      tier = XmlUtilities.from_element(root, 'Tier', Integer)
      vendor_id = XmlUtilities.from_element(root, 'VendorId', Integer)
      vendor_name = XmlUtilities.from_element(root, 'VendorName', String)
      rate_center = XmlUtilities.from_element(root, 'RateCenter', String)
      status = XmlUtilities.from_element(root, 'Status', String)
      account_id = XmlUtilities.from_element(root, 'AccountId', Integer)
      site = XmlUtilities.from_element(root, 'Site', Site)
      sip_peer = XmlUtilities.from_element(root, 'SipPeer', SipPeer)
      service_types_owned = XmlUtilities.from_element_to_array(
        root, 'ServiceType', String,
        wrapping_element_name: 'ServiceTypes'
      )
      last_modified = XmlUtilities.from_element(root, 'LastModified', String)
      in_service_date = XmlUtilities.from_element(root, 'InServiceDate', String)
      tn_attributes = XmlUtilities.from_element_to_array(
        root, 'TnAttribute', String,
        wrapping_element_name: 'TnAttributes'
      )
      messaging_settings = XmlUtilities.from_element(root, 'MessagingSettings',
                                                     MessagingSettings)
      tn_options = XmlUtilities.from_element(root, 'TnOptions', TnOptions)
      origination_route_plan = XmlUtilities.from_element(root,
                                                         'OriginationRoutePlan',
                                                         OriginationRoutePlan)
      hosted_telephone_number_detail_histories = XmlUtilities.from_element_to_array(
        root, 'HostedTelephoneNumberDetail',
        HostedTelephoneNumberDetailHistory,
        wrapping_element_name: 'HostedTelephoneNumberDetails'
      )

      new(city,
          lata,
          state,
          telephone_number,
          country,
          tn_type,
          tier,
          vendor_id,
          vendor_name,
          rate_center,
          status,
          account_id,
          site,
          sip_peer,
          service_types_owned,
          last_modified,
          in_service_date,
          tn_attributes,
          messaging_settings,
          tn_options,
          origination_route_plan,
          hosted_telephone_number_detail_histories)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'City', city)
      XmlUtilities.add_as_subelement(doc, root, 'Lata', lata)
      XmlUtilities.add_as_subelement(doc, root, 'State', state)
      XmlUtilities.add_as_subelement(doc, root, 'FullNumber', telephone_number)
      XmlUtilities.add_as_subelement(doc, root, 'Country', country)
      XmlUtilities.add_as_subelement(doc, root, 'TnType', tn_type)
      XmlUtilities.add_as_subelement(doc, root, 'Tier', tier)
      XmlUtilities.add_as_subelement(doc, root, 'VendorId', vendor_id)
      XmlUtilities.add_as_subelement(doc, root, 'VendorName', vendor_name)
      XmlUtilities.add_as_subelement(doc, root, 'RateCenter', rate_center)
      XmlUtilities.add_as_subelement(doc, root, 'Status', status)
      XmlUtilities.add_as_subelement(doc, root, 'AccountId', account_id)
      XmlUtilities.add_as_subelement(doc, root, 'Site', site)
      XmlUtilities.add_as_subelement(doc, root, 'SipPeer', sip_peer)
      XmlUtilities.add_array_as_subelement(
        doc, root, 'ServiceType', service_types_owned,
        wrapping_element_name: 'ServiceTypes'
      )
      XmlUtilities.add_as_subelement(doc, root, 'LastModified', last_modified)
      XmlUtilities.add_as_subelement(doc, root, 'InServiceDate',
                                     in_service_date)
      XmlUtilities.add_array_as_subelement(
        doc, root, 'TnAttribute', tn_attributes,
        wrapping_element_name: 'TnAttributes'
      )
      XmlUtilities.add_as_subelement(doc, root, 'MessagingSettings',
                                     messaging_settings)
      XmlUtilities.add_as_subelement(doc, root, 'TnOptions', tn_options)
      XmlUtilities.add_as_subelement(doc, root, 'OriginationRoutePlan',
                                     origination_route_plan)
      XmlUtilities.add_array_as_subelement(
        doc, root, 'HostedTelephoneNumberDetail',
        hosted_telephone_number_detail_histories,
        wrapping_element_name: 'HostedTelephoneNumberDetails'
      )

      root
    end
  end
end
