# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # RoutingExceptionPrefix Model.
  class RoutingExceptionPrefix < BaseModel
    # TODO: Write general description for this method
    # @return [RoutingExceptionTypeEnum]
    attr_accessor :routing_exception_type

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :prefix

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['routing_exception_type'] = 'routingExceptionType'
      @_hash['prefix'] = 'prefix'
      @_hash
    end

    def initialize(routing_exception_type = nil,
                   prefix = nil)
      @routing_exception_type = routing_exception_type
      @prefix = prefix
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      routing_exception_type = hash['routingExceptionType']
      prefix = hash['prefix']

      # Create object from extracted values.
      RoutingExceptionPrefix.new(routing_exception_type,
                                 prefix)
    end

    def self.from_element(root)
      routing_exception_type = XmlUtilities.from_element(root,
                                                         'routingExceptionType',
                                                         String)
      prefix = XmlUtilities.from_element(root, 'prefix', String)

      new(routing_exception_type,
          prefix)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'routingExceptionType',
                                     routing_exception_type)
      XmlUtilities.add_as_subelement(doc, root, 'prefix', prefix)

      root
    end
  end
end
