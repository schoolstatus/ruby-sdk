# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # TelephoneNumber Model.
  class TelephoneNumber < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :tn_type

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :valid

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :unformatted_tn

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :region

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['tn_type'] = 'tnType'
      @_hash['valid'] = 'valid'
      @_hash['unformatted_tn'] = 'unformattedTn'
      @_hash['region'] = 'region'
      @_hash
    end

    def initialize(tn_type = nil,
                   valid = nil,
                   unformatted_tn = nil,
                   region = nil)
      @tn_type = tn_type
      @valid = valid
      @unformatted_tn = unformatted_tn
      @region = region
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      tn_type = hash['tnType']
      valid = hash['valid']
      unformatted_tn = hash['unformattedTn']
      region = hash['region']

      # Create object from extracted values.
      TelephoneNumber.new(tn_type,
                          valid,
                          unformatted_tn,
                          region)
    end

    def self.from_element(root)
      tn_type = XmlUtilities.from_element(root, 'tnType', String)
      valid = XmlUtilities.from_element(root, 'valid', TrueClass)
      unformatted_tn = XmlUtilities.from_element(root, 'TelephoneNumber',
                                                 String)
      region = XmlUtilities.from_element(root, 'region', String)

      new(tn_type,
          valid,
          unformatted_tn,
          region)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'tnType', tn_type)
      XmlUtilities.add_as_subelement(doc, root, 'valid', valid)
      XmlUtilities.add_as_subelement(doc, root, 'TelephoneNumber',
                                     unformatted_tn)
      XmlUtilities.add_as_subelement(doc, root, 'region', region)

      root
    end
  end
end
