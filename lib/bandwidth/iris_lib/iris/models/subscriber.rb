# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # Subscriber Model.
  class Subscriber < BaseModel
    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :id

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :version

    # TODO: Write general description for this method
    # @return [SubscriberType1Enum]
    attr_accessor :subscriber_type

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :business_name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :first_name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :middle_initial

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :last_name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :generic_name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :account_number

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :account_pin

    # TODO: Write general description for this method
    # @return [Address]
    attr_accessor :service_address

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :new

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['version'] = 'version'
      @_hash['subscriber_type'] = 'subscriberType'
      @_hash['business_name'] = 'businessName'
      @_hash['first_name'] = 'firstName'
      @_hash['middle_initial'] = 'middleInitial'
      @_hash['last_name'] = 'lastName'
      @_hash['generic_name'] = 'genericName'
      @_hash['account_number'] = 'accountNumber'
      @_hash['account_pin'] = 'accountPin'
      @_hash['service_address'] = 'serviceAddress'
      @_hash['new'] = 'new'
      @_hash
    end

    def initialize(id = nil,
                   version = nil,
                   subscriber_type = nil,
                   business_name = nil,
                   first_name = nil,
                   middle_initial = nil,
                   last_name = nil,
                   generic_name = nil,
                   account_number = nil,
                   account_pin = nil,
                   service_address = nil,
                   new = nil)
      @id = id
      @version = version
      @subscriber_type = subscriber_type
      @business_name = business_name
      @first_name = first_name
      @middle_initial = middle_initial
      @last_name = last_name
      @generic_name = generic_name
      @account_number = account_number
      @account_pin = account_pin
      @service_address = service_address
      @new = new
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash['id']
      version = hash['version']
      subscriber_type = hash['subscriberType']
      business_name = hash['businessName']
      first_name = hash['firstName']
      middle_initial = hash['middleInitial']
      last_name = hash['lastName']
      generic_name = hash['genericName']
      account_number = hash['accountNumber']
      account_pin = hash['accountPin']
      service_address = Address.from_hash(hash['serviceAddress']) if
        hash['serviceAddress']
      new = hash['new']

      # Create object from extracted values.
      Subscriber.new(id,
                     version,
                     subscriber_type,
                     business_name,
                     first_name,
                     middle_initial,
                     last_name,
                     generic_name,
                     account_number,
                     account_pin,
                     service_address,
                     new)
    end

    def self.from_element(root)
      id = XmlUtilities.from_element(root, 'id', Integer)
      version = XmlUtilities.from_element(root, 'version', Integer)
      subscriber_type = XmlUtilities.from_element(root, 'SubscriberType',
                                                  String)
      business_name = XmlUtilities.from_element(root, 'BusinessName', String)
      first_name = XmlUtilities.from_element(root, 'FirstName', String)
      middle_initial = XmlUtilities.from_element(root, 'MiddleInitial', String)
      last_name = XmlUtilities.from_element(root, 'LastName', String)
      generic_name = XmlUtilities.from_element(root, 'Name', String)
      account_number = XmlUtilities.from_element(root, 'AccountNumber', String)
      account_pin = XmlUtilities.from_element(root, 'PinNumber', String)
      service_address = XmlUtilities.from_element(root, 'ServiceAddress',
                                                  Address)
      new = XmlUtilities.from_element(root, 'new', TrueClass)

      new(id,
          version,
          subscriber_type,
          business_name,
          first_name,
          middle_initial,
          last_name,
          generic_name,
          account_number,
          account_pin,
          service_address,
          new)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'id', id)
      XmlUtilities.add_as_subelement(doc, root, 'version', version)
      XmlUtilities.add_as_subelement(doc, root, 'SubscriberType',
                                     subscriber_type)
      XmlUtilities.add_as_subelement(doc, root, 'BusinessName', business_name)
      XmlUtilities.add_as_subelement(doc, root, 'FirstName', first_name)
      XmlUtilities.add_as_subelement(doc, root, 'MiddleInitial', middle_initial)
      XmlUtilities.add_as_subelement(doc, root, 'LastName', last_name)
      XmlUtilities.add_as_subelement(doc, root, 'Name', generic_name)
      XmlUtilities.add_as_subelement(doc, root, 'AccountNumber', account_number)
      XmlUtilities.add_as_subelement(doc, root, 'PinNumber', account_pin)
      XmlUtilities.add_as_subelement(doc, root, 'ServiceAddress',
                                     service_address)
      XmlUtilities.add_as_subelement(doc, root, 'new', new)

      root
    end
  end
end
