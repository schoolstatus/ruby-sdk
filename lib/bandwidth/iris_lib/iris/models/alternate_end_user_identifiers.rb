# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # AlternateEndUserIdentifiers Model.
  class AlternateEndUserIdentifiers < BaseModel
    # TODO: Write general description for this method
    # @return [List of AlternateEndUserIdentifier]
    attr_accessor :identifiers

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['identifiers'] = 'identifiers'
      @_hash
    end

    def initialize(identifiers = nil)
      @identifiers = identifiers
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      # Parameter is an array, so we need to iterate through it
      identifiers = nil
      unless hash['identifiers'].nil?
        identifiers = []
        hash['identifiers'].each do |structure|
          identifiers << (AlternateEndUserIdentifier.from_hash(structure) if structure)
        end
      end

      # Create object from extracted values.
      AlternateEndUserIdentifiers.new(identifiers)
    end

    def self.from_element(root)
      identifiers = XmlUtilities.from_element_to_array(
        root, 'AlternateEndUserIdentifier',
        AlternateEndUserIdentifier
      )

      new(identifiers)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_array_as_subelement(doc, root,
                                           'AlternateEndUserIdentifier',
                                           identifiers)

      root
    end
  end
end
