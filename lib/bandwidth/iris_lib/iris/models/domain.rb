# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # Domain Model.
  class Domain < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :description

    # TODO: Write general description for this method
    # @return [List of String]
    attr_accessor :settings

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['name'] = 'name'
      @_hash['description'] = 'description'
      @_hash['settings'] = 'settings'
      @_hash
    end

    def initialize(name = nil,
                   description = nil,
                   settings = nil)
      @name = name
      @description = description
      @settings = settings
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      name = hash['name']
      description = hash['description']
      settings = hash['settings']

      # Create object from extracted values.
      Domain.new(name,
                 description,
                 settings)
    end

    def self.from_element(root)
      name = XmlUtilities.from_element(root, 'DomainName', String)
      description = XmlUtilities.from_element(root, 'DomainDescription', String)
      settings = XmlUtilities.from_element_to_array(
        root, 'DomainSetting', String,
        wrapping_element_name: 'DomainSettings'
      )

      new(name,
          description,
          settings)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'DomainName', name)
      XmlUtilities.add_as_subelement(doc, root, 'DomainDescription',
                                     description)
      XmlUtilities.add_array_as_subelement(
        doc, root, 'DomainSetting', settings,
        wrapping_element_name: 'DomainSettings'
      )

      root
    end
  end
end
