# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # Csr Model.
  class Csr < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :customer_order_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :working_or_billing_telephone_number

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :working_telephone_number

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :billing_telephone_number

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :customer_name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :authorizing_person_name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :account_number

    # TODO: Write general description for this method
    # @return [List of String]
    attr_accessor :working_telephone_numbers_on_account

    # TODO: Write general description for this method
    # @return [CsrServiceAddress]
    attr_accessor :service_address

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :account_telephone_number

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :end_user_name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :authorizing_user_name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :customer_code

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :end_user_pin

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :end_user_password

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :address_line_one

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :city

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :state

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :zip_code

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :type_of_service

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :status

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['customer_order_id'] = 'customerOrderId'
      @_hash['working_or_billing_telephone_number'] =
        'workingOrBillingTelephoneNumber'
      @_hash['working_telephone_number'] = 'workingTelephoneNumber'
      @_hash['billing_telephone_number'] = 'billingTelephoneNumber'
      @_hash['customer_name'] = 'customerName'
      @_hash['authorizing_person_name'] = 'authorizingPersonName'
      @_hash['account_number'] = 'accountNumber'
      @_hash['working_telephone_numbers_on_account'] =
        'workingTelephoneNumbersOnAccount'
      @_hash['service_address'] = 'serviceAddress'
      @_hash['account_telephone_number'] = 'accountTelephoneNumber'
      @_hash['end_user_name'] = 'endUserName'
      @_hash['authorizing_user_name'] = 'authorizingUserName'
      @_hash['customer_code'] = 'customerCode'
      @_hash['end_user_pin'] = 'endUserPIN'
      @_hash['end_user_password'] = 'endUserPassword'
      @_hash['address_line_one'] = 'addressLineOne'
      @_hash['city'] = 'city'
      @_hash['state'] = 'state'
      @_hash['zip_code'] = 'zipCode'
      @_hash['type_of_service'] = 'typeOfService'
      @_hash['status'] = 'status'
      @_hash
    end

    def initialize(customer_order_id = nil,
                   working_or_billing_telephone_number = nil,
                   working_telephone_number = nil,
                   billing_telephone_number = nil,
                   customer_name = nil,
                   authorizing_person_name = nil,
                   account_number = nil,
                   working_telephone_numbers_on_account = nil,
                   service_address = nil,
                   account_telephone_number = nil,
                   end_user_name = nil,
                   authorizing_user_name = nil,
                   customer_code = nil,
                   end_user_pin = nil,
                   end_user_password = nil,
                   address_line_one = nil,
                   city = nil,
                   state = nil,
                   zip_code = nil,
                   type_of_service = nil,
                   status = nil)
      @customer_order_id = customer_order_id
      @working_or_billing_telephone_number =
        working_or_billing_telephone_number
      @working_telephone_number = working_telephone_number
      @billing_telephone_number = billing_telephone_number
      @customer_name = customer_name
      @authorizing_person_name = authorizing_person_name
      @account_number = account_number
      @working_telephone_numbers_on_account =
        working_telephone_numbers_on_account
      @service_address = service_address
      @account_telephone_number = account_telephone_number
      @end_user_name = end_user_name
      @authorizing_user_name = authorizing_user_name
      @customer_code = customer_code
      @end_user_pin = end_user_pin
      @end_user_password = end_user_password
      @address_line_one = address_line_one
      @city = city
      @state = state
      @zip_code = zip_code
      @type_of_service = type_of_service
      @status = status
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      customer_order_id = hash['customerOrderId']
      working_or_billing_telephone_number =
        hash['workingOrBillingTelephoneNumber']
      working_telephone_number = hash['workingTelephoneNumber']
      billing_telephone_number = hash['billingTelephoneNumber']
      customer_name = hash['customerName']
      authorizing_person_name = hash['authorizingPersonName']
      account_number = hash['accountNumber']
      working_telephone_numbers_on_account =
        hash['workingTelephoneNumbersOnAccount']
      service_address = CsrServiceAddress.from_hash(hash['serviceAddress']) if
        hash['serviceAddress']
      account_telephone_number = hash['accountTelephoneNumber']
      end_user_name = hash['endUserName']
      authorizing_user_name = hash['authorizingUserName']
      customer_code = hash['customerCode']
      end_user_pin = hash['endUserPIN']
      end_user_password = hash['endUserPassword']
      address_line_one = hash['addressLineOne']
      city = hash['city']
      state = hash['state']
      zip_code = hash['zipCode']
      type_of_service = hash['typeOfService']
      status = hash['status']

      # Create object from extracted values.
      Csr.new(customer_order_id,
              working_or_billing_telephone_number,
              working_telephone_number,
              billing_telephone_number,
              customer_name,
              authorizing_person_name,
              account_number,
              working_telephone_numbers_on_account,
              service_address,
              account_telephone_number,
              end_user_name,
              authorizing_user_name,
              customer_code,
              end_user_pin,
              end_user_password,
              address_line_one,
              city,
              state,
              zip_code,
              type_of_service,
              status)
    end

    def self.from_element(root)
      customer_order_id = XmlUtilities.from_element(root, 'CustomerOrderId',
                                                    String)
      working_or_billing_telephone_number = XmlUtilities.from_element(
        root, 'WorkingOrBillingTelephoneNumber', String
      )
      working_telephone_number = XmlUtilities.from_element(
        root, 'WorkingTelephoneNumber', String
      )
      billing_telephone_number = XmlUtilities.from_element(
        root, 'BillingTelephoneNumber', String
      )
      customer_name = XmlUtilities.from_element(root, 'CustomerName', String)
      authorizing_person_name = XmlUtilities.from_element(
        root, 'AuthorizingPersonName', String
      )
      account_number = XmlUtilities.from_element(root, 'AccountNumber', String)
      working_telephone_numbers_on_account = XmlUtilities.from_element_to_array(
        root, 'TelephoneNumber', String,
        wrapping_element_name: 'WorkingTelephoneNumbersOnAccount'
      )
      service_address = XmlUtilities.from_element(root, 'ServiceAddress',
                                                  CsrServiceAddress)
      account_telephone_number = XmlUtilities.from_element(
        root, 'AccountTelephoneNumber', String
      )
      end_user_name = XmlUtilities.from_element(root, 'EndUserName', String)
      authorizing_user_name = XmlUtilities.from_element(root,
                                                        'AuthorizingUserName',
                                                        String)
      customer_code = XmlUtilities.from_element(root, 'CustomerCode', String)
      end_user_pin = XmlUtilities.from_element(root, 'EndUserPIN', String)
      end_user_password = XmlUtilities.from_element(root, 'EndUserPassword',
                                                    String)
      address_line_one = XmlUtilities.from_element(root, 'AddressLine1', String)
      city = XmlUtilities.from_element(root, 'City', String)
      state = XmlUtilities.from_element(root, 'State', String)
      zip_code = XmlUtilities.from_element(root, 'ZIPCode', String)
      type_of_service = XmlUtilities.from_element(root, 'TypeOfService', String)
      status = XmlUtilities.from_element(root, 'Status', String)

      new(customer_order_id,
          working_or_billing_telephone_number,
          working_telephone_number,
          billing_telephone_number,
          customer_name,
          authorizing_person_name,
          account_number,
          working_telephone_numbers_on_account,
          service_address,
          account_telephone_number,
          end_user_name,
          authorizing_user_name,
          customer_code,
          end_user_pin,
          end_user_password,
          address_line_one,
          city,
          state,
          zip_code,
          type_of_service,
          status)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'CustomerOrderId',
                                     customer_order_id)
      XmlUtilities.add_as_subelement(doc, root,
                                     'WorkingOrBillingTelephoneNumber',
                                     working_or_billing_telephone_number)
      XmlUtilities.add_as_subelement(doc, root, 'WorkingTelephoneNumber',
                                     working_telephone_number)
      XmlUtilities.add_as_subelement(doc, root, 'BillingTelephoneNumber',
                                     billing_telephone_number)
      XmlUtilities.add_as_subelement(doc, root, 'CustomerName', customer_name)
      XmlUtilities.add_as_subelement(doc, root, 'AuthorizingPersonName',
                                     authorizing_person_name)
      XmlUtilities.add_as_subelement(doc, root, 'AccountNumber', account_number)
      XmlUtilities.add_array_as_subelement(
        doc, root, 'TelephoneNumber',
        working_telephone_numbers_on_account,
        wrapping_element_name: 'WorkingTelephoneNumbersOnAccount'
      )
      XmlUtilities.add_as_subelement(doc, root, 'ServiceAddress',
                                     service_address)
      XmlUtilities.add_as_subelement(doc, root, 'AccountTelephoneNumber',
                                     account_telephone_number)
      XmlUtilities.add_as_subelement(doc, root, 'EndUserName', end_user_name)
      XmlUtilities.add_as_subelement(doc, root, 'AuthorizingUserName',
                                     authorizing_user_name)
      XmlUtilities.add_as_subelement(doc, root, 'CustomerCode', customer_code)
      XmlUtilities.add_as_subelement(doc, root, 'EndUserPIN', end_user_pin)
      XmlUtilities.add_as_subelement(doc, root, 'EndUserPassword',
                                     end_user_password)
      XmlUtilities.add_as_subelement(doc, root, 'AddressLine1',
                                     address_line_one)
      XmlUtilities.add_as_subelement(doc, root, 'City', city)
      XmlUtilities.add_as_subelement(doc, root, 'State', state)
      XmlUtilities.add_as_subelement(doc, root, 'ZIPCode', zip_code)
      XmlUtilities.add_as_subelement(doc, root, 'TypeOfService',
                                     type_of_service)
      XmlUtilities.add_as_subelement(doc, root, 'Status', status)

      root
    end
  end
end
