# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # UserActivityEventDetails Model.
  class UserActivityEventDetails < BaseModel
    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :id

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :version

    # TODO: Write general description for this method
    # @return [UserActivityEvent]
    attr_accessor :user_activity_event

    # TODO: Write general description for this method
    # @return [LdapUser]
    attr_accessor :user_before_activity_event

    # TODO: Write general description for this method
    # @return [LdapUser]
    attr_accessor :user_after_activity_event

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :user_before_change_xml

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :user_before_change_from_xml

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :user_after_change_xml

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :user_after_change_from_xml

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :new

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['version'] = 'version'
      @_hash['user_activity_event'] = 'userActivityEvent'
      @_hash['user_before_activity_event'] = 'userBeforeActivityEvent'
      @_hash['user_after_activity_event'] = 'userAfterActivityEvent'
      @_hash['user_before_change_xml'] = 'userBeforeChangeXml'
      @_hash['user_before_change_from_xml'] = 'userBeforeChangeFromXml'
      @_hash['user_after_change_xml'] = 'userAfterChangeXml'
      @_hash['user_after_change_from_xml'] = 'userAfterChangeFromXml'
      @_hash['new'] = 'new'
      @_hash
    end

    def initialize(id = nil,
                   version = nil,
                   user_activity_event = nil,
                   user_before_activity_event = nil,
                   user_after_activity_event = nil,
                   user_before_change_xml = nil,
                   user_before_change_from_xml = nil,
                   user_after_change_xml = nil,
                   user_after_change_from_xml = nil,
                   new = nil)
      @id = id
      @version = version
      @user_activity_event = user_activity_event
      @user_before_activity_event = user_before_activity_event
      @user_after_activity_event = user_after_activity_event
      @user_before_change_xml = user_before_change_xml
      @user_before_change_from_xml = user_before_change_from_xml
      @user_after_change_xml = user_after_change_xml
      @user_after_change_from_xml = user_after_change_from_xml
      @new = new
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash['id']
      version = hash['version']
      if hash['userActivityEvent']
        user_activity_event = UserActivityEvent.from_hash(hash['userActivityEvent'])
      end
      if hash['userBeforeActivityEvent']
        user_before_activity_event = LdapUser.from_hash(hash['userBeforeActivityEvent'])
      end
      if hash['userAfterActivityEvent']
        user_after_activity_event = LdapUser.from_hash(hash['userAfterActivityEvent'])
      end
      user_before_change_xml = hash['userBeforeChangeXml']
      user_before_change_from_xml = hash['userBeforeChangeFromXml']
      user_after_change_xml = hash['userAfterChangeXml']
      user_after_change_from_xml = hash['userAfterChangeFromXml']
      new = hash['new']

      # Create object from extracted values.
      UserActivityEventDetails.new(id,
                                   version,
                                   user_activity_event,
                                   user_before_activity_event,
                                   user_after_activity_event,
                                   user_before_change_xml,
                                   user_before_change_from_xml,
                                   user_after_change_xml,
                                   user_after_change_from_xml,
                                   new)
    end

    def self.from_element(root)
      id = XmlUtilities.from_element(root, 'id', Integer)
      version = XmlUtilities.from_element(root, 'version', Integer)
      user_activity_event = XmlUtilities.from_element(root, 'UserEvent',
                                                      UserActivityEvent)
      user_before_activity_event = XmlUtilities.from_element(root,
                                                             'BeforeChanges',
                                                             LdapUser)
      user_after_activity_event = XmlUtilities.from_element(root,
                                                            'AfterChanges',
                                                            LdapUser)
      user_before_change_xml = XmlUtilities.from_element(root,
                                                         'userBeforeChangeXml',
                                                         String)
      user_before_change_from_xml = XmlUtilities.from_element(
        root, 'userBeforeChangeFromXml', String
      )
      user_after_change_xml = XmlUtilities.from_element(root,
                                                        'userAfterChangeXml',
                                                        String)
      user_after_change_from_xml = XmlUtilities.from_element(
        root, 'userAfterChangeFromXml', String
      )
      new = XmlUtilities.from_element(root, 'new', TrueClass)

      new(id,
          version,
          user_activity_event,
          user_before_activity_event,
          user_after_activity_event,
          user_before_change_xml,
          user_before_change_from_xml,
          user_after_change_xml,
          user_after_change_from_xml,
          new)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'id', id)
      XmlUtilities.add_as_subelement(doc, root, 'version', version)
      XmlUtilities.add_as_subelement(doc, root, 'UserEvent',
                                     user_activity_event)
      XmlUtilities.add_as_subelement(doc, root, 'BeforeChanges',
                                     user_before_activity_event)
      XmlUtilities.add_as_subelement(doc, root, 'AfterChanges',
                                     user_after_activity_event)
      XmlUtilities.add_as_subelement(doc, root, 'userBeforeChangeXml',
                                     user_before_change_xml)
      XmlUtilities.add_as_subelement(doc, root, 'userBeforeChangeFromXml',
                                     user_before_change_from_xml)
      XmlUtilities.add_as_subelement(doc, root, 'userAfterChangeXml',
                                     user_after_change_xml)
      XmlUtilities.add_as_subelement(doc, root, 'userAfterChangeFromXml',
                                     user_after_change_from_xml)
      XmlUtilities.add_as_subelement(doc, root, 'new', new)

      root
    end
  end
end
