# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # TrunkGroup Model.
  class TrunkGroup < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :status

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :sbc_node_group

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :sbc_zone

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['name'] = 'name'
      @_hash['status'] = 'status'
      @_hash['sbc_node_group'] = 'sbcNodeGroup'
      @_hash['sbc_zone'] = 'sbcZone'
      @_hash
    end

    def initialize(id = nil,
                   name = nil,
                   status = nil,
                   sbc_node_group = nil,
                   sbc_zone = nil)
      @id = id
      @name = name
      @status = status
      @sbc_node_group = sbc_node_group
      @sbc_zone = sbc_zone
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash['id']
      name = hash['name']
      status = hash['status']
      sbc_node_group = hash['sbcNodeGroup']
      sbc_zone = hash['sbcZone']

      # Create object from extracted values.
      TrunkGroup.new(id,
                     name,
                     status,
                     sbc_node_group,
                     sbc_zone)
    end

    def self.from_element(root)
      id = XmlUtilities.from_element(root, 'Id', String)
      name = XmlUtilities.from_element(root, 'Name', String)
      status = XmlUtilities.from_element(root, 'Status', String)
      sbc_node_group = XmlUtilities.from_element(root, 'SBCNodeGroup', String)
      sbc_zone = XmlUtilities.from_element(root, 'SBCZone', String)

      new(id,
          name,
          status,
          sbc_node_group,
          sbc_zone)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'Id', id)
      XmlUtilities.add_as_subelement(doc, root, 'Name', name)
      XmlUtilities.add_as_subelement(doc, root, 'Status', status)
      XmlUtilities.add_as_subelement(doc, root, 'SBCNodeGroup', sbc_node_group)
      XmlUtilities.add_as_subelement(doc, root, 'SBCZone', sbc_zone)

      root
    end
  end
end
