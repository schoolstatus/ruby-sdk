# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # Note Model.
  class Note < BaseModel
    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :last_modified_by

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :description

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :last_modified_date

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :internal

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['last_modified_by'] = 'lastModifiedBy'
      @_hash['description'] = 'description'
      @_hash['last_modified_date'] = 'lastModifiedDate'
      @_hash['internal'] = 'internal'
      @_hash
    end

    def initialize(id = nil,
                   last_modified_by = nil,
                   description = nil,
                   last_modified_date = nil,
                   internal = nil)
      @id = id
      @last_modified_by = last_modified_by
      @description = description
      @last_modified_date = last_modified_date
      @internal = internal
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash['id']
      last_modified_by = hash['lastModifiedBy']
      description = hash['description']
      last_modified_date = hash['lastModifiedDate']
      internal = hash['internal']

      # Create object from extracted values.
      Note.new(id,
               last_modified_by,
               description,
               last_modified_date,
               internal)
    end

    def self.from_element(root)
      id = XmlUtilities.from_element(root, 'Id', Integer)
      last_modified_by = XmlUtilities.from_element(root, 'UserId', String)
      description = XmlUtilities.from_element(root, 'Description', String)
      last_modified_date = XmlUtilities.from_element(root, 'LastDateModifier',
                                                     String)
      internal = XmlUtilities.from_element(root, 'Internal', TrueClass)

      new(id,
          last_modified_by,
          description,
          last_modified_date,
          internal)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'Id', id)
      XmlUtilities.add_as_subelement(doc, root, 'UserId', last_modified_by)
      XmlUtilities.add_as_subelement(doc, root, 'Description', description)
      XmlUtilities.add_as_subelement(doc, root, 'LastDateModifier',
                                     last_modified_date)
      XmlUtilities.add_as_subelement(doc, root, 'Internal', internal)

      root
    end
  end
end
