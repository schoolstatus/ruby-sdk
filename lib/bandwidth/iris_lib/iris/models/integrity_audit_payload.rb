# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # IntegrityAuditPayload Model.
  class IntegrityAuditPayload < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :range_start

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :chunk_size

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :chunks_number

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['range_start'] = 'rangeStart'
      @_hash['chunk_size'] = 'chunkSize'
      @_hash['chunks_number'] = 'chunksNumber'
      @_hash
    end

    def initialize(range_start = nil,
                   chunk_size = nil,
                   chunks_number = nil)
      @range_start = range_start
      @chunk_size = chunk_size
      @chunks_number = chunks_number
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      range_start = hash['rangeStart']
      chunk_size = hash['chunkSize']
      chunks_number = hash['chunksNumber']

      # Create object from extracted values.
      IntegrityAuditPayload.new(range_start,
                                chunk_size,
                                chunks_number)
    end

    def self.from_element(root)
      range_start = XmlUtilities.from_element(root, 'RangeStart', String)
      chunk_size = XmlUtilities.from_element(root, 'ChunkSize', String)
      chunks_number = XmlUtilities.from_element(root, 'ChunksNumber', String)

      new(range_start,
          chunk_size,
          chunks_number)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'RangeStart', range_start)
      XmlUtilities.add_as_subelement(doc, root, 'ChunkSize', chunk_size)
      XmlUtilities.add_as_subelement(doc, root, 'ChunksNumber', chunks_number)

      root
    end
  end
end
