# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # SipPeerGatewayAttribute Model.
  class SipPeerGatewayAttribute < BaseModel
    # TODO: Write general description for this method
    # @return [Long]
    attr_accessor :gateway_id

    # TODO: Write general description for this method
    # @return [TerminationAttribute]
    attr_accessor :attribute

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['gateway_id'] = 'gatewayId'
      @_hash['attribute'] = 'attribute'
      @_hash
    end

    def initialize(gateway_id = nil,
                   attribute = nil)
      @gateway_id = gateway_id
      @attribute = attribute
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      gateway_id = hash['gatewayId']
      attribute = TerminationAttribute.from_hash(hash['attribute']) if
        hash['attribute']

      # Create object from extracted values.
      SipPeerGatewayAttribute.new(gateway_id,
                                  attribute)
    end

    def self.from_element(root)
      gateway_id = XmlUtilities.from_element(root, 'GatewayId', Integer)
      attribute = XmlUtilities.from_element(root, 'GatewayAttribute',
                                            TerminationAttribute)

      new(gateway_id,
          attribute)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'GatewayId', gateway_id)
      XmlUtilities.add_as_subelement(doc, root, 'GatewayAttribute', attribute)

      root
    end
  end
end
