# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # ApplicationPayload Model.
  class ApplicationPayload < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :application_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :service_type

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :application_name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :callback_url

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :msg_callback_url

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :call_initiated_callback_url

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :call_initiated_method

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :call_status_callback_url

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :call_status_method

    # TODO: Write general description for this method
    # @return [CallbackCreds]
    attr_accessor :callback_creds

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :call_initiated_fallback_url

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :call_initiated_fallback_method

    # TODO: Write general description for this method
    # @return [CallbackCreds]
    attr_accessor :call_initiated_fallback_creds

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :callback_timeout

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['application_id'] = 'applicationId'
      @_hash['service_type'] = 'serviceType'
      @_hash['application_name'] = 'applicationName'
      @_hash['callback_url'] = 'callbackUrl'
      @_hash['msg_callback_url'] = 'msgCallbackUrl'
      @_hash['call_initiated_callback_url'] = 'callInitiatedCallbackUrl'
      @_hash['call_initiated_method'] = 'callInitiatedMethod'
      @_hash['call_status_callback_url'] = 'callStatusCallbackUrl'
      @_hash['call_status_method'] = 'callStatusMethod'
      @_hash['callback_creds'] = 'callbackCreds'
      @_hash['call_initiated_fallback_url'] = 'callInitiatedFallbackUrl'
      @_hash['call_initiated_fallback_method'] = 'callInitiatedFallbackMethod'
      @_hash['call_initiated_fallback_creds'] = 'callInitiatedFallbackCreds'
      @_hash['callback_timeout'] = 'callbackTimeout'
      @_hash
    end

    def initialize(application_id = nil,
                   service_type = nil,
                   application_name = nil,
                   callback_url = nil,
                   msg_callback_url = nil,
                   call_initiated_callback_url = nil,
                   call_initiated_method = nil,
                   call_status_callback_url = nil,
                   call_status_method = nil,
                   callback_creds = nil,
                   call_initiated_fallback_url = nil,
                   call_initiated_fallback_method = nil,
                   call_initiated_fallback_creds = nil,
                   callback_timeout = nil)
      @application_id = application_id
      @service_type = service_type
      @application_name = application_name
      @callback_url = callback_url
      @msg_callback_url = msg_callback_url
      @call_initiated_callback_url = call_initiated_callback_url
      @call_initiated_method = call_initiated_method
      @call_status_callback_url = call_status_callback_url
      @call_status_method = call_status_method
      @callback_creds = callback_creds
      @call_initiated_fallback_url = call_initiated_fallback_url
      @call_initiated_fallback_method = call_initiated_fallback_method
      @call_initiated_fallback_creds = call_initiated_fallback_creds
      @callback_timeout = callback_timeout
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      application_id = hash['applicationId']
      service_type = hash['serviceType']
      application_name = hash['applicationName']
      callback_url = hash['callbackUrl']
      msg_callback_url = hash['msgCallbackUrl']
      call_initiated_callback_url = hash['callInitiatedCallbackUrl']
      call_initiated_method = hash['callInitiatedMethod']
      call_status_callback_url = hash['callStatusCallbackUrl']
      call_status_method = hash['callStatusMethod']
      callback_creds = CallbackCreds.from_hash(hash['callbackCreds']) if
        hash['callbackCreds']
      call_initiated_fallback_url = hash['callInitiatedFallbackUrl']
      call_initiated_fallback_method = hash['callInitiatedFallbackMethod']
      if hash['callInitiatedFallbackCreds']
        call_initiated_fallback_creds = CallbackCreds.from_hash(hash['callInitiatedFallbackCreds'])
      end
      callback_timeout = hash['callbackTimeout']

      # Create object from extracted values.
      ApplicationPayload.new(application_id,
                             service_type,
                             application_name,
                             callback_url,
                             msg_callback_url,
                             call_initiated_callback_url,
                             call_initiated_method,
                             call_status_callback_url,
                             call_status_method,
                             callback_creds,
                             call_initiated_fallback_url,
                             call_initiated_fallback_method,
                             call_initiated_fallback_creds,
                             callback_timeout)
    end

    def self.from_element(root)
      application_id = XmlUtilities.from_element(root, 'ApplicationId', String)
      service_type = XmlUtilities.from_element(root, 'ServiceType', String)
      application_name = XmlUtilities.from_element(root, 'AppName', String)
      callback_url = XmlUtilities.from_element(root, 'CallbackUrl', String)
      msg_callback_url = XmlUtilities.from_element(root, 'MsgCallbackUrl',
                                                   String)
      call_initiated_callback_url = XmlUtilities.from_element(
        root, 'CallInitiatedCallbackUrl', String
      )
      call_initiated_method = XmlUtilities.from_element(root,
                                                        'CallInitiatedMethod',
                                                        String)
      call_status_callback_url = XmlUtilities.from_element(
        root, 'CallStatusCallbackUrl', String
      )
      call_status_method = XmlUtilities.from_element(root, 'CallStatusMethod',
                                                     String)
      callback_creds = XmlUtilities.from_element(root, 'CallbackCreds',
                                                 CallbackCreds)
      call_initiated_fallback_url = XmlUtilities.from_element(
        root, 'CallInitiatedFallbackUrl', String
      )
      call_initiated_fallback_method = XmlUtilities.from_element(
        root, 'CallInitiatedFallbackMethod', String
      )
      call_initiated_fallback_creds = XmlUtilities.from_element(
        root, 'CallInitiatedFallbackCreds', CallbackCreds
      )
      callback_timeout = XmlUtilities.from_element(root, 'CallbackTimeout',
                                                   String)

      new(application_id,
          service_type,
          application_name,
          callback_url,
          msg_callback_url,
          call_initiated_callback_url,
          call_initiated_method,
          call_status_callback_url,
          call_status_method,
          callback_creds,
          call_initiated_fallback_url,
          call_initiated_fallback_method,
          call_initiated_fallback_creds,
          callback_timeout)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'ApplicationId', application_id)
      XmlUtilities.add_as_subelement(doc, root, 'ServiceType', service_type)
      XmlUtilities.add_as_subelement(doc, root, 'AppName', application_name)
      XmlUtilities.add_as_subelement(doc, root, 'CallbackUrl', callback_url)
      XmlUtilities.add_as_subelement(doc, root, 'MsgCallbackUrl',
                                     msg_callback_url)
      XmlUtilities.add_as_subelement(doc, root, 'CallInitiatedCallbackUrl',
                                     call_initiated_callback_url)
      XmlUtilities.add_as_subelement(doc, root, 'CallInitiatedMethod',
                                     call_initiated_method)
      XmlUtilities.add_as_subelement(doc, root, 'CallStatusCallbackUrl',
                                     call_status_callback_url)
      XmlUtilities.add_as_subelement(doc, root, 'CallStatusMethod',
                                     call_status_method)
      XmlUtilities.add_as_subelement(doc, root, 'CallbackCreds', callback_creds)
      XmlUtilities.add_as_subelement(doc, root, 'CallInitiatedFallbackUrl',
                                     call_initiated_fallback_url)
      XmlUtilities.add_as_subelement(doc, root, 'CallInitiatedFallbackMethod',
                                     call_initiated_fallback_method)
      XmlUtilities.add_as_subelement(doc, root, 'CallInitiatedFallbackCreds',
                                     call_initiated_fallback_creds)
      XmlUtilities.add_as_subelement(doc, root, 'CallbackTimeout',
                                     callback_timeout)

      root
    end
  end
end
