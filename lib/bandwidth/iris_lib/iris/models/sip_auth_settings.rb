# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # SipAuthSettings Model.
  class SipAuthSettings < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :realm

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :default_group_name

    # TODO: Write general description for this method
    # @return [SipAuthSbc]
    attr_accessor :sbc

    # TODO: Write general description for this method
    # @return [List of SipAuthDnsRecord]
    attr_accessor :dns_records

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['realm'] = 'realm'
      @_hash['default_group_name'] = 'defaultGroupName'
      @_hash['sbc'] = 'sbc'
      @_hash['dns_records'] = 'dnsRecords'
      @_hash
    end

    def initialize(realm = nil,
                   default_group_name = nil,
                   sbc = nil,
                   dns_records = nil)
      @realm = realm
      @default_group_name = default_group_name
      @sbc = sbc
      @dns_records = dns_records
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      realm = hash['realm']
      default_group_name = hash['defaultGroupName']
      sbc = SipAuthSbc.from_hash(hash['sbc']) if hash['sbc']
      # Parameter is an array, so we need to iterate through it
      dns_records = nil
      unless hash['dnsRecords'].nil?
        dns_records = []
        hash['dnsRecords'].each do |structure|
          dns_records << (SipAuthDnsRecord.from_hash(structure) if structure)
        end
      end

      # Create object from extracted values.
      SipAuthSettings.new(realm,
                          default_group_name,
                          sbc,
                          dns_records)
    end

    def self.from_element(root)
      realm = XmlUtilities.from_element(root, 'Realm', String)
      default_group_name = XmlUtilities.from_element(root, 'DefaultGroupName',
                                                     String)
      sbc = XmlUtilities.from_element(root, 'SBC', SipAuthSbc)
      dns_records = XmlUtilities.from_element_to_array(
        root, 'SipAuthDnsRecord', SipAuthDnsRecord,
        wrapping_element_name: 'DNSRecords'
      )

      new(realm,
          default_group_name,
          sbc,
          dns_records)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'Realm', realm)
      XmlUtilities.add_as_subelement(doc, root, 'DefaultGroupName',
                                     default_group_name)
      XmlUtilities.add_as_subelement(doc, root, 'SBC', sbc)
      XmlUtilities.add_array_as_subelement(doc, root, 'SipAuthDnsRecord',
                                           dns_records,
                                           wrapping_element_name: 'DNSRecords')

      root
    end
  end
end
