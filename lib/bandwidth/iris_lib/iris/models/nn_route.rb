# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # NnRoute Model.
  class NnRoute < BaseModel
    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :nn_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :espid

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :delivery_network

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :traffic_type

    # TODO: Write general description for this method
    # @return [List of String]
    attr_accessor :provisioner_ids

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['nn_id'] = 'nnId'
      @_hash['espid'] = 'espid'
      @_hash['delivery_network'] = 'deliveryNetwork'
      @_hash['name'] = 'name'
      @_hash['traffic_type'] = 'trafficType'
      @_hash['provisioner_ids'] = 'provisionerIds'
      @_hash
    end

    def initialize(nn_id = nil,
                   espid = nil,
                   delivery_network = nil,
                   name = nil,
                   traffic_type = nil,
                   provisioner_ids = nil)
      @nn_id = nn_id
      @espid = espid
      @delivery_network = delivery_network
      @name = name
      @traffic_type = traffic_type
      @provisioner_ids = provisioner_ids
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      nn_id = hash['nnId']
      espid = hash['espid']
      delivery_network = hash['deliveryNetwork']
      name = hash['name']
      traffic_type = hash['trafficType']
      provisioner_ids = hash['provisionerIds']

      # Create object from extracted values.
      NnRoute.new(nn_id,
                  espid,
                  delivery_network,
                  name,
                  traffic_type,
                  provisioner_ids)
    end

    def self.from_element(root)
      nn_id = XmlUtilities.from_element(root, 'Nnid', Integer)
      espid = XmlUtilities.from_element(root, 'Espid', String)
      delivery_network = XmlUtilities.from_element(root, 'DeliveryNetwork',
                                                   String)
      name = XmlUtilities.from_element(root, 'Name', String)
      traffic_type = XmlUtilities.from_element(root, 'TrafficType', String)
      provisioner_ids = XmlUtilities.from_element_to_array(
        root, 'ProvisionerId', String,
        wrapping_element_name: 'ProvisionerIds'
      )

      new(nn_id,
          espid,
          delivery_network,
          name,
          traffic_type,
          provisioner_ids)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'Nnid', nn_id)
      XmlUtilities.add_as_subelement(doc, root, 'Espid', espid)
      XmlUtilities.add_as_subelement(doc, root, 'DeliveryNetwork',
                                     delivery_network)
      XmlUtilities.add_as_subelement(doc, root, 'Name', name)
      XmlUtilities.add_as_subelement(doc, root, 'TrafficType', traffic_type)
      XmlUtilities.add_array_as_subelement(
        doc, root, 'ProvisionerId', provisioner_ids,
        wrapping_element_name: 'ProvisionerIds'
      )

      root
    end
  end
end
