# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # TerminationAttributeMetadata Model.
  class TerminationAttributeMetadata < BaseModel
    # TODO: Write general description for this method
    # @return [Long]
    attr_accessor :id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :name

    # TODO: Write general description for this method
    # @return [ValidationTypeEnum]
    attr_accessor :validation_type

    # TODO: Write general description for this method
    # @return [List of AttributeProvisionTypeEnum]
    attr_accessor :attribute_provision_types

    # TODO: Write general description for this method
    # @return [OriginEnum]
    attr_accessor :origin

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :repeatable

    # TODO: Write general description for this method
    # @return [List of String]
    attr_accessor :values

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['name'] = 'name'
      @_hash['validation_type'] = 'validationType'
      @_hash['attribute_provision_types'] = 'attributeProvisionTypes'
      @_hash['origin'] = 'origin'
      @_hash['repeatable'] = 'repeatable'
      @_hash['values'] = 'values'
      @_hash
    end

    def initialize(id = nil,
                   name = nil,
                   validation_type = nil,
                   attribute_provision_types = nil,
                   origin = nil,
                   repeatable = nil,
                   values = nil)
      @id = id
      @name = name
      @validation_type = validation_type
      @attribute_provision_types = attribute_provision_types
      @origin = origin
      @repeatable = repeatable
      @values = values
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash['id']
      name = hash['name']
      validation_type = hash['validationType']
      attribute_provision_types = hash['attributeProvisionTypes']
      origin = hash['origin']
      repeatable = hash['repeatable']
      values = hash['values']

      # Create object from extracted values.
      TerminationAttributeMetadata.new(id,
                                       name,
                                       validation_type,
                                       attribute_provision_types,
                                       origin,
                                       repeatable,
                                       values)
    end

    def self.from_element(root)
      id = XmlUtilities.from_element(root, 'id', Integer)
      name = XmlUtilities.from_element(root, 'name', String)
      validation_type = XmlUtilities.from_element(root, 'validationType',
                                                  String)
      attribute_provision_types = XmlUtilities.from_element_to_array(
        root, 'attributeProvisionTypes', String,
        wrapping_element_name: 'attributeProvisionTypes'
      )
      origin = XmlUtilities.from_element(root, 'origin', String)
      repeatable = XmlUtilities.from_element(root, 'repeatable', TrueClass)
      values = XmlUtilities.from_element_to_array(
        root, 'value', String, wrapping_element_name: 'values'
      )

      new(id,
          name,
          validation_type,
          attribute_provision_types,
          origin,
          repeatable,
          values)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'id', id)
      XmlUtilities.add_as_subelement(doc, root, 'name', name)
      XmlUtilities.add_as_subelement(doc, root, 'validationType',
                                     validation_type)
      XmlUtilities.add_array_as_subelement(
        doc, root, 'attributeProvisionTypes',
        attribute_provision_types,
        wrapping_element_name: 'attributeProvisionTypes'
      )
      XmlUtilities.add_as_subelement(doc, root, 'origin', origin)
      XmlUtilities.add_as_subelement(doc, root, 'repeatable', repeatable)
      XmlUtilities.add_array_as_subelement(doc, root, 'value', values,
                                           wrapping_element_name: 'values')

      root
    end
  end
end
