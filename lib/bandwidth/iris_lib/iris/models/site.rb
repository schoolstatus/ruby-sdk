# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # Site Model.
  class Site < BaseModel
    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :description

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :customer_provided_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :customer_name

    # TODO: Write general description for this method
    # @return [Address]
    attr_accessor :address

    # TODO: Write general description for this method
    # @return [SiteUcTrunkingConfigurationPayload]
    attr_accessor :site_uc_trunking_configuration

    # TODO: Write general description for this method
    # @return [SipPeers]
    attr_accessor :sip_peers

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :total_tn_count

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :sip_peer_count

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['name'] = 'name'
      @_hash['description'] = 'description'
      @_hash['customer_provided_id'] = 'customerProvidedId'
      @_hash['customer_name'] = 'customerName'
      @_hash['address'] = 'address'
      @_hash['site_uc_trunking_configuration'] = 'siteUcTrunkingConfiguration'
      @_hash['sip_peers'] = 'sipPeers'
      @_hash['total_tn_count'] = 'totalTnCount'
      @_hash['sip_peer_count'] = 'sipPeerCount'
      @_hash
    end

    def initialize(id = nil,
                   name = nil,
                   description = nil,
                   customer_provided_id = nil,
                   customer_name = nil,
                   address = nil,
                   site_uc_trunking_configuration = nil,
                   sip_peers = nil,
                   total_tn_count = nil,
                   sip_peer_count = nil)
      @id = id
      @name = name
      @description = description
      @customer_provided_id = customer_provided_id
      @customer_name = customer_name
      @address = address
      @site_uc_trunking_configuration = site_uc_trunking_configuration
      @sip_peers = sip_peers
      @total_tn_count = total_tn_count
      @sip_peer_count = sip_peer_count
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash['id']
      name = hash['name']
      description = hash['description']
      customer_provided_id = hash['customerProvidedId']
      customer_name = hash['customerName']
      address = Address.from_hash(hash['address']) if hash['address']
      if hash['siteUcTrunkingConfiguration']
        site_uc_trunking_configuration = SiteUcTrunkingConfigurationPayload.from_hash(hash['siteUcTrunkingConfiguration'])
      end
      sip_peers = SipPeers.from_hash(hash['sipPeers']) if hash['sipPeers']
      total_tn_count = hash['totalTnCount']
      sip_peer_count = hash['sipPeerCount']

      # Create object from extracted values.
      Site.new(id,
               name,
               description,
               customer_provided_id,
               customer_name,
               address,
               site_uc_trunking_configuration,
               sip_peers,
               total_tn_count,
               sip_peer_count)
    end

    def self.from_element(root)
      id = XmlUtilities.from_element(root, 'Id', Integer)
      name = XmlUtilities.from_element(root, 'Name', String)
      description = XmlUtilities.from_element(root, 'Description', String)
      customer_provided_id = XmlUtilities.from_element(root,
                                                       'CustomerProvidedId',
                                                       String)
      customer_name = XmlUtilities.from_element(root, 'CustomerName', String)
      address = XmlUtilities.from_element(root, 'Address', Address)
      site_uc_trunking_configuration = XmlUtilities.from_element(
        root, 'UcTrunkingConfiguration',
        SiteUcTrunkingConfigurationPayload
      )
      sip_peers = XmlUtilities.from_element(root, 'SipPeers', SipPeers)
      total_tn_count = XmlUtilities.from_element(root, 'TotalTnCount', Integer)
      sip_peer_count = XmlUtilities.from_element(root, 'SipPeerCount', Integer)

      new(id,
          name,
          description,
          customer_provided_id,
          customer_name,
          address,
          site_uc_trunking_configuration,
          sip_peers,
          total_tn_count,
          sip_peer_count)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'Id', id)
      XmlUtilities.add_as_subelement(doc, root, 'Name', name)
      XmlUtilities.add_as_subelement(doc, root, 'Description', description)
      XmlUtilities.add_as_subelement(doc, root, 'CustomerProvidedId',
                                     customer_provided_id)
      XmlUtilities.add_as_subelement(doc, root, 'CustomerName', customer_name)
      XmlUtilities.add_as_subelement(doc, root, 'Address', address)
      XmlUtilities.add_as_subelement(doc, root, 'UcTrunkingConfiguration',
                                     site_uc_trunking_configuration)
      XmlUtilities.add_as_subelement(doc, root, 'SipPeers', sip_peers)
      XmlUtilities.add_as_subelement(doc, root, 'TotalTnCount', total_tn_count)
      XmlUtilities.add_as_subelement(doc, root, 'SipPeerCount', sip_peer_count)

      root
    end
  end
end
