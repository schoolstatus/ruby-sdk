# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # ManualPortOutRequest Model.
  class ManualPortOutRequest < BaseModel
    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :account_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :pin

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :nnspid

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :telephone_number

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :foc_date

    # TODO: Write general description for this method
    # @return [PortOutActionEnum]
    attr_accessor :port_out_action

    # TODO: Write general description for this method
    # @return [BulkPortout]
    attr_accessor :bulk_portout

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :internal_port_out

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :string_account_id

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['account_id'] = 'accountId'
      @_hash['pin'] = 'pin'
      @_hash['nnspid'] = 'nnspid'
      @_hash['telephone_number'] = 'telephoneNumber'
      @_hash['foc_date'] = 'focDate'
      @_hash['port_out_action'] = 'portOutAction'
      @_hash['bulk_portout'] = 'bulkPortout'
      @_hash['internal_port_out'] = 'internalPortOut'
      @_hash['string_account_id'] = 'stringAccountId'
      @_hash
    end

    def initialize(pin = nil,
                   nnspid = nil,
                   telephone_number = nil,
                   foc_date = nil,
                   port_out_action = nil,
                   account_id = nil,
                   bulk_portout = nil,
                   internal_port_out = nil,
                   string_account_id = nil)
      @account_id = account_id
      @pin = pin
      @nnspid = nnspid
      @telephone_number = telephone_number
      @foc_date = foc_date
      @port_out_action = port_out_action
      @bulk_portout = bulk_portout
      @internal_port_out = internal_port_out
      @string_account_id = string_account_id
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      pin = hash['pin']
      nnspid = hash['nnspid']
      telephone_number = hash['telephoneNumber']
      foc_date = hash['focDate']
      port_out_action = hash['portOutAction']
      account_id = hash['accountId']
      bulk_portout = BulkPortout.from_hash(hash['bulkPortout']) if
        hash['bulkPortout']
      internal_port_out = hash['internalPortOut']
      string_account_id = hash['stringAccountId']

      # Create object from extracted values.
      ManualPortOutRequest.new(pin,
                               nnspid,
                               telephone_number,
                               foc_date,
                               port_out_action,
                               account_id,
                               bulk_portout,
                               internal_port_out,
                               string_account_id)
    end

    def self.from_element(root)
      pin = XmlUtilities.from_element(root, 'Pin', String)
      nnspid = XmlUtilities.from_element(root, 'NewNetworkSPID', String)
      telephone_number = XmlUtilities.from_element(root,
                                                   'TelephoneNumberToPort',
                                                   String)
      foc_date = XmlUtilities.from_element(root, 'FocDate', String)
      port_out_action = XmlUtilities.from_element(root, 'PortOutAction', String)
      account_id = XmlUtilities.from_element(root, 'accountId', Integer)
      bulk_portout = XmlUtilities.from_element(root, 'BulkPortOut', BulkPortout)
      internal_port_out = XmlUtilities.from_element(root, 'internalPortOut',
                                                    TrueClass)
      string_account_id = XmlUtilities.from_element(root, 'stringAccountId',
                                                    String)

      new(pin,
          nnspid,
          telephone_number,
          foc_date,
          port_out_action,
          account_id,
          bulk_portout,
          internal_port_out,
          string_account_id)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'Pin', pin)
      XmlUtilities.add_as_subelement(doc, root, 'NewNetworkSPID', nnspid)
      XmlUtilities.add_as_subelement(doc, root, 'TelephoneNumberToPort',
                                     telephone_number)
      XmlUtilities.add_as_subelement(doc, root, 'FocDate', foc_date)
      XmlUtilities.add_as_subelement(doc, root, 'PortOutAction',
                                     port_out_action)
      XmlUtilities.add_as_subelement(doc, root, 'accountId', account_id)
      XmlUtilities.add_as_subelement(doc, root, 'BulkPortOut', bulk_portout)
      XmlUtilities.add_as_subelement(doc, root, 'internalPortOut',
                                     internal_port_out)
      XmlUtilities.add_as_subelement(doc, root, 'stringAccountId',
                                     string_account_id)

      root
    end
  end
end
