# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # Product Model.
  class Product < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :description

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :manager_first_name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :manager_last_name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :manager_email

    # TODO: Write general description for this method
    # @return [List of ProductFeature]
    attr_accessor :features

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['name'] = 'name'
      @_hash['description'] = 'description'
      @_hash['manager_first_name'] = 'managerFirstName'
      @_hash['manager_last_name'] = 'managerLastName'
      @_hash['manager_email'] = 'managerEmail'
      @_hash['features'] = 'features'
      @_hash
    end

    def initialize(name = nil,
                   description = nil,
                   manager_first_name = nil,
                   manager_last_name = nil,
                   manager_email = nil,
                   features = nil)
      @name = name
      @description = description
      @manager_first_name = manager_first_name
      @manager_last_name = manager_last_name
      @manager_email = manager_email
      @features = features
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      name = hash['name']
      description = hash['description']
      manager_first_name = hash['managerFirstName']
      manager_last_name = hash['managerLastName']
      manager_email = hash['managerEmail']
      # Parameter is an array, so we need to iterate through it
      features = nil
      unless hash['features'].nil?
        features = []
        hash['features'].each do |structure|
          features << (ProductFeature.from_hash(structure) if structure)
        end
      end

      # Create object from extracted values.
      Product.new(name,
                  description,
                  manager_first_name,
                  manager_last_name,
                  manager_email,
                  features)
    end

    def self.from_element(root)
      name = XmlUtilities.from_element(root, 'Name', String)
      description = XmlUtilities.from_element(root, 'Description', String)
      manager_first_name = XmlUtilities.from_element(root,
                                                     'ProductManangerFirstName',
                                                     String)
      manager_last_name = XmlUtilities.from_element(root,
                                                    'ProductManangerLastName',
                                                    String)
      manager_email = XmlUtilities.from_element(root, 'ProductManangerEmail',
                                                String)
      features = XmlUtilities.from_element_to_array(
        root, 'Feature', ProductFeature,
        wrapping_element_name: 'Features'
      )

      new(name,
          description,
          manager_first_name,
          manager_last_name,
          manager_email,
          features)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'Name', name)
      XmlUtilities.add_as_subelement(doc, root, 'Description', description)
      XmlUtilities.add_as_subelement(doc, root, 'ProductManangerFirstName',
                                     manager_first_name)
      XmlUtilities.add_as_subelement(doc, root, 'ProductManangerLastName',
                                     manager_last_name)
      XmlUtilities.add_as_subelement(doc, root, 'ProductManangerEmail',
                                     manager_email)
      XmlUtilities.add_array_as_subelement(doc, root, 'Feature', features,
                                           wrapping_element_name: 'Features')

      root
    end
  end
end
