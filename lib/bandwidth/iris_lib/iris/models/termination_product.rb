# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # TerminationProduct Model.
  class TerminationProduct < BaseModel
    # TODO: Write general description for this method
    # @return [Long]
    attr_accessor :id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :description

    # TODO: Write general description for this method
    # @return [List of TerminationAttribute]
    attr_accessor :attributes

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['name'] = 'name'
      @_hash['description'] = 'description'
      @_hash['attributes'] = 'attributes'
      @_hash
    end

    def initialize(id = nil,
                   name = nil,
                   description = nil,
                   attributes = nil)
      @id = id
      @name = name
      @description = description
      @attributes = attributes
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash['id']
      name = hash['name']
      description = hash['description']
      # Parameter is an array, so we need to iterate through it
      attributes = nil
      unless hash['attributes'].nil?
        attributes = []
        hash['attributes'].each do |structure|
          attributes << (TerminationAttribute.from_hash(structure) if structure)
        end
      end

      # Create object from extracted values.
      TerminationProduct.new(id,
                             name,
                             description,
                             attributes)
    end

    def self.from_element(root)
      id = XmlUtilities.from_element(root, 'id', Integer)
      name = XmlUtilities.from_element(root, 'name', String)
      description = XmlUtilities.from_element(root, 'description', String)
      attributes = XmlUtilities.from_element_to_array(
        root, 'TerminationAttribute', TerminationAttribute,
        wrapping_element_name: 'TerminationAttributes'
      )

      new(id,
          name,
          description,
          attributes)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'id', id)
      XmlUtilities.add_as_subelement(doc, root, 'name', name)
      XmlUtilities.add_as_subelement(doc, root, 'description', description)
      XmlUtilities.add_array_as_subelement(
        doc, root, 'TerminationAttribute', attributes,
        wrapping_element_name: 'TerminationAttributes'
      )

      root
    end
  end
end
