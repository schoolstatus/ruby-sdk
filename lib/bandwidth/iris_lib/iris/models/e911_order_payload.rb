# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # E911OrderPayload Model.
  class E911OrderPayload < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :id

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :account_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :last_modified_date_in_utc

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :last_modified_by

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :created_by_user

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :customer_order_id

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :site_id

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :peer_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :order_create_date

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :caller_name

    # TODO: Write general description for this method
    # @return [ProcessingStatus3Enum]
    attr_accessor :processing_status

    # TODO: Write general description for this method
    # @return [List of String]
    attr_accessor :telephone_numbers

    # TODO: Write general description for this method
    # @return [List of E911AlternateEndUserIdentifier]
    attr_accessor :alternate_end_user_identifiers

    # TODO: Write general description for this method
    # @return [E911Address]
    attr_accessor :address

    # TODO: Write general description for this method
    # @return [List of E911Address]
    attr_accessor :additional_addresses

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :location_id

    # TODO: Write general description for this method
    # @return [List of GroupErrorObject]
    attr_accessor :errors

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :e911_order_type

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :revert_to_sip_peer_address

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['account_id'] = 'accountId'
      @_hash['name'] = 'name'
      @_hash['last_modified_date_in_utc'] = 'lastModifiedDateInUtc'
      @_hash['last_modified_by'] = 'lastModifiedBy'
      @_hash['created_by_user'] = 'createdByUser'
      @_hash['customer_order_id'] = 'customerOrderId'
      @_hash['site_id'] = 'siteId'
      @_hash['peer_id'] = 'peerId'
      @_hash['order_create_date'] = 'orderCreateDate'
      @_hash['caller_name'] = 'callerName'
      @_hash['processing_status'] = 'processingStatus'
      @_hash['telephone_numbers'] = 'telephoneNumbers'
      @_hash['alternate_end_user_identifiers'] = 'alternateEndUserIdentifiers'
      @_hash['address'] = 'address'
      @_hash['additional_addresses'] = 'additionalAddresses'
      @_hash['location_id'] = 'locationId'
      @_hash['errors'] = 'errors'
      @_hash['e911_order_type'] = 'e911OrderType'
      @_hash['revert_to_sip_peer_address'] = 'revertToSipPeerAddress'
      @_hash
    end

    def initialize(id = nil,
                   account_id = nil,
                   name = nil,
                   last_modified_date_in_utc = nil,
                   last_modified_by = nil,
                   created_by_user = nil,
                   customer_order_id = nil,
                   site_id = nil,
                   peer_id = nil,
                   order_create_date = nil,
                   caller_name = nil,
                   processing_status = nil,
                   telephone_numbers = nil,
                   alternate_end_user_identifiers = nil,
                   address = nil,
                   additional_addresses = nil,
                   location_id = nil,
                   errors = nil,
                   e911_order_type = nil,
                   revert_to_sip_peer_address = nil)
      @id = id
      @account_id = account_id
      @name = name
      @last_modified_date_in_utc = last_modified_date_in_utc
      @last_modified_by = last_modified_by
      @created_by_user = created_by_user
      @customer_order_id = customer_order_id
      @site_id = site_id
      @peer_id = peer_id
      @order_create_date = order_create_date
      @caller_name = caller_name
      @processing_status = processing_status
      @telephone_numbers = telephone_numbers
      @alternate_end_user_identifiers = alternate_end_user_identifiers
      @address = address
      @additional_addresses = additional_addresses
      @location_id = location_id
      @errors = errors
      @e911_order_type = e911_order_type
      @revert_to_sip_peer_address = revert_to_sip_peer_address
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash['id']
      account_id = hash['accountId']
      name = hash['name']
      last_modified_date_in_utc = hash['lastModifiedDateInUtc']
      last_modified_by = hash['lastModifiedBy']
      created_by_user = hash['createdByUser']
      customer_order_id = hash['customerOrderId']
      site_id = hash['siteId']
      peer_id = hash['peerId']
      order_create_date = hash['orderCreateDate']
      caller_name = hash['callerName']
      processing_status = hash['processingStatus']
      telephone_numbers = hash['telephoneNumbers']
      # Parameter is an array, so we need to iterate through it
      alternate_end_user_identifiers = nil
      unless hash['alternateEndUserIdentifiers'].nil?
        alternate_end_user_identifiers = []
        hash['alternateEndUserIdentifiers'].each do |structure|
          alternate_end_user_identifiers << (E911AlternateEndUserIdentifier.from_hash(structure) if structure)
        end
      end
      address = E911Address.from_hash(hash['address']) if hash['address']
      # Parameter is an array, so we need to iterate through it
      additional_addresses = nil
      unless hash['additionalAddresses'].nil?
        additional_addresses = []
        hash['additionalAddresses'].each do |structure|
          additional_addresses << (E911Address.from_hash(structure) if structure)
        end
      end
      location_id = hash['locationId']
      # Parameter is an array, so we need to iterate through it
      errors = nil
      unless hash['errors'].nil?
        errors = []
        hash['errors'].each do |structure|
          errors << (GroupErrorObject.from_hash(structure) if structure)
        end
      end
      e911_order_type = hash['e911OrderType']
      revert_to_sip_peer_address = hash['revertToSipPeerAddress']

      # Create object from extracted values.
      E911OrderPayload.new(id,
                           account_id,
                           name,
                           last_modified_date_in_utc,
                           last_modified_by,
                           created_by_user,
                           customer_order_id,
                           site_id,
                           peer_id,
                           order_create_date,
                           caller_name,
                           processing_status,
                           telephone_numbers,
                           alternate_end_user_identifiers,
                           address,
                           additional_addresses,
                           location_id,
                           errors,
                           e911_order_type,
                           revert_to_sip_peer_address)
    end

    def self.from_element(root)
      id = XmlUtilities.from_element(root, 'OrderId', String)
      account_id = XmlUtilities.from_element(root, 'AccountId', Integer)
      name = XmlUtilities.from_element(root, 'Name', String)
      last_modified_date_in_utc = XmlUtilities.from_element(root,
                                                            'LastModifiedDate',
                                                            String)
      last_modified_by = XmlUtilities.from_element(root, 'LastModifiedBy',
                                                   String)
      created_by_user = XmlUtilities.from_element(root, 'CreatedByUser', String)
      customer_order_id = XmlUtilities.from_element(root, 'CustomerOrderId',
                                                    String)
      site_id = XmlUtilities.from_element(root, 'SiteId', Integer)
      peer_id = XmlUtilities.from_element(root, 'PeerId', Integer)
      order_create_date = XmlUtilities.from_element(root, 'OrderCreateDate',
                                                    String)
      caller_name = XmlUtilities.from_element(root, 'CallerName', String)
      processing_status = XmlUtilities.from_element(root, 'ProcessingStatus',
                                                    String)
      telephone_numbers = XmlUtilities.from_element_to_array(
        root, 'TelephoneNumber', String,
        wrapping_element_name: 'TelephoneNumbers'
      )
      alternate_end_user_identifiers = XmlUtilities.from_element_to_array(
        root, 'E911AlternateEndUserIdentifier',
        E911AlternateEndUserIdentifier,
        wrapping_element_name: 'AlternateEndUserIdentifiers'
      )
      address = XmlUtilities.from_element(root, 'Address', E911Address)
      additional_addresses = XmlUtilities.from_element_to_array(
        root, 'E911Address', E911Address,
        wrapping_element_name: 'AdditionalAddresses'
      )
      location_id = XmlUtilities.from_element(root, 'LocationId', String)
      errors = XmlUtilities.from_element_to_array(
        root, 'GroupErrorObject', GroupErrorObject,
        wrapping_element_name: 'ErrorList'
      )
      e911_order_type = XmlUtilities.from_element(root, 'OrderType', String)
      revert_to_sip_peer_address = XmlUtilities.from_element(
        root, 'DeleteTNSpecificE911Address', TrueClass
      )

      new(id,
          account_id,
          name,
          last_modified_date_in_utc,
          last_modified_by,
          created_by_user,
          customer_order_id,
          site_id,
          peer_id,
          order_create_date,
          caller_name,
          processing_status,
          telephone_numbers,
          alternate_end_user_identifiers,
          address,
          additional_addresses,
          location_id,
          errors,
          e911_order_type,
          revert_to_sip_peer_address)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'OrderId', id)
      XmlUtilities.add_as_subelement(doc, root, 'AccountId', account_id)
      XmlUtilities.add_as_subelement(doc, root, 'Name', name)
      XmlUtilities.add_as_subelement(doc, root, 'LastModifiedDate',
                                     last_modified_date_in_utc)
      XmlUtilities.add_as_subelement(doc, root, 'LastModifiedBy',
                                     last_modified_by)
      XmlUtilities.add_as_subelement(doc, root, 'CreatedByUser',
                                     created_by_user)
      XmlUtilities.add_as_subelement(doc, root, 'CustomerOrderId',
                                     customer_order_id)
      XmlUtilities.add_as_subelement(doc, root, 'SiteId', site_id)
      XmlUtilities.add_as_subelement(doc, root, 'PeerId', peer_id)
      XmlUtilities.add_as_subelement(doc, root, 'OrderCreateDate',
                                     order_create_date)
      XmlUtilities.add_as_subelement(doc, root, 'CallerName', caller_name)
      XmlUtilities.add_as_subelement(doc, root, 'ProcessingStatus',
                                     processing_status)
      XmlUtilities.add_array_as_subelement(
        doc, root, 'TelephoneNumber', telephone_numbers,
        wrapping_element_name: 'TelephoneNumbers'
      )
      XmlUtilities.add_array_as_subelement(
        doc, root, 'E911AlternateEndUserIdentifier',
        alternate_end_user_identifiers,
        wrapping_element_name: 'AlternateEndUserIdentifiers'
      )
      XmlUtilities.add_as_subelement(doc, root, 'Address', address)
      XmlUtilities.add_array_as_subelement(
        doc, root, 'E911Address', additional_addresses,
        wrapping_element_name: 'AdditionalAddresses'
      )
      XmlUtilities.add_as_subelement(doc, root, 'LocationId', location_id)
      XmlUtilities.add_array_as_subelement(doc, root, 'GroupErrorObject',
                                           errors,
                                           wrapping_element_name: 'ErrorList')
      XmlUtilities.add_as_subelement(doc, root, 'OrderType', e911_order_type)
      XmlUtilities.add_as_subelement(doc, root, 'DeleteTNSpecificE911Address',
                                     revert_to_sip_peer_address)

      root
    end
  end
end
