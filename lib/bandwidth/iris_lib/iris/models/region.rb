# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # Region Model.
  class Region < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :abbreviation

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :name

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['abbreviation'] = 'abbreviation'
      @_hash['name'] = 'name'
      @_hash
    end

    def initialize(abbreviation = nil,
                   name = nil)
      @abbreviation = abbreviation
      @name = name
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      abbreviation = hash['abbreviation']
      name = hash['name']

      # Create object from extracted values.
      Region.new(abbreviation,
                 name)
    end

    def self.from_element(root)
      abbreviation = XmlUtilities.from_element(root, 'Abbreviation', String)
      name = XmlUtilities.from_element(root, 'name', String)

      new(abbreviation,
          name)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'Abbreviation', abbreviation)
      XmlUtilities.add_as_subelement(doc, root, 'name', name)

      root
    end
  end
end
