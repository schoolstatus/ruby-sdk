# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # BocAccountList Model.
  class BocAccountList < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :country_code

    # TODO: Write general description for this method
    # @return [OperationEnum]
    attr_accessor :operation

    # TODO: Write general description for this method
    # @return [List of BocAccount]
    attr_accessor :account_list

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['country_code'] = 'countryCode'
      @_hash['operation'] = 'operation'
      @_hash['account_list'] = 'accountList'
      @_hash
    end

    def initialize(country_code = nil,
                   operation = nil,
                   account_list = nil)
      @country_code = country_code
      @operation = operation
      @account_list = account_list
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      country_code = hash['countryCode']
      operation = hash['operation']
      # Parameter is an array, so we need to iterate through it
      account_list = nil
      unless hash['accountList'].nil?
        account_list = []
        hash['accountList'].each do |structure|
          account_list << (BocAccount.from_hash(structure) if structure)
        end
      end

      # Create object from extracted values.
      BocAccountList.new(country_code,
                         operation,
                         account_list)
    end

    def self.from_element(root)
      country_code = XmlUtilities.from_element(root, 'Country', String)
      operation = XmlUtilities.from_element(root, 'Operation', String)
      account_list = XmlUtilities.from_element_to_array(
        root, 'Account', BocAccount,
        wrapping_element_name: 'Accounts'
      )

      new(country_code,
          operation,
          account_list)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'Country', country_code)
      XmlUtilities.add_as_subelement(doc, root, 'Operation', operation)
      XmlUtilities.add_array_as_subelement(doc, root, 'Account', account_list,
                                           wrapping_element_name: 'Accounts')

      root
    end
  end
end
