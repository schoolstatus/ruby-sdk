# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # CombinedSearchAndOrderType Model.
  class CombinedSearchAndOrderType < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :npa

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :npa_nxx

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :npa_nxx_block

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :rate_center_abbreviation

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :lata

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :city

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :state

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :zip

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :local_vanity

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :ends_in

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :quantity

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['npa'] = 'npa'
      @_hash['npa_nxx'] = 'npaNxx'
      @_hash['npa_nxx_block'] = 'npaNxxBlock'
      @_hash['rate_center_abbreviation'] = 'rateCenterAbbreviation'
      @_hash['lata'] = 'lata'
      @_hash['city'] = 'city'
      @_hash['state'] = 'state'
      @_hash['zip'] = 'zip'
      @_hash['local_vanity'] = 'localVanity'
      @_hash['ends_in'] = 'endsIn'
      @_hash['quantity'] = 'quantity'
      @_hash
    end

    def initialize(npa = nil,
                   npa_nxx = nil,
                   npa_nxx_block = nil,
                   rate_center_abbreviation = nil,
                   lata = nil,
                   city = nil,
                   state = nil,
                   zip = nil,
                   local_vanity = nil,
                   ends_in = nil,
                   quantity = nil)
      @npa = npa
      @npa_nxx = npa_nxx
      @npa_nxx_block = npa_nxx_block
      @rate_center_abbreviation = rate_center_abbreviation
      @lata = lata
      @city = city
      @state = state
      @zip = zip
      @local_vanity = local_vanity
      @ends_in = ends_in
      @quantity = quantity
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      npa = hash['npa']
      npa_nxx = hash['npaNxx']
      npa_nxx_block = hash['npaNxxBlock']
      rate_center_abbreviation = hash['rateCenterAbbreviation']
      lata = hash['lata']
      city = hash['city']
      state = hash['state']
      zip = hash['zip']
      local_vanity = hash['localVanity']
      ends_in = hash['endsIn']
      quantity = hash['quantity']

      # Create object from extracted values.
      CombinedSearchAndOrderType.new(npa,
                                     npa_nxx,
                                     npa_nxx_block,
                                     rate_center_abbreviation,
                                     lata,
                                     city,
                                     state,
                                     zip,
                                     local_vanity,
                                     ends_in,
                                     quantity)
    end

    def self.from_element(root)
      npa = XmlUtilities.from_element(root, 'AreaCode', String)
      npa_nxx = XmlUtilities.from_element(root, 'NpaNxx', String)
      npa_nxx_block = XmlUtilities.from_element(root, 'NpaNxxX', String)
      rate_center_abbreviation = XmlUtilities.from_element(root, 'RateCenter',
                                                           String)
      lata = XmlUtilities.from_element(root, 'LATA', String)
      city = XmlUtilities.from_element(root, 'City', String)
      state = XmlUtilities.from_element(root, 'State', String)
      zip = XmlUtilities.from_element(root, 'Zip', String)
      local_vanity = XmlUtilities.from_element(root, 'LocalVanity', String)
      ends_in = XmlUtilities.from_element(root, 'EndsIn', TrueClass)
      quantity = XmlUtilities.from_element(root, 'Quantity', Integer)

      new(npa,
          npa_nxx,
          npa_nxx_block,
          rate_center_abbreviation,
          lata,
          city,
          state,
          zip,
          local_vanity,
          ends_in,
          quantity)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'AreaCode', npa)
      XmlUtilities.add_as_subelement(doc, root, 'NpaNxx', npa_nxx)
      XmlUtilities.add_as_subelement(doc, root, 'NpaNxxX', npa_nxx_block)
      XmlUtilities.add_as_subelement(doc, root, 'RateCenter',
                                     rate_center_abbreviation)
      XmlUtilities.add_as_subelement(doc, root, 'LATA', lata)
      XmlUtilities.add_as_subelement(doc, root, 'City', city)
      XmlUtilities.add_as_subelement(doc, root, 'State', state)
      XmlUtilities.add_as_subelement(doc, root, 'Zip', zip)
      XmlUtilities.add_as_subelement(doc, root, 'LocalVanity', local_vanity)
      XmlUtilities.add_as_subelement(doc, root, 'EndsIn', ends_in)
      XmlUtilities.add_as_subelement(doc, root, 'Quantity', quantity)

      root
    end
  end
end
