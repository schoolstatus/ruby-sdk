# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # UserActivityEvents Model.
  class UserActivityEvents < BaseModel
    # TODO: Write general description for this method
    # @return [List of UserActivityEvent]
    attr_accessor :user_activity_events

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['user_activity_events'] = 'userActivityEvents'
      @_hash
    end

    def initialize(user_activity_events = nil)
      @user_activity_events = user_activity_events
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      # Parameter is an array, so we need to iterate through it
      user_activity_events = nil
      unless hash['userActivityEvents'].nil?
        user_activity_events = []
        hash['userActivityEvents'].each do |structure|
          user_activity_events << (UserActivityEvent.from_hash(structure) if structure)
        end
      end

      # Create object from extracted values.
      UserActivityEvents.new(user_activity_events)
    end

    def self.from_element(root)
      user_activity_events = XmlUtilities.from_element_to_array(
        root, 'UserEvent', UserActivityEvent
      )

      new(user_activity_events)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_array_as_subelement(doc, root, 'UserEvent',
                                           user_activity_events)

      root
    end
  end
end
