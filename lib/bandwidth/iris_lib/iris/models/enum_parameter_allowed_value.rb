# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # EnumParameterAllowedValue Model.
  class EnumParameterAllowedValue < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :internal_name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :display_name

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :report_parameter_id

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :display_index

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['internal_name'] = 'internalName'
      @_hash['display_name'] = 'displayName'
      @_hash['report_parameter_id'] = 'reportParameterId'
      @_hash['display_index'] = 'displayIndex'
      @_hash
    end

    def initialize(internal_name = nil,
                   display_name = nil,
                   report_parameter_id = nil,
                   display_index = nil)
      @internal_name = internal_name
      @display_name = display_name
      @report_parameter_id = report_parameter_id
      @display_index = display_index
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      internal_name = hash['internalName']
      display_name = hash['displayName']
      report_parameter_id = hash['reportParameterId']
      display_index = hash['displayIndex']

      # Create object from extracted values.
      EnumParameterAllowedValue.new(internal_name,
                                    display_name,
                                    report_parameter_id,
                                    display_index)
    end

    def self.from_element(root)
      internal_name = XmlUtilities.from_element(root, 'InternalName', String)
      display_name = XmlUtilities.from_element(root, 'DisplayName', String)
      report_parameter_id = XmlUtilities.from_element(root, 'reportParameterId',
                                                      Integer)
      display_index = XmlUtilities.from_element(root, 'displayIndex', Integer)

      new(internal_name,
          display_name,
          report_parameter_id,
          display_index)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'InternalName', internal_name)
      XmlUtilities.add_as_subelement(doc, root, 'DisplayName', display_name)
      XmlUtilities.add_as_subelement(doc, root, 'reportParameterId',
                                     report_parameter_id)
      XmlUtilities.add_as_subelement(doc, root, 'displayIndex', display_index)

      root
    end
  end
end
