# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # BillingTask Model.
  class BillingTask < BaseModel
    # TODO: Write general description for this method
    # @return [AuditPeriod]
    attr_accessor :audit_period

    # TODO: Write general description for this method
    # @return [ActionTypeEnum]
    attr_accessor :action_type

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :regenerated

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['audit_period'] = 'auditPeriod'
      @_hash['action_type'] = 'actionType'
      @_hash['regenerated'] = 'regenerated'
      @_hash
    end

    def initialize(audit_period = nil,
                   action_type = nil,
                   regenerated = nil)
      @audit_period = audit_period
      @action_type = action_type
      @regenerated = regenerated
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      audit_period = AuditPeriod.from_hash(hash['auditPeriod']) if
        hash['auditPeriod']
      action_type = hash['actionType']
      regenerated = hash['regenerated']

      # Create object from extracted values.
      BillingTask.new(audit_period,
                      action_type,
                      regenerated)
    end

    def self.from_element(root)
      audit_period = XmlUtilities.from_element(root, 'Period', AuditPeriod)
      action_type = XmlUtilities.from_element(root, 'Type', String)
      regenerated = XmlUtilities.from_element(root, 'Regenerated', TrueClass)

      new(audit_period,
          action_type,
          regenerated)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'Period', audit_period)
      XmlUtilities.add_as_subelement(doc, root, 'Type', action_type)
      XmlUtilities.add_as_subelement(doc, root, 'Regenerated', regenerated)

      root
    end
  end
end
