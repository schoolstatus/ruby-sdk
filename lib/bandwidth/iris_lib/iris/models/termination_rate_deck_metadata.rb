# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # TerminationRateDeckMetadata Model.
  class TerminationRateDeckMetadata < BaseModel
    # TODO: Write general description for this method
    # @return [Long]
    attr_accessor :roger_deck_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :name

    # TODO: Write general description for this method
    # @return [DeckTypeEnum]
    attr_accessor :deck_type

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :rows

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :file_name

    # TODO: Write general description for this method
    # @return [List of RateDeckFailedEntry]
    attr_accessor :failed_entries

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['roger_deck_id'] = 'rogerDeckId'
      @_hash['name'] = 'name'
      @_hash['deck_type'] = 'deckType'
      @_hash['rows'] = 'rows'
      @_hash['file_name'] = 'fileName'
      @_hash['failed_entries'] = 'failedEntries'
      @_hash
    end

    def initialize(roger_deck_id = nil,
                   name = nil,
                   deck_type = nil,
                   rows = nil,
                   file_name = nil,
                   failed_entries = nil)
      @roger_deck_id = roger_deck_id
      @name = name
      @deck_type = deck_type
      @rows = rows
      @file_name = file_name
      @failed_entries = failed_entries
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      roger_deck_id = hash['rogerDeckId']
      name = hash['name']
      deck_type = hash['deckType']
      rows = hash['rows']
      file_name = hash['fileName']
      # Parameter is an array, so we need to iterate through it
      failed_entries = nil
      unless hash['failedEntries'].nil?
        failed_entries = []
        hash['failedEntries'].each do |structure|
          failed_entries << (RateDeckFailedEntry.from_hash(structure) if structure)
        end
      end

      # Create object from extracted values.
      TerminationRateDeckMetadata.new(roger_deck_id,
                                      name,
                                      deck_type,
                                      rows,
                                      file_name,
                                      failed_entries)
    end

    def self.from_element(root)
      roger_deck_id = XmlUtilities.from_element(root, 'rogerDeckId', Integer)
      name = XmlUtilities.from_element(root, 'name', String)
      deck_type = XmlUtilities.from_element(root, 'deckType', String)
      rows = XmlUtilities.from_element(root, 'rows', Integer)
      file_name = XmlUtilities.from_element(root, 'fileName', String)
      failed_entries = XmlUtilities.from_element_to_array(
        root, 'RateDeckFailedEntry', RateDeckFailedEntry,
        wrapping_element_name: 'failedEntries'
      )

      new(roger_deck_id,
          name,
          deck_type,
          rows,
          file_name,
          failed_entries)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'rogerDeckId', roger_deck_id)
      XmlUtilities.add_as_subelement(doc, root, 'name', name)
      XmlUtilities.add_as_subelement(doc, root, 'deckType', deck_type)
      XmlUtilities.add_as_subelement(doc, root, 'rows', rows)
      XmlUtilities.add_as_subelement(doc, root, 'fileName', file_name)
      XmlUtilities.add_array_as_subelement(
        doc, root, 'RateDeckFailedEntry', failed_entries,
        wrapping_element_name: 'failedEntries'
      )

      root
    end
  end
end
