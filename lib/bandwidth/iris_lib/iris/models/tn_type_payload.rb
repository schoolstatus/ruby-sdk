# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # TnTypePayload Model.
  class TnTypePayload < BaseModel
    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :source

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :tn_type

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['source'] = 'source'
      @_hash['tn_type'] = 'tnType'
      @_hash
    end

    def initialize(id = nil,
                   source = nil,
                   tn_type = nil)
      @id = id
      @source = source
      @tn_type = tn_type
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash['id']
      source = hash['source']
      tn_type = hash['tnType']

      # Create object from extracted values.
      TnTypePayload.new(id,
                        source,
                        tn_type)
    end

    def self.from_element(root)
      id = XmlUtilities.from_element(root, 'TnTypeId', Integer)
      source = XmlUtilities.from_element(root, 'Source', String)
      tn_type = XmlUtilities.from_element(root, 'Type', String)

      new(id,
          source,
          tn_type)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'TnTypeId', id)
      XmlUtilities.add_as_subelement(doc, root, 'Source', source)
      XmlUtilities.add_as_subelement(doc, root, 'Type', tn_type)

      root
    end
  end
end
