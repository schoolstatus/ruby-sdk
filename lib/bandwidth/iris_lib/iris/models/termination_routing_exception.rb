# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # TerminationRoutingException Model.
  class TerminationRoutingException < BaseModel
    # TODO: Write general description for this method
    # @return [Long]
    attr_accessor :id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :routing_exception_name

    # TODO: Write general description for this method
    # @return [List of RoutingExceptionPrefix]
    attr_accessor :routing_exceptions

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['routing_exception_name'] = 'routingExceptionName'
      @_hash['routing_exceptions'] = 'routingExceptions'
      @_hash
    end

    def initialize(id = nil,
                   routing_exception_name = nil,
                   routing_exceptions = nil)
      @id = id
      @routing_exception_name = routing_exception_name
      @routing_exceptions = routing_exceptions
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash['id']
      routing_exception_name = hash['routingExceptionName']
      # Parameter is an array, so we need to iterate through it
      routing_exceptions = nil
      unless hash['routingExceptions'].nil?
        routing_exceptions = []
        hash['routingExceptions'].each do |structure|
          routing_exceptions << (RoutingExceptionPrefix.from_hash(structure) if structure)
        end
      end

      # Create object from extracted values.
      TerminationRoutingException.new(id,
                                      routing_exception_name,
                                      routing_exceptions)
    end

    def self.from_element(root)
      id = XmlUtilities.from_element(root, 'id', Integer)
      routing_exception_name = XmlUtilities.from_element(root,
                                                         'routingExceptionName',
                                                         String)
      routing_exceptions = XmlUtilities.from_element_to_array(
        root, 'RoutingExceptionPrefix', RoutingExceptionPrefix,
        wrapping_element_name: 'RoutingExceptionPrefixes'
      )

      new(id,
          routing_exception_name,
          routing_exceptions)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'id', id)
      XmlUtilities.add_as_subelement(doc, root, 'routingExceptionName',
                                     routing_exception_name)
      XmlUtilities.add_array_as_subelement(
        doc, root, 'RoutingExceptionPrefix', routing_exceptions,
        wrapping_element_name: 'RoutingExceptionPrefixes'
      )

      root
    end
  end
end
