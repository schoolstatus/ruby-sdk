# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # EdgeManagementConfigurationPayload Model.
  class EdgeManagementConfigurationPayload < BaseModel
    # TODO: Write general description for this method
    # @return [SbcConfigurationPayload]
    attr_accessor :sbc_configuration

    # TODO: Write general description for this method
    # @return [SipAuthConfigurationPayload]
    attr_accessor :sip_auth_configuration

    # TODO: Write general description for this method
    # @return [List of AccessRestriction]
    attr_accessor :access_restrictions

    # TODO: Write general description for this method
    # @return [HttpVoiceConfigurationPayload]
    attr_accessor :http_voice_configuration

    # TODO: Write general description for this method
    # @return [WebRtcConfigurationPayload]
    attr_accessor :web_rtc_configuration

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['sbc_configuration'] = 'sbcConfiguration'
      @_hash['sip_auth_configuration'] = 'sipAuthConfiguration'
      @_hash['access_restrictions'] = 'accessRestrictions'
      @_hash['http_voice_configuration'] = 'httpVoiceConfiguration'
      @_hash['web_rtc_configuration'] = 'webRtcConfiguration'
      @_hash
    end

    def initialize(sbc_configuration = nil,
                   sip_auth_configuration = nil,
                   access_restrictions = nil,
                   http_voice_configuration = nil,
                   web_rtc_configuration = nil)
      @sbc_configuration = sbc_configuration
      @sip_auth_configuration = sip_auth_configuration
      @access_restrictions = access_restrictions
      @http_voice_configuration = http_voice_configuration
      @web_rtc_configuration = web_rtc_configuration
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      if hash['sbcConfiguration']
        sbc_configuration = SbcConfigurationPayload.from_hash(hash['sbcConfiguration'])
      end
      if hash['sipAuthConfiguration']
        sip_auth_configuration = SipAuthConfigurationPayload.from_hash(hash['sipAuthConfiguration'])
      end
      # Parameter is an array, so we need to iterate through it
      access_restrictions = nil
      unless hash['accessRestrictions'].nil?
        access_restrictions = []
        hash['accessRestrictions'].each do |structure|
          access_restrictions << (AccessRestriction.from_hash(structure) if structure)
        end
      end
      if hash['httpVoiceConfiguration']
        http_voice_configuration = HttpVoiceConfigurationPayload.from_hash(hash['httpVoiceConfiguration'])
      end
      if hash['webRtcConfiguration']
        web_rtc_configuration = WebRtcConfigurationPayload.from_hash(hash['webRtcConfiguration'])
      end

      # Create object from extracted values.
      EdgeManagementConfigurationPayload.new(sbc_configuration,
                                             sip_auth_configuration,
                                             access_restrictions,
                                             http_voice_configuration,
                                             web_rtc_configuration)
    end

    def self.from_element(root)
      sbc_configuration = XmlUtilities.from_element(root, 'SbcSettings',
                                                    SbcConfigurationPayload)
      sip_auth_configuration = XmlUtilities.from_element(
        root, 'SipAuthentication', SipAuthConfigurationPayload
      )
      access_restrictions = XmlUtilities.from_element_to_array(
        root, 'AccessRestriction', AccessRestriction,
        wrapping_element_name: 'ProductSpecificAccessRestrictions'
      )
      http_voice_configuration = XmlUtilities.from_element(
        root, 'HttpVoice', HttpVoiceConfigurationPayload
      )
      web_rtc_configuration = XmlUtilities.from_element(
        root, 'WebRtc', WebRtcConfigurationPayload
      )

      new(sbc_configuration,
          sip_auth_configuration,
          access_restrictions,
          http_voice_configuration,
          web_rtc_configuration)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'SbcSettings',
                                     sbc_configuration)
      XmlUtilities.add_as_subelement(doc, root, 'SipAuthentication',
                                     sip_auth_configuration)
      XmlUtilities.add_array_as_subelement(
        doc, root, 'AccessRestriction', access_restrictions,
        wrapping_element_name: 'ProductSpecificAccessRestrictions'
      )
      XmlUtilities.add_as_subelement(doc, root, 'HttpVoice',
                                     http_voice_configuration)
      XmlUtilities.add_as_subelement(doc, root, 'WebRtc', web_rtc_configuration)

      root
    end
  end
end
