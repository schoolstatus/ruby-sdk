# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # AlternateEndUserIdentifierE911Status Model.
  class AlternateEndUserIdentifierE911Status < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :caller_name

    # TODO: Write general description for this method
    # @return [Address]
    attr_accessor :address

    # TODO: Write general description for this method
    # @return [EmergencyNotificationGroupPayload]
    attr_accessor :group_payload

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['caller_name'] = 'callerName'
      @_hash['address'] = 'address'
      @_hash['group_payload'] = 'groupPayload'
      @_hash
    end

    def initialize(caller_name = nil,
                   address = nil,
                   group_payload = nil)
      @caller_name = caller_name
      @address = address
      @group_payload = group_payload
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      caller_name = hash['callerName']
      address = Address.from_hash(hash['address']) if hash['address']
      if hash['groupPayload']
        group_payload = EmergencyNotificationGroupPayload.from_hash(hash['groupPayload'])
      end

      # Create object from extracted values.
      AlternateEndUserIdentifierE911Status.new(caller_name,
                                               address,
                                               group_payload)
    end

    def self.from_element(root)
      caller_name = XmlUtilities.from_element(root, 'CallerName', String)
      address = XmlUtilities.from_element(root, 'Address', Address)
      group_payload = XmlUtilities.from_element(
        root, 'EmergencyNotificationGroup',
        EmergencyNotificationGroupPayload
      )

      new(caller_name,
          address,
          group_payload)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'CallerName', caller_name)
      XmlUtilities.add_as_subelement(doc, root, 'Address', address)
      XmlUtilities.add_as_subelement(doc, root, 'EmergencyNotificationGroup',
                                     group_payload)

      root
    end
  end
end
