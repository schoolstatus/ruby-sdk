# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # TelephoneNumberDetail Model.
  class TelephoneNumberDetail < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :telephone_number

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :rate_center_abbreviation

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :lata

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :city

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :state

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :vendor_name

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :vendor_id

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :tier

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :is_toll_free

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['telephone_number'] = 'telephoneNumber'
      @_hash['rate_center_abbreviation'] = 'rateCenterAbbreviation'
      @_hash['lata'] = 'lata'
      @_hash['city'] = 'city'
      @_hash['state'] = 'state'
      @_hash['vendor_name'] = 'vendorName'
      @_hash['vendor_id'] = 'vendorId'
      @_hash['tier'] = 'tier'
      @_hash['is_toll_free'] = 'isTollFree'
      @_hash
    end

    def initialize(telephone_number = nil,
                   rate_center_abbreviation = nil,
                   lata = nil,
                   city = nil,
                   state = nil,
                   vendor_name = nil,
                   vendor_id = nil,
                   tier = nil,
                   is_toll_free = nil)
      @telephone_number = telephone_number
      @rate_center_abbreviation = rate_center_abbreviation
      @lata = lata
      @city = city
      @state = state
      @vendor_name = vendor_name
      @vendor_id = vendor_id
      @tier = tier
      @is_toll_free = is_toll_free
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      telephone_number = hash['telephoneNumber']
      rate_center_abbreviation = hash['rateCenterAbbreviation']
      lata = hash['lata']
      city = hash['city']
      state = hash['state']
      vendor_name = hash['vendorName']
      vendor_id = hash['vendorId']
      tier = hash['tier']
      is_toll_free = hash['isTollFree']

      # Create object from extracted values.
      TelephoneNumberDetail.new(telephone_number,
                                rate_center_abbreviation,
                                lata,
                                city,
                                state,
                                vendor_name,
                                vendor_id,
                                tier,
                                is_toll_free)
    end

    def self.from_element(root)
      telephone_number = XmlUtilities.from_element(root, 'FullNumber', String)
      rate_center_abbreviation = XmlUtilities.from_element(root, 'RateCenter',
                                                           String)
      lata = XmlUtilities.from_element(root, 'LATA', String)
      city = XmlUtilities.from_element(root, 'City', String)
      state = XmlUtilities.from_element(root, 'State', String)
      vendor_name = XmlUtilities.from_element(root, 'VendorName', String)
      vendor_id = XmlUtilities.from_element(root, 'VendorId', Integer)
      tier = XmlUtilities.from_element(root, 'Tier', Integer)
      is_toll_free = XmlUtilities.from_element(root, 'isTollfree', TrueClass)

      new(telephone_number,
          rate_center_abbreviation,
          lata,
          city,
          state,
          vendor_name,
          vendor_id,
          tier,
          is_toll_free)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'FullNumber', telephone_number)
      XmlUtilities.add_as_subelement(doc, root, 'RateCenter',
                                     rate_center_abbreviation)
      XmlUtilities.add_as_subelement(doc, root, 'LATA', lata)
      XmlUtilities.add_as_subelement(doc, root, 'City', city)
      XmlUtilities.add_as_subelement(doc, root, 'State', state)
      XmlUtilities.add_as_subelement(doc, root, 'VendorName', vendor_name)
      XmlUtilities.add_as_subelement(doc, root, 'VendorId', vendor_id)
      XmlUtilities.add_as_subelement(doc, root, 'Tier', tier)
      XmlUtilities.add_as_subelement(doc, root, 'isTollfree', is_toll_free)

      root
    end
  end
end
