# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # OriginationRoutePayload Model.
  class OriginationRoutePayload < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :endpoint

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :priority

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :weight

    # TODO: Write general description for this method
    # @return [EndpointTypeEnum]
    attr_accessor :endpoint_type

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['endpoint'] = 'endpoint'
      @_hash['priority'] = 'priority'
      @_hash['weight'] = 'weight'
      @_hash['endpoint_type'] = 'endpointType'
      @_hash
    end

    def initialize(endpoint = nil,
                   priority = nil,
                   weight = nil,
                   endpoint_type = nil)
      @endpoint = endpoint
      @priority = priority
      @weight = weight
      @endpoint_type = endpoint_type
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      endpoint = hash['endpoint']
      priority = hash['priority']
      weight = hash['weight']
      endpoint_type = hash['endpointType']

      # Create object from extracted values.
      OriginationRoutePayload.new(endpoint,
                                  priority,
                                  weight,
                                  endpoint_type)
    end

    def self.from_element(root)
      endpoint = XmlUtilities.from_element(root, 'Endpoint', String)
      priority = XmlUtilities.from_element(root, 'Priority', Integer)
      weight = XmlUtilities.from_element(root, 'Weight', Integer)
      endpoint_type = XmlUtilities.from_element(root, 'EndpointType', String)

      new(endpoint,
          priority,
          weight,
          endpoint_type)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'Endpoint', endpoint)
      XmlUtilities.add_as_subelement(doc, root, 'Priority', priority)
      XmlUtilities.add_as_subelement(doc, root, 'Weight', weight)
      XmlUtilities.add_as_subelement(doc, root, 'EndpointType', endpoint_type)

      root
    end
  end
end
