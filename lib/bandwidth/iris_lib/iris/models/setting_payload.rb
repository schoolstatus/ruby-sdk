# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # SettingPayload Model.
  class SettingPayload < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :setting_name

    # TODO: Write general description for this method
    # @return [Object]
    attr_accessor :value

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :property_name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :string_value

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['setting_name'] = 'settingName'
      @_hash['value'] = 'value'
      @_hash['property_name'] = 'propertyName'
      @_hash['string_value'] = 'stringValue'
      @_hash
    end

    def initialize(setting_name = nil,
                   value = nil,
                   property_name = nil,
                   string_value = nil)
      @setting_name = setting_name
      @value = value
      @property_name = property_name
      @string_value = string_value
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      setting_name = hash['settingName']
      value = hash['value']
      property_name = hash['propertyName']
      string_value = hash['stringValue']

      # Create object from extracted values.
      SettingPayload.new(setting_name,
                         value,
                         property_name,
                         string_value)
    end

    def self.from_element(root)
      setting_name = XmlUtilities.from_element(root, 'settingName', String)
      value = XmlUtilities.from_element(root, 'Value', String)
      property_name = XmlUtilities.from_element(root, 'propertyName', String)
      string_value = XmlUtilities.from_element(root, 'stringValue', String)

      new(setting_name,
          value,
          property_name,
          string_value)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'settingName', setting_name)
      XmlUtilities.add_as_subelement(doc, root, 'Value', value)
      XmlUtilities.add_as_subelement(doc, root, 'propertyName', property_name)
      XmlUtilities.add_as_subelement(doc, root, 'stringValue', string_value)

      root
    end
  end
end
