# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # OrderError Model.
  class OrderError < BaseModel
    # TODO: Write general description for this method
    # @return [ErrorTypeEnum]
    attr_accessor :error_type_enum

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :telephone_number

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :code

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :error_description

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['error_type_enum'] = 'errorTypeEnum'
      @_hash['telephone_number'] = 'telephoneNumber'
      @_hash['code'] = 'code'
      @_hash['error_description'] = 'errorDescription'
      @_hash
    end

    def initialize(error_type_enum = nil,
                   telephone_number = nil,
                   code = nil,
                   error_description = nil)
      @error_type_enum = error_type_enum
      @telephone_number = telephone_number
      @code = code
      @error_description = error_description
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      error_type_enum = hash['errorTypeEnum']
      telephone_number = hash['telephoneNumber']
      code = hash['code']
      error_description = hash['errorDescription']

      # Create object from extracted values.
      OrderError.new(error_type_enum,
                     telephone_number,
                     code,
                     error_description)
    end

    def self.from_element(root)
      error_type_enum = XmlUtilities.from_element(root, 'errorTypeEnum', String)
      telephone_number = XmlUtilities.from_element(root, 'TelephoneNumber',
                                                   String)
      code = XmlUtilities.from_element(root, 'Code', Integer)
      error_description = XmlUtilities.from_element(root, 'Description', String)

      new(error_type_enum,
          telephone_number,
          code,
          error_description)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'errorTypeEnum',
                                     error_type_enum)
      XmlUtilities.add_as_subelement(doc, root, 'TelephoneNumber',
                                     telephone_number)
      XmlUtilities.add_as_subelement(doc, root, 'Code', code)
      XmlUtilities.add_as_subelement(doc, root, 'Description',
                                     error_description)

      root
    end
  end
end
