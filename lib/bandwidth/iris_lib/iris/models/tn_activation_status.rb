# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module Bandwidth
  # TnActivationStatus Model.
  class TnActivationStatus < BaseModel
    # TODO: Write general description for this method
    # @return [List of LnpError]
    attr_accessor :errors

    # TODO: Write general description for this method
    # @return [DateTime]
    attr_accessor :activation_date

    # TODO: Write general description for this method
    # @return [List of String]
    attr_accessor :activated_tns

    # TODO: Write general description for this method
    # @return [List of String]
    attr_accessor :not_activated_tns

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['errors'] = 'errors'
      @_hash['activation_date'] = 'activationDate'
      @_hash['activated_tns'] = 'activatedTns'
      @_hash['not_activated_tns'] = 'notActivatedTns'
      @_hash
    end

    def initialize(errors = nil,
                   activation_date = nil,
                   activated_tns = nil,
                   not_activated_tns = nil)
      @errors = errors
      @activation_date = activation_date
      @activated_tns = activated_tns
      @not_activated_tns = not_activated_tns
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      # Parameter is an array, so we need to iterate through it
      errors = nil
      unless hash['errors'].nil?
        errors = []
        hash['errors'].each do |structure|
          errors << (LnpError.from_hash(structure) if structure)
        end
      end
      activation_date = APIHelper.rfc3339(hash['activationDate']) if
        hash['activationDate']
      activated_tns = hash['activatedTns']
      not_activated_tns = hash['notActivatedTns']

      # Create object from extracted values.
      TnActivationStatus.new(errors,
                             activation_date,
                             activated_tns,
                             not_activated_tns)
    end

    def self.from_element(root)
      errors = XmlUtilities.from_element_to_array(
        root, 'LnpError', LnpError, wrapping_element_name: 'Errors'
      )
      activation_date = XmlUtilities.from_element(root, 'AutoActivationDate',
                                                  String,
                                                  datetime_format: 'rfc3339')
      activated_tns = XmlUtilities.from_element_to_array(
        root, 'TelephoneNumber', String,
        wrapping_element_name: 'ActivatedTelephoneNumbersList'
      )
      not_activated_tns = XmlUtilities.from_element_to_array(
        root, 'TelephoneNumber', String,
        wrapping_element_name: 'NotYetActivatedTelephoneNumbersList'
      )

      new(errors,
          activation_date,
          activated_tns,
          not_activated_tns)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_array_as_subelement(doc, root, 'LnpError', errors,
                                           wrapping_element_name: 'Errors')
      XmlUtilities.add_as_subelement(doc, root, 'AutoActivationDate',
                                     activation_date,
                                     datetime_format: 'rfc3339')
      XmlUtilities.add_array_as_subelement(
        doc, root, 'TelephoneNumber', activated_tns,
        wrapping_element_name: 'ActivatedTelephoneNumbersList'
      )
      XmlUtilities.add_array_as_subelement(
        doc, root, 'TelephoneNumber', not_activated_tns,
        wrapping_element_name: 'NotYetActivatedTelephoneNumbersList'
      )

      root
    end
  end
end
