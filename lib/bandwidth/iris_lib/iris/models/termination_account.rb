# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # TerminationAccount Model.
  class TerminationAccount < BaseModel
    # TODO: Write general description for this method
    # @return [Long]
    attr_accessor :id

    # TODO: Write general description for this method
    # @return [Long]
    attr_accessor :external_account_id

    # TODO: Write general description for this method
    # @return [Long]
    attr_accessor :lcr_id

    # TODO: Write general description for this method
    # @return [Long]
    attr_accessor :core2_id

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['external_account_id'] = 'externalAccountId'
      @_hash['lcr_id'] = 'lcrId'
      @_hash['core2_id'] = 'core2Id'
      @_hash
    end

    def initialize(id = nil,
                   external_account_id = nil,
                   lcr_id = nil,
                   core2_id = nil)
      @id = id
      @external_account_id = external_account_id
      @lcr_id = lcr_id
      @core2_id = core2_id
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash['id']
      external_account_id = hash['externalAccountId']
      lcr_id = hash['lcrId']
      core2_id = hash['core2Id']

      # Create object from extracted values.
      TerminationAccount.new(id,
                             external_account_id,
                             lcr_id,
                             core2_id)
    end

    def self.from_element(root)
      id = XmlUtilities.from_element(root, 'id', Integer)
      external_account_id = XmlUtilities.from_element(root, 'externalAccountId',
                                                      Integer)
      lcr_id = XmlUtilities.from_element(root, 'lcrId', Integer)
      core2_id = XmlUtilities.from_element(root, 'core2Id', Integer)

      new(id,
          external_account_id,
          lcr_id,
          core2_id)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'id', id)
      XmlUtilities.add_as_subelement(doc, root, 'externalAccountId',
                                     external_account_id)
      XmlUtilities.add_as_subelement(doc, root, 'lcrId', lcr_id)
      XmlUtilities.add_as_subelement(doc, root, 'core2Id', core2_id)

      root
    end
  end
end
