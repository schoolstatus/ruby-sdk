# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # A2pCampaignId Model.
  class A2pCampaignId < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :campaign_id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :description

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :account_id

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['campaign_id'] = 'campaignId'
      @_hash['description'] = 'description'
      @_hash['account_id'] = 'accountId'
      @_hash
    end

    def initialize(campaign_id = nil,
                   description = nil,
                   account_id = nil)
      @campaign_id = campaign_id
      @description = description
      @account_id = account_id
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      campaign_id = hash['campaignId']
      description = hash['description']
      account_id = hash['accountId']

      # Create object from extracted values.
      A2pCampaignId.new(campaign_id,
                        description,
                        account_id)
    end

    def self.from_element(root)
      campaign_id = XmlUtilities.from_element(root, 'CampaignId', String)
      description = XmlUtilities.from_element(root, 'CampaignIdDescription',
                                              String)
      account_id = XmlUtilities.from_element(root, 'AccountId', String)

      new(campaign_id,
          description,
          account_id)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'CampaignId', campaign_id)
      XmlUtilities.add_as_subelement(doc, root, 'CampaignIdDescription',
                                     description)
      XmlUtilities.add_as_subelement(doc, root, 'AccountId', account_id)

      root
    end
  end
end
