# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # PortinLosingCarrierInfo Model.
  class PortinLosingCarrierInfo < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :spid

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :name

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :wireless

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :account_number_required

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :min_resp_time

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['spid'] = 'spid'
      @_hash['name'] = 'name'
      @_hash['wireless'] = 'wireless'
      @_hash['account_number_required'] = 'accountNumberRequired'
      @_hash['min_resp_time'] = 'minRespTime'
      @_hash
    end

    def initialize(spid = nil,
                   name = nil,
                   wireless = nil,
                   account_number_required = nil,
                   min_resp_time = nil)
      @spid = spid
      @name = name
      @wireless = wireless
      @account_number_required = account_number_required
      @min_resp_time = min_resp_time
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      spid = hash['spid']
      name = hash['name']
      wireless = hash['wireless']
      account_number_required = hash['accountNumberRequired']
      min_resp_time = hash['minRespTime']

      # Create object from extracted values.
      PortinLosingCarrierInfo.new(spid,
                                  name,
                                  wireless,
                                  account_number_required,
                                  min_resp_time)
    end

    def self.from_element(root)
      spid = XmlUtilities.from_element(root, 'Spid', String)
      name = XmlUtilities.from_element(root, 'Name', String)
      wireless = XmlUtilities.from_element(root, 'Wireless', TrueClass)
      account_number_required = XmlUtilities.from_element(
        root, 'AccountNumberRequired', TrueClass
      )
      min_resp_time = XmlUtilities.from_element(root, 'MinimumPortingInterval',
                                                Integer)

      new(spid,
          name,
          wireless,
          account_number_required,
          min_resp_time)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'Spid', spid)
      XmlUtilities.add_as_subelement(doc, root, 'Name', name)
      XmlUtilities.add_as_subelement(doc, root, 'Wireless', wireless)
      XmlUtilities.add_as_subelement(doc, root, 'AccountNumberRequired',
                                     account_number_required)
      XmlUtilities.add_as_subelement(doc, root, 'MinimumPortingInterval',
                                     min_resp_time)

      root
    end
  end
end
