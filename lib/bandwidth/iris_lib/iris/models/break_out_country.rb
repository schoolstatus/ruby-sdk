# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # BreakOutCountry Model.
  class BreakOutCountry < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :alpha3_code

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :country_code

    # TODO: Write general description for this method
    # @return [List of Integer]
    attr_accessor :prefix_digits

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :auth_required

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :billing_enabled

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['name'] = 'name'
      @_hash['alpha3_code'] = 'alpha3Code'
      @_hash['country_code'] = 'countryCode'
      @_hash['prefix_digits'] = 'prefixDigits'
      @_hash['auth_required'] = 'authRequired'
      @_hash['billing_enabled'] = 'billingEnabled'
      @_hash
    end

    def initialize(name = nil,
                   alpha3_code = nil,
                   country_code = nil,
                   prefix_digits = nil,
                   auth_required = nil,
                   billing_enabled = nil)
      @name = name
      @alpha3_code = alpha3_code
      @country_code = country_code
      @prefix_digits = prefix_digits
      @auth_required = auth_required
      @billing_enabled = billing_enabled
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      name = hash['name']
      alpha3_code = hash['alpha3Code']
      country_code = hash['countryCode']
      prefix_digits = hash['prefixDigits']
      auth_required = hash['authRequired']
      billing_enabled = hash['billingEnabled']

      # Create object from extracted values.
      BreakOutCountry.new(name,
                          alpha3_code,
                          country_code,
                          prefix_digits,
                          auth_required,
                          billing_enabled)
    end

    def self.from_element(root)
      name = XmlUtilities.from_element(root, 'Name', String)
      alpha3_code = XmlUtilities.from_element(root, 'Alpha3Code', String)
      country_code = XmlUtilities.from_element(root, 'CountryCode', Integer)
      prefix_digits = XmlUtilities.from_element_to_array(
        root, 'Digits', Integer,
        wrapping_element_name: 'PrefixDigits'
      )
      auth_required = XmlUtilities.from_element(root, 'AuthRequired', TrueClass)
      billing_enabled = XmlUtilities.from_element(root, 'BillingEnabled',
                                                  TrueClass)

      new(name,
          alpha3_code,
          country_code,
          prefix_digits,
          auth_required,
          billing_enabled)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'Name', name)
      XmlUtilities.add_as_subelement(doc, root, 'Alpha3Code', alpha3_code)
      XmlUtilities.add_as_subelement(doc, root, 'CountryCode', country_code)
      XmlUtilities.add_array_as_subelement(
        doc, root, 'Digits', prefix_digits,
        wrapping_element_name: 'PrefixDigits'
      )
      XmlUtilities.add_as_subelement(doc, root, 'AuthRequired', auth_required)
      XmlUtilities.add_as_subelement(doc, root, 'BillingEnabled',
                                     billing_enabled)

      root
    end
  end
end
