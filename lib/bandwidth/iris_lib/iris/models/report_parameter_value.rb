# bandwidth
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Bandwidth
  # ReportParameterValue Model.
  class ReportParameterValue < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :parameter_name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :jasper_parameter_id

    # TODO: Write general description for this method
    # @return [List of String]
    attr_accessor :values

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['parameter_name'] = 'parameterName'
      @_hash['jasper_parameter_id'] = 'jasperParameterId'
      @_hash['values'] = 'values'
      @_hash
    end

    def initialize(parameter_name = nil,
                   jasper_parameter_id = nil,
                   values = nil)
      @parameter_name = parameter_name
      @jasper_parameter_id = jasper_parameter_id
      @values = values
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      parameter_name = hash['parameterName']
      jasper_parameter_id = hash['jasperParameterId']
      values = hash['values']

      # Create object from extracted values.
      ReportParameterValue.new(parameter_name,
                               jasper_parameter_id,
                               values)
    end

    def self.from_element(root)
      parameter_name = XmlUtilities.from_element(root, 'Name', String)
      jasper_parameter_id = XmlUtilities.from_element(root, 'JasperParameterId',
                                                      String)
      values = XmlUtilities.from_element_to_array(root, 'Value', String)

      new(parameter_name,
          jasper_parameter_id,
          values)
    end

    def to_xml_element(doc, root_name)
      root = doc.create_element(root_name)

      XmlUtilities.add_as_subelement(doc, root, 'Name', parameter_name)
      XmlUtilities.add_as_subelement(doc, root, 'JasperParameterId',
                                     jasper_parameter_id)
      XmlUtilities.add_array_as_subelement(doc, root, 'Value', values)

      root
    end
  end
end
